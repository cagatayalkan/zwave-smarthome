/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l="1.11.1",m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:"jQuery"+(l+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===m.type(a)},isArray:Array.isArray||function(a){return"array"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,"ms-").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(n,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function r(a){var b=a.length,c=m.type(a);return"function"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C="undefined",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O=N.replace("w","w#"),P="\\["+M+"*("+N+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+M+"*\\]",Q=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",R=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),S=new RegExp("^"+M+"*,"+M+"*"),T=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),V=new RegExp(Q),W=new RegExp("^"+O+"$"),X={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+Q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab=/[+~]/,bb=/'|\\/g,cb=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),db=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||"string"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(bb,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(",")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function gb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function lb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){m()},!1):g.attachEvent&&g.attachEvent("onunload",function(){m()})),c.attributes=ib(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML="<select msallowclip=''><option selected=''></option></select>",a.querySelectorAll("[msallowclip^='']").length&&q.push("[*^$]="+M+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+M+"*(?:value|"+L+")"),a.querySelectorAll(":checked").length||q.push(":checked")}),ib(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+M+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",Q)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||"").replace(cb,db),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+M+")"+a+"("+M+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?hb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||"")||fb.error("unsupported lang: "+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=lb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=mb(b);function pb(){}pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)};function qb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ub(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}return h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qb(j),!a)return I.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ib(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||jb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||jb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute("disabled")})||jb(L,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);m.find=s,m.expr=s.selectors,m.expr[":"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,v=/^.[^:#\[\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,"string"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?"undefined"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||"string"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?"string"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,"parentNode")},parentsUntil:function(a,b,c){return m.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return m.dir(a,"nextSibling")},prevAll:function(a){return m.dir(a,"previousSibling")},nextUntil:function(a,b,c){return m.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return m.dir(a,"previousSibling",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler("ready"),m(y).off("ready")))}}});function I(){y.addEventListener?(y.removeEventListener("DOMContentLoaded",J,!1),a.removeEventListener("load",J,!1)):(y.detachEvent("onreadystatechange",J),a.detachEvent("onload",J))}function J(){(y.addEventListener||"load"===event.type||"complete"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),"complete"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener("DOMContentLoaded",J,!1),a.addEventListener("load",J,!1);else{y.attachEvent("onreadystatechange",J),a.attachEvent("onload",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K="undefined",L;for(L in m(k))break;k.ownLast="0"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement("div");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(N,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if(("data"!==b||!m.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;
if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks("once memory").add(function(){m._removeData(a,b+"queue"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=m._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===m.css(a,"display")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement("input"),b=y.createElement("div"),c=y.createDocumentFragment();if(b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName("tbody").length,k.htmlSerialize=!!b.getElementsByTagName("link").length,k.html5Clone="<:nav></:nav>"!==y.createElement("nav").cloneNode(!0).outerHTML,a.type="checkbox",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(k[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),k[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\.(.+)|)$/;function ab(){return!0}function bb(){return!1}function cb(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(E)||[""],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(".")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[m.expando]?b:new m.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,"events")||{})[b.type]&&m._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,"events")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==cb()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===cb()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return m.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ab:bb):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:bb,isPropagationStopped:bb,isImmediatePropagationStopped:bb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ab,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ab,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ab,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,"form")?!1:void m.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=m.nodeName(b,"input")||m.nodeName(b,"button")?b.form:void 0;c&&!m._data(c,"submitBubbles")&&(m.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),m._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,"form")?!1:void m.event.remove(this,"._submit")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(m.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate("change",this,a,!0)})),!1):void m.event.add(this,"beforeactivate._change",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,"changeBubbles")&&(m.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate("change",this.parentNode,a,!0)}),m._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,"._change"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=bb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=bb),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function db(a){var b=eb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var eb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fb=/ jQuery\d+="(?:null|\d+)"/g,gb=new RegExp("<(?:"+eb+")[\\s/>]","i"),hb=/^\s+/,ib=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jb=/<([\w:]+)/,kb=/<tbody/i,lb=/<|&#?\w+;/,mb=/<(?:script|style|link)/i,nb=/checked\s*(?:[^=]|=\s*.checked.)/i,ob=/^$|\/(?:java|ecma)script/i,pb=/^true\/(.*)/,qb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,rb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:k.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},sb=db(y),tb=sb.appendChild(y.createElement("div"));rb.optgroup=rb.option,rb.tbody=rb.tfoot=rb.colgroup=rb.caption=rb.thead,rb.th=rb.td;function ub(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ub(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function vb(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wb(a,b){return m.nodeName(a,"table")&&m.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function xb(a){return a.type=(null!==m.find.attr(a,"type"))+"/"+a.type,a}function yb(a){var b=pb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function zb(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,"globalEval",!b||m._data(b[d],"globalEval"))}function Ab(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Bb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}"script"===c&&b.text!==a.text?(xb(b).text=a.text,yb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!gb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(tb.innerHTML=a.outerHTML,tb.removeChild(f=tb.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ub(f),h=ub(a),g=0;null!=(e=h[g]);++g)d[g]&&Bb(e,d[g]);if(b)if(c)for(h=h||ub(a),d=d||ub(f),g=0;null!=(e=h[g]);g++)Ab(e,d[g]);else Ab(a,f);return d=ub(f,"script"),d.length>0&&zb(d,!i&&ub(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=db(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if("object"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(lb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(jb.exec(f)||["",""])[1].toLowerCase(),l=rb[i]||rb._default,h.innerHTML=l[1]+f.replace(ib,"<$1></$2>")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&hb.test(f)&&p.push(b.createTextNode(hb.exec(f)[0])),!k.tbody){f="table"!==i||kb.test(f)?"<table>"!==l[1]||kb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ub(p,"input"),vb),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ub(o.appendChild(f),"script"),g&&zb(h),c)){e=0;while(f=h[e++])ob.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ub(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&zb(ub(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ub(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fb,""):void 0;if(!("string"!=typeof a||mb.test(a)||!k.htmlSerialize&&gb.test(a)||!k.leadingWhitespace&&hb.test(a)||rb[(jb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(ib,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ub(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ub(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&nb.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ub(i,"script"),xb),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ub(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,yb),j=0;f>j;j++)d=g[j],ob.test(d.type||"")&&!m._data(d,"globalEval")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||"").replace(qb,"")));i=c=null}return this}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Cb,Db={};function Eb(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],"display");return e.detach(),f}function Fb(a){var b=y,c=Db[a];return c||(c=Eb(a,b),"none"!==c&&c||(Cb=(Cb||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Cb[0].contentWindow||Cb[0].contentDocument).document,b.write(),b.close(),c=Eb(a,b),Cb.detach()),Db[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName("body")[0],c&&c.style?(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(y.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Gb=/^margin/,Hb=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ib,Jb,Kb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ib=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Hb.test(g)&&Gb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):y.documentElement.currentStyle&&(Ib=function(a){return a.currentStyle},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Hb.test(g)&&!Kb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Lb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement("div"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=d&&d.style){c.cssText="float:left;opacity:.5",k.opacity="0.5"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip="content-box",b.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===b.style.backgroundClip,k.boxSizing=""===c.boxSizing||""===c.MozBoxSizing||""===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),b.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",e=f=!1,h=!0,a.getComputedStyle&&(e="1%"!==(a.getComputedStyle(b,null)||{}).top,f="4px"===(a.getComputedStyle(b,null)||{width:"4px"}).width,i=b.appendChild(y.createElement("div")),i.style.cssText=b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",b.style.width="1px",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight)),b.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=b.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",g=0===i[0].offsetHeight,g&&(i[0].style.display="",i[1].style.display="none",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Mb=/alpha\([^)]*\)/i,Nb=/opacity\s*=\s*([^)]*)/,Ob=/^(none|table(?!-c[ea]).+)/,Pb=new RegExp("^("+S+")(.*)$","i"),Qb=new RegExp("^([+-])=("+S+")","i"),Rb={position:"absolute",visibility:"hidden",display:"block"},Sb={letterSpacing:"0",fontWeight:"400"},Tb=["Webkit","O","Moz","ms"];function Ub(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Tb.length;while(e--)if(b=Tb[e]+c,b in a)return b;return d}function Vb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=m._data(d,"olddisplay",Fb(d.nodeName)))):(e=U(d),(c&&"none"!==c||!e)&&m._data(d,"olddisplay",e?c:m.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Wb(a,b,c){var d=Pb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Xb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=m.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=m.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=m.css(a,"border"+T[f]+"Width",!0,e))):(g+=m.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=m.css(a,"border"+T[f]+"Width",!0,e)));return g}function Yb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ib(a),g=k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Jb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Hb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xb(a,b,c||(g?"border":"content"),d,f)+"px"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Jb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":k.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ub(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Qb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||m.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ub(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Jb(a,b,d)),"normal"===f&&b in Sb&&(f=Sb[b]),""===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each(["height","width"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Ob.test(m.css(a,"display"))&&0===a.offsetWidth?m.swap(a,Rb,function(){return Yb(a,b,d)}):Yb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ib(a);return Wb(a,c,d?Xb(a,b,d,k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Nb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===m.trim(f.replace(Mb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Mb.test(f)?f.replace(Mb,e):f+" "+e)}}),m.cssHooks.marginRight=Lb(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:"inline-block"},Jb,[a,"marginRight"]):void 0}),m.each({margin:"",padding:"",border:"Width"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Gb.test(a)||(m.cssHooks[a+b].set=Wb)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ib(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Vb(this,!0)},hide:function(){return Vb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Zb(a,b,c,d,e){return new Zb.prototype.init(a,b,c,d,e)}m.Tween=Zb,Zb.prototype={constructor:Zb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?"":"px")
},cur:function(){var a=Zb.propHooks[this.prop];return a&&a.get?a.get(this):Zb.propHooks._default.get(this)},run:function(a){var b,c=Zb.propHooks[this.prop];return this.pos=b=this.options.duration?m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Zb.propHooks._default.set(this),this}},Zb.prototype.init.prototype=Zb.prototype,Zb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Zb.propHooks.scrollTop=Zb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Zb.prototype.init,m.fx.step={};var $b,_b,ac=/^(?:toggle|show|hide)$/,bc=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),cc=/queueHooks$/,dc=[ic],ec={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bc.exec(b),f=e&&e[3]||(m.cssNumber[a]?"":"px"),g=(m.cssNumber[a]||"px"!==f&&+d)&&bc.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fc(){return setTimeout(function(){$b=void 0}),$b=m.now()}function gc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function hc(a,b,c){for(var d,e=(ec[b]||[]).concat(ec["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ic(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,"fxshow");c.queue||(h=m._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,"display"),l="none"===j?m._data(a,"olddisplay")||Fb(a.nodeName):j,"inline"===l&&"none"===m.css(a,"float")&&(k.inlineBlockNeedsLayout&&"inline"!==Fb(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ac.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))"inline"===("none"===j?Fb(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=m._data(a,"fxshow",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,"fxshow");for(b in o)m.style(a,b,o[b])});for(d in o)g=hc(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function jc(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kc(a,b,c){var d,e,f=0,g=dc.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$b||fc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$b||fc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jc(k,j.opts.specialEasing);g>f;f++)if(d=dc[f].call(j,a,k,j.opts))return d;return m.map(k,hc,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kc,{tweener:function(a,b){m.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],ec[c]=ec[c]||[],ec[c].unshift(b)},prefilter:function(a,b){b?dc.unshift(a):dc.push(a)}}),m.speed=function(a,b,c){var d=a&&"object"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kc(this,m.extend({},a),f);(e||m._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=m._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each(["toggle","show","hide"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gc(b,!0),a,d,e)}}),m.each({slideDown:gc("show"),slideUp:gc("hide"),slideToggle:gc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($b=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$b=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_b||(_b=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_b),_b=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement("div"),b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=y.createElement("select"),e=c.appendChild(y.createElement("option")),a=b.getElementsByTagName("input")[0],d.style.cssText="top:1px",k.getSetAttribute="t"!==b.className,k.style=/top/.test(d.getAttribute("style")),k.hrefNormalized="/a"===d.getAttribute("href"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement("form").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement("input"),a.setAttribute("value",""),k.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),k.radioValue="t"===a.value}();var lc=/\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e="":"number"==typeof e?e+="":m.isArray(e)&&(e=m.map(e,function(a){return null==a?"":a+""})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lc,""):null==c?"":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,"value");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&m.nodeName(c.parentNode,"optgroup"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mc,nc,oc=m.expr.attrHandle,pc=/^(?:checked|selected)$/i,qc=k.getSetAttribute,rc=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nc:mc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rc&&qc||!pc.test(c)?a[d]=!1:a[m.camelCase("default-"+c)]=a[d]=!1:m.attr(a,c,""),a.removeAttribute(qc?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&m.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),nc={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rc&&qc||!pc.test(c)?a.setAttribute(!qc&&m.propFix[c]||c,c):a[m.camelCase("default-"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\w+/g),function(a,b){var c=oc[b]||m.find.attr;oc[b]=rc&&qc||!pc.test(b)?function(a,b,d){var e,f;return d||(f=oc[b],oc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,oc[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase("default-"+b)]?b.toLowerCase():null}}),rc&&qc||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,"input")?void(a.defaultValue=b):mc&&mc.set(a,b,c)}}),qc||(mc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},oc.id=oc.name=oc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mc.set},m.attrHooks.contenteditable={set:function(a,b,c){mc.set(a,""===b?!1:b,c)}},m.each(["width","height"],function(a,b){m.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var sc=/^(?:input|select|textarea|button|object)$/i,tc=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,"tabindex");return b?parseInt(b,10):sc.test(a.nodeName)||tc.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each(["href","src"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype="encoding");var uc=/[\t\r\n\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?m.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||"boolean"===c)&&(this.className&&m._data(this,"__className__",this.className),this.className=this.className||a===!1?"":m._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(uc," ").indexOf(b)>=0)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var vc=m.now(),wc=/\?/,xc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=m.trim(b+"");return e&&!m.trim(e.replace(xc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():m.error("Invalid JSON: "+b)},m.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+b),c};var yc,zc,Ac=/#.*$/,Bc=/([?&])_=[^&]*/,Cc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Dc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec=/^(?:GET|HEAD)$/,Fc=/^\/\//,Gc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hc={},Ic={},Jc="*/".concat("*");try{zc=location.href}catch(Kc){zc=y.createElement("a"),zc.href="",zc=zc.href}yc=Gc.exec(zc.toLowerCase())||[];function Lc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mc(a,b,c,d){var e={},f=a===Ic;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Nc(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Oc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zc,type:"GET",isLocal:Dc.test(yc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Jc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nc(Nc(a,m.ajaxSettings),b):Nc(m.ajaxSettings,a)},ajaxPrefilter:Lc(Hc),ajaxTransport:Lc(Ic),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zc)+"").replace(Ac,"").replace(Fc,yc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(c=Gc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yc[1]&&c[2]===yc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(yc[3]||("http:"===yc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mc(Hc,k,b,v),2===t)return v;h=k.global,h&&0===m.active++&&m.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Ec.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Bc.test(e)?e.replace(Bc,"$1_="+vc++):e+(wc.test(e)?"&":"?")+"_="+vc++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader("If-Modified-Since",m.lastModified[e]),m.etag[e]&&v.setRequestHeader("If-None-Match",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Jc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mc(Ic,k,b,v)){v.readyState=1,h&&n.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Oc(k,v,c)),u=Pc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(m.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(m.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger("ajaxComplete",[v,k]),--m.active||m.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,"json")},getScript:function(a,b){return m.get(a,void 0,b,"script")}}),m.each(["get","post"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m._evalUrl=function(a){return m.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||m.css(a,"display"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qc=/%20/g,Rc=/\[\]$/,Sc=/\r?\n/g,Tc=/^(?:submit|button|image|reset|file)$/i,Uc=/^(?:input|select|textarea|keygen)/i;function Vc(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rc.test(a)?d(a,e):Vc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==m.type(b))d(a,b);else for(e in b)Vc(a+"["+e+"]",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vc(c,a[c],b,e);return d.join("&").replace(Qc,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,"elements");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(":disabled")&&Uc.test(this.nodeName)&&!Tc.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sc,"\r\n")}}):{name:b.name,value:c.replace(Sc,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zc()||$c()}:Zc;var Wc=0,Xc={},Yc=m.ajaxSettings.xhr();a.ActiveXObject&&m(a).on("unload",function(){for(var a in Xc)Xc[a](void 0,!0)}),k.cors=!!Yc&&"withCredentials"in Yc,Yc=k.ajax=!!Yc,Yc&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xc[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zc(){try{return new a.XMLHttpRequest}catch(b){}}function $c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),m.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=y.head||m("head")[0]||y.documentElement;return{send:function(d,e){b=y.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _c=[],ad=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=_c.pop()||m.expando+"_"+vc++;return this[a]=!0,a}}),m.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ad.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&ad.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ad,"$1"+e):b.jsonp!==!1&&(b.url+=(wc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||m.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_c.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),m.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bd=m.fn.load;m.fn.load=function(a,b,c){if("string"!=typeof a&&bd)return bd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&m.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?m("<div>").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cd=a.document.documentElement;function dd(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,"position"),l=m(a),n={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=m.css(a,"top"),i=m.css(a,"left"),j=("absolute"===k||"fixed"===k)&&m.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),"using"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dd(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===m.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],"html")||(c=a.offset()),c.top+=m.css(a[0],"borderTopWidth",!0),c.left+=m.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-m.css(d,"marginTop",!0),left:b.left-c.left-m.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cd;while(a&&!m.nodeName(a,"html")&&"static"===m.css(a,"position"))a=a.offsetParent;return a||cd})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dd(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each(["top","left"],function(a,b){m.cssHooks[b]=Lb(k.pixelPosition,function(a,c){return c?(c=Jb(a,b),Hb.test(c)?m(a).position()[b]+"px":c):void 0})}),m.each({Height:"height",Width:"width"},function(a,b){m.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var ed=a.jQuery,fd=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fd),b&&a.jQuery===m&&(a.jQuery=ed),m},typeof b===K&&(a.jQuery=a.$=m),m});

/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 1.0.1-beta.4
 *
 * Copyright 2014 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */


(function(){

	"use strict";

	//Declare root variable - window in the browser, global on the server
	var root = this,
		previous = root.Chart;

	//Occupy the global variable of Chart, and create a simple base class
	var Chart = function(context){
		var chart = this;
		this.canvas = context.canvas;

		this.ctx = context;

		//Variables global to the chart
		var width = this.width = context.canvas.width;
		var height = this.height = context.canvas.height;
		this.aspectRatio = this.width / this.height;
		//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.
		helpers.retinaScale(this);

		return this;
	};
	//Globally expose the defaults to allow for user updating/changing
	Chart.defaults = {
		global: {
			// Boolean - Whether to animate the chart
			animation: true,

			// Number - Number of animation steps
			animationSteps: 60,

			// String - Animation easing effect
			animationEasing: "easeOutQuart",

			// Boolean - If we should show the scale at all
			showScale: true,

			// Boolean - If we want to override with a hard coded scale
			scaleOverride: false,

			// ** Required if scaleOverride is true **
			// Number - The number of steps in a hard coded scale
			scaleSteps: null,
			// Number - The value jump in the hard coded scale
			scaleStepWidth: null,
			// Number - The scale starting value
			scaleStartValue: null,

			// String - Colour of the scale line
			scaleLineColor: "rgba(0,0,0,.1)",

			// Number - Pixel width of the scale line
			scaleLineWidth: 1,

			// Boolean - Whether to show labels on the scale
			scaleShowLabels: true,

			// Interpolated JS string - can access value
			scaleLabel: "<%=value%>",

			// Boolean - Whether the scale should stick to integers, and not show any floats even if drawing space is there
			scaleIntegersOnly: true,

			// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
			scaleBeginAtZero: false,

			// String - Scale label font declaration for the scale label
			scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

			// Number - Scale label font size in pixels
			scaleFontSize: 12,

			// String - Scale label font weight style
			scaleFontStyle: "normal",

			// String - Scale label font colour
			scaleFontColor: "#666",

			// Boolean - whether or not the chart should be responsive and resize when the browser does.
			responsive: false,

                        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                        maintainAspectRatio: true,

			// Boolean - Determines whether to draw tooltips on the canvas or not - attaches events to touchmove & mousemove
			showTooltips: true,

			// Array - Array of string names to attach tooltip events
			tooltipEvents: ["mousemove", "touchstart", "touchmove", "mouseout"],

			// String - Tooltip background colour
			tooltipFillColor: "rgba(0,0,0,0.8)",

			// String - Tooltip label font declaration for the scale label
			tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

			// Number - Tooltip label font size in pixels
			tooltipFontSize: 14,

			// String - Tooltip font weight style
			tooltipFontStyle: "normal",

			// String - Tooltip label font colour
			tooltipFontColor: "#fff",

			// String - Tooltip title font declaration for the scale label
			tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

			// Number - Tooltip title font size in pixels
			tooltipTitleFontSize: 14,

			// String - Tooltip title font weight style
			tooltipTitleFontStyle: "bold",

			// String - Tooltip title font colour
			tooltipTitleFontColor: "#fff",

			// Number - pixel width of padding around tooltip text
			tooltipYPadding: 6,

			// Number - pixel width of padding around tooltip text
			tooltipXPadding: 6,

			// Number - Size of the caret on the tooltip
			tooltipCaretSize: 8,

			// Number - Pixel radius of the tooltip border
			tooltipCornerRadius: 6,

			// Number - Pixel offset from point x to tooltip edge
			tooltipXOffset: 10,

			// String - Template string for single tooltips
			tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",

			// String - Template string for single tooltips
			multiTooltipTemplate: "<%= value %>",

			// String - Colour behind the legend colour block
			multiTooltipKeyBackground: '#fff',

			// Function - Will fire on animation progression.
			onAnimationProgress: function(){},

			// Function - Will fire on animation completion.
			onAnimationComplete: function(){}

		}
	};

	//Create a dictionary of chart types, to allow for extension of existing types
	Chart.types = {};

	//Global Chart helpers object for utility methods and classes
	var helpers = Chart.helpers = {};

		//-- Basic js utility methods
	var each = helpers.each = function(loopable,callback,self){
			var additionalArgs = Array.prototype.slice.call(arguments, 3);
			// Check to see if null or undefined firstly.
			if (loopable){
				if (loopable.length === +loopable.length){
					var i;
					for (i=0; i<loopable.length; i++){
						callback.apply(self,[loopable[i], i].concat(additionalArgs));
					}
				}
				else{
					for (var item in loopable){
						callback.apply(self,[loopable[item],item].concat(additionalArgs));
					}
				}
			}
		},
		clone = helpers.clone = function(obj){
			var objClone = {};
			each(obj,function(value,key){
				if (obj.hasOwnProperty(key)) objClone[key] = value;
			});
			return objClone;
		},
		extend = helpers.extend = function(base){
			each(Array.prototype.slice.call(arguments,1), function(extensionObject) {
				each(extensionObject,function(value,key){
					if (extensionObject.hasOwnProperty(key)) base[key] = value;
				});
			});
			return base;
		},
		merge = helpers.merge = function(base,master){
			//Merge properties in left object over to a shallow clone of object right.
			var args = Array.prototype.slice.call(arguments,0);
			args.unshift({});
			return extend.apply(null, args);
		},
		indexOf = helpers.indexOf = function(arrayToSearch, item){
			if (Array.prototype.indexOf) {
				return arrayToSearch.indexOf(item);
			}
			else{
				for (var i = 0; i < arrayToSearch.length; i++) {
					if (arrayToSearch[i] === item) return i;
				}
				return -1;
			}
		},
		where = helpers.where = function(collection, filterCallback){
			var filtered = [];

			helpers.each(collection, function(item){
				if (filterCallback(item)){
					filtered.push(item);
				}
			});

			return filtered;
		},
		findNextWhere = helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex){
			// Default to start of the array
			if (!startIndex){
				startIndex = -1;
			}
			for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)){
					return currentItem;
				}
			};
		},
		findPreviousWhere = helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex){
			// Default to end of the array
			if (!startIndex){
				startIndex = arrayToSearch.length;
			}
			for (var i = startIndex - 1; i >= 0; i--) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)){
					return currentItem;
				}
			};
		},
		inherits = helpers.inherits = function(extensions){
			//Basic javascript inheritance based on the model created in Backbone.js
			var parent = this;
			var ChartElement = (extensions && extensions.hasOwnProperty("constructor")) ? extensions.constructor : function(){ return parent.apply(this, arguments); };

			var Surrogate = function(){ this.constructor = ChartElement;};
			Surrogate.prototype = parent.prototype;
			ChartElement.prototype = new Surrogate();

			ChartElement.extend = inherits;

			if (extensions) extend(ChartElement.prototype, extensions);

			ChartElement.__super__ = parent.prototype;

			return ChartElement;
		},
		noop = helpers.noop = function(){},
		uid = helpers.uid = (function(){
			var id=0;
			return function(){
				return "chart-" + id++;
			};
		})(),
		warn = helpers.warn = function(str){
			//Method for warning of errors
			if (window.console && typeof window.console.warn == "function") console.warn(str);
		},
		amd = helpers.amd = (typeof define == 'function' && define.amd),
		//-- Math methods
		isNumber = helpers.isNumber = function(n){
			return !isNaN(parseFloat(n)) && isFinite(n);
		},
		max = helpers.max = function(array){
			return Math.max.apply( Math, array );
		},
		min = helpers.min = function(array){
			return Math.min.apply( Math, array );
		},
		cap = helpers.cap = function(valueToCap,maxValue,minValue){
			if(isNumber(maxValue)) {
				if( valueToCap > maxValue ) {
					return maxValue;
				}
			}
			else if(isNumber(minValue)){
				if ( valueToCap < minValue ){
					return minValue;
				}
			}
			return valueToCap;
		},
		getDecimalPlaces = helpers.getDecimalPlaces = function(num){
			if (num%1!==0 && isNumber(num)){
				return num.toString().split(".")[1].length;
			}
			else {
				return 0;
			}
		},
		toRadians = helpers.radians = function(degrees){
			return degrees * (Math.PI/180);
		},
		// Gets the angle from vertical upright to the point about a centre.
		getAngleFromPoint = helpers.getAngleFromPoint = function(centrePoint, anglePoint){
			var distanceFromXCenter = anglePoint.x - centrePoint.x,
				distanceFromYCenter = anglePoint.y - centrePoint.y,
				radialDistanceFromCenter = Math.sqrt( distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);


			var angle = Math.PI * 2 + Math.atan2(distanceFromYCenter, distanceFromXCenter);

			//If the segment is in the top left quadrant, we need to add another rotation to the angle
			if (distanceFromXCenter < 0 && distanceFromYCenter < 0){
				angle += Math.PI*2;
			}

			return {
				angle: angle,
				distance: radialDistanceFromCenter
			};
		},
		aliasPixel = helpers.aliasPixel = function(pixelWidth){
			return (pixelWidth % 2 === 0) ? 0 : 0.5;
		},
		splineCurve = helpers.splineCurve = function(FirstPoint,MiddlePoint,AfterPoint,t){
			//Props to Rob Spencer at scaled innovation for his post on splining between points
			//http://scaledinnovation.com/analytics/splines/aboutSplines.html
			var d01=Math.sqrt(Math.pow(MiddlePoint.x-FirstPoint.x,2)+Math.pow(MiddlePoint.y-FirstPoint.y,2)),
				d12=Math.sqrt(Math.pow(AfterPoint.x-MiddlePoint.x,2)+Math.pow(AfterPoint.y-MiddlePoint.y,2)),
				fa=t*d01/(d01+d12),// scaling factor for triangle Ta
				fb=t*d12/(d01+d12);
			return {
				inner : {
					x : MiddlePoint.x-fa*(AfterPoint.x-FirstPoint.x),
					y : MiddlePoint.y-fa*(AfterPoint.y-FirstPoint.y)
				},
				outer : {
					x: MiddlePoint.x+fb*(AfterPoint.x-FirstPoint.x),
					y : MiddlePoint.y+fb*(AfterPoint.y-FirstPoint.y)
				}
			};
		},
		calculateOrderOfMagnitude = helpers.calculateOrderOfMagnitude = function(val){
			return Math.floor(Math.log(val) / Math.LN10);
		},
		calculateScaleRange = helpers.calculateScaleRange = function(valuesArray, drawingSize, textSize, startFromZero, integersOnly){

			//Set a minimum step of two - a point at the top of the graph, and a point at the base
			var minSteps = 2,
				maxSteps = Math.floor(drawingSize/(textSize * 1.5)),
				skipFitting = (minSteps >= maxSteps);

			var maxValue = max(valuesArray),
				minValue = min(valuesArray);

			// We need some degree of seperation here to calculate the scales if all the values are the same
			// Adding/minusing 0.5 will give us a range of 1.
			if (maxValue === minValue){
				maxValue += 0.5;
				// So we don't end up with a graph with a negative start value if we've said always start from zero
				if (minValue >= 0.5 && !startFromZero){
					minValue -= 0.5;
				}
				else{
					// Make up a whole number above the values
					maxValue += 0.5;
				}
			}

			var	valueRange = Math.abs(maxValue - minValue),
				rangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),
				graphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),
				graphMin = (startFromZero) ? 0 : Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),
				graphRange = graphMax - graphMin,
				stepValue = Math.pow(10, rangeOrderOfMagnitude),
				numberOfSteps = Math.round(graphRange / stepValue);

			//If we have more space on the graph we'll use it to give more definition to the data
			while((numberOfSteps > maxSteps || (numberOfSteps * 2) < maxSteps) && !skipFitting) {
				if(numberOfSteps > maxSteps){
					stepValue *=2;
					numberOfSteps = Math.round(graphRange/stepValue);
					// Don't ever deal with a decimal number of steps - cancel fitting and just use the minimum number of steps.
					if (numberOfSteps % 1 !== 0){
						skipFitting = true;
					}
				}
				//We can fit in double the amount of scale points on the scale
				else{
					//If user has declared ints only, and the step value isn't a decimal
					if (integersOnly && rangeOrderOfMagnitude >= 0){
						//If the user has said integers only, we need to check that making the scale more granular wouldn't make it a float
						if(stepValue/2 % 1 === 0){
							stepValue /=2;
							numberOfSteps = Math.round(graphRange/stepValue);
						}
						//If it would make it a float break out of the loop
						else{
							break;
						}
					}
					//If the scale doesn't have to be an int, make the scale more granular anyway.
					else{
						stepValue /=2;
						numberOfSteps = Math.round(graphRange/stepValue);
					}

				}
			}

			if (skipFitting){
				numberOfSteps = minSteps;
				stepValue = graphRange / numberOfSteps;
			}

			return {
				steps : numberOfSteps,
				stepValue : stepValue,
				min : graphMin,
				max	: graphMin + (numberOfSteps * stepValue)
			};

		},
		/* jshint ignore:start */
		// Blows up jshint errors based on the new Function constructor
		//Templating methods
		//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/
		template = helpers.template = function(templateString, valuesObject){
			 // If templateString is function rather than string-template - call the function for valuesObject
			if(templateString instanceof Function){
			 	return templateString(valuesObject);
		 	}

			var cache = {};
			function tmpl(str, data){
				// Figure out if we're getting a template, or if we need to
				// load the template - and be sure to cache the result.
				var fn = !/\W/.test(str) ?
				cache[str] = cache[str] :

				// Generate a reusable function that will serve as a template
				// generator (and which will be cached).
				new Function("obj",
					"var p=[],print=function(){p.push.apply(p,arguments);};" +

					// Introduce the data as local variables using with(){}
					"with(obj){p.push('" +

					// Convert the template into pure JavaScript
					str
						.replace(/[\r\t\n]/g, " ")
						.split("<%").join("\t")
						.replace(/((^|%>)[^\t]*)'/g, "$1\r")
						.replace(/\t=(.*?)%>/g, "',$1,'")
						.split("\t").join("');")
						.split("%>").join("p.push('")
						.split("\r").join("\\'") +
					"');}return p.join('');"
				);

				// Provide some basic currying to the user
				return data ? fn( data ) : fn;
			}
			return tmpl(templateString,valuesObject);
		},
		/* jshint ignore:end */
		generateLabels = helpers.generateLabels = function(templateString,numberOfSteps,graphMin,stepValue){
			var labelsArray = new Array(numberOfSteps);
			if (labelTemplateString){
				each(labelsArray,function(val,index){
					labelsArray[index] = template(templateString,{value: (graphMin + (stepValue*(index+1)))});
				});
			}
			return labelsArray;
		},
		//--Animation methods
		//Easing functions adapted from Robert Penner's easing equations
		//http://www.robertpenner.com/easing/
		easingEffects = helpers.easingEffects = {
			linear: function (t) {
				return t;
			},
			easeInQuad: function (t) {
				return t * t;
			},
			easeOutQuad: function (t) {
				return -1 * t * (t - 2);
			},
			easeInOutQuad: function (t) {
				if ((t /= 1 / 2) < 1) return 1 / 2 * t * t;
				return -1 / 2 * ((--t) * (t - 2) - 1);
			},
			easeInCubic: function (t) {
				return t * t * t;
			},
			easeOutCubic: function (t) {
				return 1 * ((t = t / 1 - 1) * t * t + 1);
			},
			easeInOutCubic: function (t) {
				if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t;
				return 1 / 2 * ((t -= 2) * t * t + 2);
			},
			easeInQuart: function (t) {
				return t * t * t * t;
			},
			easeOutQuart: function (t) {
				return -1 * ((t = t / 1 - 1) * t * t * t - 1);
			},
			easeInOutQuart: function (t) {
				if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t;
				return -1 / 2 * ((t -= 2) * t * t * t - 2);
			},
			easeInQuint: function (t) {
				return 1 * (t /= 1) * t * t * t * t;
			},
			easeOutQuint: function (t) {
				return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
			},
			easeInOutQuint: function (t) {
				if ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t * t;
				return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
			},
			easeInSine: function (t) {
				return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
			},
			easeOutSine: function (t) {
				return 1 * Math.sin(t / 1 * (Math.PI / 2));
			},
			easeInOutSine: function (t) {
				return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
			},
			easeInExpo: function (t) {
				return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
			},
			easeOutExpo: function (t) {
				return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
			},
			easeInOutExpo: function (t) {
				if (t === 0) return 0;
				if (t === 1) return 1;
				if ((t /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (t - 1));
				return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
			},
			easeInCirc: function (t) {
				if (t >= 1) return t;
				return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
			},
			easeOutCirc: function (t) {
				return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
			},
			easeInOutCirc: function (t) {
				if ((t /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
				return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
			},
			easeInElastic: function (t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) return 0;
				if ((t /= 1) == 1) return 1;
				if (!p) p = 1 * 0.3;
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else s = p / (2 * Math.PI) * Math.asin(1 / a);
				return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
			},
			easeOutElastic: function (t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) return 0;
				if ((t /= 1) == 1) return 1;
				if (!p) p = 1 * 0.3;
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else s = p / (2 * Math.PI) * Math.asin(1 / a);
				return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
			},
			easeInOutElastic: function (t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) return 0;
				if ((t /= 1 / 2) == 2) return 1;
				if (!p) p = 1 * (0.3 * 1.5);
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else s = p / (2 * Math.PI) * Math.asin(1 / a);
				if (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
				return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
			},
			easeInBack: function (t) {
				var s = 1.70158;
				return 1 * (t /= 1) * t * ((s + 1) * t - s);
			},
			easeOutBack: function (t) {
				var s = 1.70158;
				return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
			},
			easeInOutBack: function (t) {
				var s = 1.70158;
				if ((t /= 1 / 2) < 1) return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
				return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
			},
			easeInBounce: function (t) {
				return 1 - easingEffects.easeOutBounce(1 - t);
			},
			easeOutBounce: function (t) {
				if ((t /= 1) < (1 / 2.75)) {
					return 1 * (7.5625 * t * t);
				} else if (t < (2 / 2.75)) {
					return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
				} else if (t < (2.5 / 2.75)) {
					return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
				} else {
					return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
				}
			},
			easeInOutBounce: function (t) {
				if (t < 1 / 2) return easingEffects.easeInBounce(t * 2) * 0.5;
				return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
			}
		},
		//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
		requestAnimFrame = helpers.requestAnimFrame = (function(){
			return window.requestAnimationFrame ||
				window.webkitRequestAnimationFrame ||
				window.mozRequestAnimationFrame ||
				window.oRequestAnimationFrame ||
				window.msRequestAnimationFrame ||
				function(callback) {
					return window.setTimeout(callback, 1000 / 60);
				};
		})(),
		cancelAnimFrame = helpers.cancelAnimFrame = (function(){
			return window.cancelAnimationFrame ||
				window.webkitCancelAnimationFrame ||
				window.mozCancelAnimationFrame ||
				window.oCancelAnimationFrame ||
				window.msCancelAnimationFrame ||
				function(callback) {
					return window.clearTimeout(callback, 1000 / 60);
				};
		})(),
		animationLoop = helpers.animationLoop = function(callback,totalSteps,easingString,onProgress,onComplete,chartInstance){

			var currentStep = 0,
				easingFunction = easingEffects[easingString] || easingEffects.linear;

			var animationFrame = function(){
				currentStep++;
				var stepDecimal = currentStep/totalSteps;
				var easeDecimal = easingFunction(stepDecimal);

				callback.call(chartInstance,easeDecimal,stepDecimal, currentStep);
				onProgress.call(chartInstance,easeDecimal,stepDecimal);
				if (currentStep < totalSteps){
					chartInstance.animationFrame = requestAnimFrame(animationFrame);
				} else{
					onComplete.apply(chartInstance);
				}
			};
			requestAnimFrame(animationFrame);
		},
		//-- DOM methods
		getRelativePosition = helpers.getRelativePosition = function(evt){
			var mouseX, mouseY;
			var e = evt.originalEvent || evt,
				canvas = evt.currentTarget || evt.srcElement,
				boundingRect = canvas.getBoundingClientRect();

			if (e.touches){
				mouseX = e.touches[0].clientX - boundingRect.left;
				mouseY = e.touches[0].clientY - boundingRect.top;

			}
			else{
				mouseX = e.clientX - boundingRect.left;
				mouseY = e.clientY - boundingRect.top;
			}

			return {
				x : mouseX,
				y : mouseY
			};

		},
		addEvent = helpers.addEvent = function(node,eventType,method){
			if (node.addEventListener){
				node.addEventListener(eventType,method);
			} else if (node.attachEvent){
				node.attachEvent("on"+eventType, method);
			} else {
				node["on"+eventType] = method;
			}
		},
		removeEvent = helpers.removeEvent = function(node, eventType, handler){
			if (node.removeEventListener){
				node.removeEventListener(eventType, handler, false);
			} else if (node.detachEvent){
				node.detachEvent("on"+eventType,handler);
			} else{
				node["on" + eventType] = noop;
			}
		},
		bindEvents = helpers.bindEvents = function(chartInstance, arrayOfEvents, handler){
			// Create the events object if it's not already present
			if (!chartInstance.events) chartInstance.events = {};

			each(arrayOfEvents,function(eventName){
				chartInstance.events[eventName] = function(){
					handler.apply(chartInstance, arguments);
				};
				addEvent(chartInstance.chart.canvas,eventName,chartInstance.events[eventName]);
			});
		},
		unbindEvents = helpers.unbindEvents = function (chartInstance, arrayOfEvents) {
			each(arrayOfEvents, function(handler,eventName){
				removeEvent(chartInstance.chart.canvas, eventName, handler);
			});
		},
		getMaximumWidth = helpers.getMaximumWidth = function(domNode){
			var container = domNode.parentNode;
			// TODO = check cross browser stuff with this.
			return container.clientWidth;
		},
		getMaximumHeight = helpers.getMaximumHeight = function(domNode){
			var container = domNode.parentNode;
			// TODO = check cross browser stuff with this.
			return container.clientHeight;
		},
		getMaximumSize = helpers.getMaximumSize = helpers.getMaximumWidth, // legacy support
		retinaScale = helpers.retinaScale = function(chart){
			var ctx = chart.ctx,
				width = chart.canvas.width,
				height = chart.canvas.height;

			if (window.devicePixelRatio) {
				ctx.canvas.style.width = width + "px";
				ctx.canvas.style.height = height + "px";
				ctx.canvas.height = height * window.devicePixelRatio;
				ctx.canvas.width = width * window.devicePixelRatio;
				ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
			}
		},
		//-- Canvas methods
		clear = helpers.clear = function(chart){
			chart.ctx.clearRect(0,0,chart.width,chart.height);
		},
		fontString = helpers.fontString = function(pixelSize,fontStyle,fontFamily){
			return fontStyle + " " + pixelSize+"px " + fontFamily;
		},
		longestText = helpers.longestText = function(ctx,font,arrayOfStrings){
			ctx.font = font;
			var longest = 0;
			each(arrayOfStrings,function(string){
				var textWidth = ctx.measureText(string).width;
				longest = (textWidth > longest) ? textWidth : longest;
			});
			return longest;
		},
		drawRoundedRectangle = helpers.drawRoundedRectangle = function(ctx,x,y,width,height,radius){
			ctx.beginPath();
			ctx.moveTo(x + radius, y);
			ctx.lineTo(x + width - radius, y);
			ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
			ctx.lineTo(x + width, y + height - radius);
			ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
			ctx.lineTo(x + radius, y + height);
			ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
			ctx.lineTo(x, y + radius);
			ctx.quadraticCurveTo(x, y, x + radius, y);
			ctx.closePath();
		};


	//Store a reference to each instance - allowing us to globally resize chart instances on window resize.
	//Destroy method on the chart will remove the instance of the chart from this reference.
	Chart.instances = {};

	Chart.Type = function(data,options,chart){
		this.options = options;
		this.chart = chart;
		this.id = uid();
		//Add the chart instance to the global namespace
		Chart.instances[this.id] = this;

		// Initialize is always called when a chart type is created
		// By default it is a no op, but it should be extended
		if (options.responsive){
			this.resize();
		}
		this.initialize.call(this,data);
	};

	//Core methods that'll be a part of every chart type
	extend(Chart.Type.prototype,{
		initialize : function(){return this;},
		clear : function(){
			clear(this.chart);
			return this;
		},
		stop : function(){
			// Stops any current animation loop occuring
			helpers.cancelAnimFrame.call(root, this.animationFrame);
			return this;
		},
		resize : function(callback){
			this.stop();
			var canvas = this.chart.canvas,
				newWidth = getMaximumWidth(this.chart.canvas),
				newHeight = this.options.maintainAspectRatio ? newWidth / this.chart.aspectRatio : getMaximumHeight(this.chart.canvas);

			canvas.width = this.chart.width = newWidth;
			canvas.height =  this.chart.height = newHeight;

			retinaScale(this.chart);

			if (typeof callback === "function"){
				callback.apply(this, Array.prototype.slice.call(arguments, 1));
			}
			return this;
		},
		reflow : noop,
		render : function(reflow){
			if (reflow){
				this.reflow();
			}
			if (this.options.animation && !reflow){
				helpers.animationLoop(
					this.draw,
					this.options.animationSteps,
					this.options.animationEasing,
					this.options.onAnimationProgress,
					this.options.onAnimationComplete,
					this
				);
			}
			else{
				this.draw();
				this.options.onAnimationComplete.call(this);
			}
			return this;
		},
		generateLegend : function(){
			return template(this.options.legendTemplate,this);
		},
		destroy : function(){
			this.clear();
			unbindEvents(this, this.events);
			delete Chart.instances[this.id];
		},
		showTooltip : function(ChartElements, forceRedraw){
			// Only redraw the chart if we've actually changed what we're hovering on.
			if (typeof this.activeElements === 'undefined') this.activeElements = [];

			var isChanged = (function(Elements){
				var changed = false;

				if (Elements.length !== this.activeElements.length){
					changed = true;
					return changed;
				}

				each(Elements, function(element, index){
					if (element !== this.activeElements[index]){
						changed = true;
					}
				}, this);
				return changed;
			}).call(this, ChartElements);

			if (!isChanged && !forceRedraw){
				return;
			}
			else{
				this.activeElements = ChartElements;
			}
			this.draw();
			if (ChartElements.length > 0){
				// If we have multiple datasets, show a MultiTooltip for all of the data points at that index
				if (this.datasets && this.datasets.length > 1) {
					var dataArray,
						dataIndex;

					for (var i = this.datasets.length - 1; i >= 0; i--) {
						dataArray = this.datasets[i].points || this.datasets[i].bars || this.datasets[i].segments;
						dataIndex = indexOf(dataArray, ChartElements[0]);
						if (dataIndex !== -1){
							break;
						}
					}
					var tooltipLabels = [],
						tooltipColors = [],
						medianPosition = (function(index) {

							// Get all the points at that particular index
							var Elements = [],
								dataCollection,
								xPositions = [],
								yPositions = [],
								xMax,
								yMax,
								xMin,
								yMin;
							helpers.each(this.datasets, function(dataset){
								dataCollection = dataset.points || dataset.bars || dataset.segments;
								if (dataCollection[dataIndex] && dataCollection[dataIndex].hasValue()){
									Elements.push(dataCollection[dataIndex]);
								}
							});

							helpers.each(Elements, function(element) {
								xPositions.push(element.x);
								yPositions.push(element.y);


								//Include any colour information about the element
								tooltipLabels.push(helpers.template(this.options.multiTooltipTemplate, element));
								tooltipColors.push({
									fill: element._saved.fillColor || element.fillColor,
									stroke: element._saved.strokeColor || element.strokeColor
								});

							}, this);

							yMin = min(yPositions);
							yMax = max(yPositions);

							xMin = min(xPositions);
							xMax = max(xPositions);

							return {
								x: (xMin > this.chart.width/2) ? xMin : xMax,
								y: (yMin + yMax)/2
							};
						}).call(this, dataIndex);

					new Chart.MultiTooltip({
						x: medianPosition.x,
						y: medianPosition.y,
						xPadding: this.options.tooltipXPadding,
						yPadding: this.options.tooltipYPadding,
						xOffset: this.options.tooltipXOffset,
						fillColor: this.options.tooltipFillColor,
						textColor: this.options.tooltipFontColor,
						fontFamily: this.options.tooltipFontFamily,
						fontStyle: this.options.tooltipFontStyle,
						fontSize: this.options.tooltipFontSize,
						titleTextColor: this.options.tooltipTitleFontColor,
						titleFontFamily: this.options.tooltipTitleFontFamily,
						titleFontStyle: this.options.tooltipTitleFontStyle,
						titleFontSize: this.options.tooltipTitleFontSize,
						cornerRadius: this.options.tooltipCornerRadius,
						labels: tooltipLabels,
						legendColors: tooltipColors,
						legendColorBackground : this.options.multiTooltipKeyBackground,
						title: ChartElements[0].label,
						chart: this.chart,
						ctx: this.chart.ctx
					}).draw();

				} else {
					each(ChartElements, function(Element) {
						var tooltipPosition = Element.tooltipPosition();
						new Chart.Tooltip({
							x: Math.round(tooltipPosition.x),
							y: Math.round(tooltipPosition.y),
							xPadding: this.options.tooltipXPadding,
							yPadding: this.options.tooltipYPadding,
							fillColor: this.options.tooltipFillColor,
							textColor: this.options.tooltipFontColor,
							fontFamily: this.options.tooltipFontFamily,
							fontStyle: this.options.tooltipFontStyle,
							fontSize: this.options.tooltipFontSize,
							caretHeight: this.options.tooltipCaretSize,
							cornerRadius: this.options.tooltipCornerRadius,
							text: template(this.options.tooltipTemplate, Element),
							chart: this.chart
						}).draw();
					}, this);
				}
			}
			return this;
		},
		toBase64Image : function(){
			return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
		}
	});

	Chart.Type.extend = function(extensions){

		var parent = this;

		var ChartType = function(){
			return parent.apply(this,arguments);
		};

		//Copy the prototype object of the this class
		ChartType.prototype = clone(parent.prototype);
		//Now overwrite some of the properties in the base class with the new extensions
		extend(ChartType.prototype, extensions);

		ChartType.extend = Chart.Type.extend;

		if (extensions.name || parent.prototype.name){

			var chartName = extensions.name || parent.prototype.name;
			//Assign any potential default values of the new chart type

			//If none are defined, we'll use a clone of the chart type this is being extended from.
			//I.e. if we extend a line chart, we'll use the defaults from the line chart if our new chart
			//doesn't define some defaults of their own.

			var baseDefaults = (Chart.defaults[parent.prototype.name]) ? clone(Chart.defaults[parent.prototype.name]) : {};

			Chart.defaults[chartName] = extend(baseDefaults,extensions.defaults);

			Chart.types[chartName] = ChartType;

			//Register this new chart type in the Chart prototype
			Chart.prototype[chartName] = function(data,options){
				var config = merge(Chart.defaults.global, Chart.defaults[chartName], options || {});
				return new ChartType(data,config,this);
			};
		} else{
			warn("Name not provided for this chart, so it hasn't been registered");
		}
		return parent;
	};

	Chart.Element = function(configuration){
		extend(this,configuration);
		this.initialize.apply(this,arguments);
		this.save();
	};
	extend(Chart.Element.prototype,{
		initialize : function(){},
		restore : function(props){
			if (!props){
				extend(this,this._saved);
			} else {
				each(props,function(key){
					this[key] = this._saved[key];
				},this);
			}
			return this;
		},
		save : function(){
			this._saved = clone(this);
			delete this._saved._saved;
			return this;
		},
		update : function(newProps){
			each(newProps,function(value,key){
				this._saved[key] = this[key];
				this[key] = value;
			},this);
			return this;
		},
		transition : function(props,ease){
			each(props,function(value,key){
				this[key] = ((value - this._saved[key]) * ease) + this._saved[key];
			},this);
			return this;
		},
		tooltipPosition : function(){
			return {
				x : this.x,
				y : this.y
			};
		},
		hasValue: function(){
			return isNumber(this.value);
		}
	});

	Chart.Element.extend = inherits;


	Chart.Point = Chart.Element.extend({
		display: true,
		inRange: function(chartX,chartY){
			var hitDetectionRange = this.hitDetectionRadius + this.radius;
			return ((Math.pow(chartX-this.x, 2)+Math.pow(chartY-this.y, 2)) < Math.pow(hitDetectionRange,2));
		},
		draw : function(){
			if (this.display){
				var ctx = this.ctx;
				ctx.beginPath();

				ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);
				ctx.closePath();

				ctx.strokeStyle = this.strokeColor;
				ctx.lineWidth = this.strokeWidth;

				ctx.fillStyle = this.fillColor;

				ctx.fill();
				ctx.stroke();
			}


			//Quick debug for bezier curve splining
			//Highlights control points and the line between them.
			//Handy for dev - stripped in the min version.

			// ctx.save();
			// ctx.fillStyle = "black";
			// ctx.strokeStyle = "black"
			// ctx.beginPath();
			// ctx.arc(this.controlPoints.inner.x,this.controlPoints.inner.y, 2, 0, Math.PI*2);
			// ctx.fill();

			// ctx.beginPath();
			// ctx.arc(this.controlPoints.outer.x,this.controlPoints.outer.y, 2, 0, Math.PI*2);
			// ctx.fill();

			// ctx.moveTo(this.controlPoints.inner.x,this.controlPoints.inner.y);
			// ctx.lineTo(this.x, this.y);
			// ctx.lineTo(this.controlPoints.outer.x,this.controlPoints.outer.y);
			// ctx.stroke();

			// ctx.restore();



		}
	});

	Chart.Arc = Chart.Element.extend({
		inRange : function(chartX,chartY){

			var pointRelativePosition = helpers.getAngleFromPoint(this, {
				x: chartX,
				y: chartY
			});

			//Check if within the range of the open/close angle
			var betweenAngles = (pointRelativePosition.angle >= this.startAngle && pointRelativePosition.angle <= this.endAngle),
				withinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);

			return (betweenAngles && withinRadius);
			//Ensure within the outside of the arc centre, but inside arc outer
		},
		tooltipPosition : function(){
			var centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),
				rangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;
			return {
				x : this.x + (Math.cos(centreAngle) * rangeFromCentre),
				y : this.y + (Math.sin(centreAngle) * rangeFromCentre)
			};
		},
		draw : function(animationPercent){

			var easingDecimal = animationPercent || 1;

			var ctx = this.ctx;

			ctx.beginPath();

			ctx.arc(this.x, this.y, this.outerRadius, this.startAngle, this.endAngle);

			ctx.arc(this.x, this.y, this.innerRadius, this.endAngle, this.startAngle, true);

			ctx.closePath();
			ctx.strokeStyle = this.strokeColor;
			ctx.lineWidth = this.strokeWidth;

			ctx.fillStyle = this.fillColor;

			ctx.fill();
			ctx.lineJoin = 'bevel';

			if (this.showStroke){
				ctx.stroke();
			}
		}
	});

	Chart.Rectangle = Chart.Element.extend({
		draw : function(){
			var ctx = this.ctx,
				halfWidth = this.width/2,
				leftX = this.x - halfWidth,
				rightX = this.x + halfWidth,
				top = this.base - (this.base - this.y),
				halfStroke = this.strokeWidth / 2;

			// Canvas doesn't allow us to stroke inside the width so we can
			// adjust the sizes to fit if we're setting a stroke on the line
			if (this.showStroke){
				leftX += halfStroke;
				rightX -= halfStroke;
				top += halfStroke;
			}

			ctx.beginPath();

			ctx.fillStyle = this.fillColor;
			ctx.strokeStyle = this.strokeColor;
			ctx.lineWidth = this.strokeWidth;

			// It'd be nice to keep this class totally generic to any rectangle
			// and simply specify which border to miss out.
			ctx.moveTo(leftX, this.base);
			ctx.lineTo(leftX, top);
			ctx.lineTo(rightX, top);
			ctx.lineTo(rightX, this.base);
			ctx.fill();
			if (this.showStroke){
				ctx.stroke();
			}
		},
		height : function(){
			return this.base - this.y;
		},
		inRange : function(chartX,chartY){
			return (chartX >= this.x - this.width/2 && chartX <= this.x + this.width/2) && (chartY >= this.y && chartY <= this.base);
		}
	});

	Chart.Tooltip = Chart.Element.extend({
		draw : function(){

			var ctx = this.chart.ctx;

			ctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);

			this.xAlign = "center";
			this.yAlign = "above";

			//Distance between the actual element.y position and the start of the tooltip caret
			var caretPadding = 2;

			var tooltipWidth = ctx.measureText(this.text).width + 2*this.xPadding,
				tooltipRectHeight = this.fontSize + 2*this.yPadding,
				tooltipHeight = tooltipRectHeight + this.caretHeight + caretPadding;

			if (this.x + tooltipWidth/2 >this.chart.width){
				this.xAlign = "left";
			} else if (this.x - tooltipWidth/2 < 0){
				this.xAlign = "right";
			}

			if (this.y - tooltipHeight < 0){
				this.yAlign = "below";
			}


			var tooltipX = this.x - tooltipWidth/2,
				tooltipY = this.y - tooltipHeight;

			ctx.fillStyle = this.fillColor;

			switch(this.yAlign)
			{
			case "above":
				//Draw a caret above the x/y
				ctx.beginPath();
				ctx.moveTo(this.x,this.y - caretPadding);
				ctx.lineTo(this.x + this.caretHeight, this.y - (caretPadding + this.caretHeight));
				ctx.lineTo(this.x - this.caretHeight, this.y - (caretPadding + this.caretHeight));
				ctx.closePath();
				ctx.fill();
				break;
			case "below":
				tooltipY = this.y + caretPadding + this.caretHeight;
				//Draw a caret below the x/y
				ctx.beginPath();
				ctx.moveTo(this.x, this.y + caretPadding);
				ctx.lineTo(this.x + this.caretHeight, this.y + caretPadding + this.caretHeight);
				ctx.lineTo(this.x - this.caretHeight, this.y + caretPadding + this.caretHeight);
				ctx.closePath();
				ctx.fill();
				break;
			}

			switch(this.xAlign)
			{
			case "left":
				tooltipX = this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);
				break;
			case "right":
				tooltipX = this.x - (this.cornerRadius + this.caretHeight);
				break;
			}

			drawRoundedRectangle(ctx,tooltipX,tooltipY,tooltipWidth,tooltipRectHeight,this.cornerRadius);

			ctx.fill();

			ctx.fillStyle = this.textColor;
			ctx.textAlign = "center";
			ctx.textBaseline = "middle";
			ctx.fillText(this.text, tooltipX + tooltipWidth/2, tooltipY + tooltipRectHeight/2);
		}
	});

	Chart.MultiTooltip = Chart.Element.extend({
		initialize : function(){
			this.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);

			this.titleFont = fontString(this.titleFontSize,this.titleFontStyle,this.titleFontFamily);

			this.height = (this.labels.length * this.fontSize) + ((this.labels.length-1) * (this.fontSize/2)) + (this.yPadding*2) + this.titleFontSize *1.5;

			this.ctx.font = this.titleFont;

			var titleWidth = this.ctx.measureText(this.title).width,
				//Label has a legend square as well so account for this.
				labelWidth = longestText(this.ctx,this.font,this.labels) + this.fontSize + 3,
				longestTextWidth = max([labelWidth,titleWidth]);

			this.width = longestTextWidth + (this.xPadding*2);


			var halfHeight = this.height/2;

			//Check to ensure the height will fit on the canvas
			//The three is to buffer form the very
			if (this.y - halfHeight < 0 ){
				this.y = halfHeight;
			} else if (this.y + halfHeight > this.chart.height){
				this.y = this.chart.height - halfHeight;
			}

			//Decide whether to align left or right based on position on canvas
			if (this.x > this.chart.width/2){
				this.x -= this.xOffset + this.width;
			} else {
				this.x += this.xOffset;
			}


		},
		getLineHeight : function(index){
			var baseLineHeight = this.y - (this.height/2) + this.yPadding,
				afterTitleIndex = index-1;

			//If the index is zero, we're getting the title
			if (index === 0){
				return baseLineHeight + this.titleFontSize/2;
			} else{
				return baseLineHeight + ((this.fontSize*1.5*afterTitleIndex) + this.fontSize/2) + this.titleFontSize * 1.5;
			}

		},
		draw : function(){
			drawRoundedRectangle(this.ctx,this.x,this.y - this.height/2,this.width,this.height,this.cornerRadius);
			var ctx = this.ctx;
			ctx.fillStyle = this.fillColor;
			ctx.fill();
			ctx.closePath();

			ctx.textAlign = "left";
			ctx.textBaseline = "middle";
			ctx.fillStyle = this.titleTextColor;
			ctx.font = this.titleFont;

			ctx.fillText(this.title,this.x + this.xPadding, this.getLineHeight(0));

			ctx.font = this.font;
			helpers.each(this.labels,function(label,index){
				ctx.fillStyle = this.textColor;
				ctx.fillText(label,this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(index + 1));

				//A bit gnarly, but clearing this rectangle breaks when using explorercanvas (clears whole canvas)
				//ctx.clearRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);
				//Instead we'll make a white filled block to put the legendColour palette over.

				ctx.fillStyle = this.legendColorBackground;
				ctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);

				ctx.fillStyle = this.legendColors[index].fill;
				ctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);


			},this);
		}
	});

	Chart.Scale = Chart.Element.extend({
		initialize : function(){
			this.fit();
		},
		buildYLabels : function(){
			this.yLabels = [];

			var stepDecimalPlaces = getDecimalPlaces(this.stepValue);

			for (var i=0; i<=this.steps; i++){
				this.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));
			}
			this.yLabelWidth = (this.display && this.showLabels) ? longestText(this.ctx,this.font,this.yLabels) : 0;
		},
		addXLabel : function(label){
			this.xLabels.push(label);
			this.valuesCount++;
			this.fit();
		},
		removeXLabel : function(){
			this.xLabels.shift();
			this.valuesCount--;
			this.fit();
		},
		// Fitting loop to rotate x Labels and figure out what fits there, and also calculate how many Y steps to use
		fit: function(){
			// First we need the width of the yLabels, assuming the xLabels aren't rotated

			// To do that we need the base line at the top and base of the chart, assuming there is no x label rotation
			this.startPoint = (this.display) ? this.fontSize : 0;
			this.endPoint = (this.display) ? this.height - (this.fontSize * 1.5) - 5 : this.height; // -5 to pad labels

			// Apply padding settings to the start and end point.
			this.startPoint += this.padding;
			this.endPoint -= this.padding;

			// Cache the starting height, so can determine if we need to recalculate the scale yAxis
			var cachedHeight = this.endPoint - this.startPoint,
				cachedYLabelWidth;

			// Build the current yLabels so we have an idea of what size they'll be to start
			/*
			 *	This sets what is returned from calculateScaleRange as static properties of this class:
			 *
				this.steps;
				this.stepValue;
				this.min;
				this.max;
			 *
			 */
			this.calculateYRange(cachedHeight);

			// With these properties set we can now build the array of yLabels
			// and also the width of the largest yLabel
			this.buildYLabels();

			this.calculateXLabelRotation();

			while((cachedHeight > this.endPoint - this.startPoint)){
				cachedHeight = this.endPoint - this.startPoint;
				cachedYLabelWidth = this.yLabelWidth;

				this.calculateYRange(cachedHeight);
				this.buildYLabels();

				// Only go through the xLabel loop again if the yLabel width has changed
				if (cachedYLabelWidth < this.yLabelWidth){
					this.calculateXLabelRotation();
				}
			}

		},
		calculateXLabelRotation : function(){
			//Get the width of each grid by calculating the difference
			//between x offsets between 0 and 1.

			this.ctx.font = this.font;

			var firstWidth = this.ctx.measureText(this.xLabels[0]).width,
				lastWidth = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width,
				firstRotated,
				lastRotated;


			this.xScalePaddingRight = lastWidth/2 + 3;
			this.xScalePaddingLeft = (firstWidth/2 > this.yLabelWidth + 10) ? firstWidth/2 : this.yLabelWidth + 10;

			this.xLabelRotation = 0;
			if (this.display){
				var originalLabelWidth = longestText(this.ctx,this.font,this.xLabels),
					cosRotation,
					firstRotatedWidth;
				this.xLabelWidth = originalLabelWidth;
				//Allow 3 pixels x2 padding either side for label readability
				var xGridWidth = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;

				//Max label rotate should be 90 - also act as a loop counter
				while ((this.xLabelWidth > xGridWidth && this.xLabelRotation === 0) || (this.xLabelWidth > xGridWidth && this.xLabelRotation <= 90 && this.xLabelRotation > 0)){
					cosRotation = Math.cos(toRadians(this.xLabelRotation));

					firstRotated = cosRotation * firstWidth;
					lastRotated = cosRotation * lastWidth;

					// We're right aligning the text now.
					if (firstRotated + this.fontSize / 2 > this.yLabelWidth + 8){
						this.xScalePaddingLeft = firstRotated + this.fontSize / 2;
					}
					this.xScalePaddingRight = this.fontSize/2;


					this.xLabelRotation++;
					this.xLabelWidth = cosRotation * originalLabelWidth;

				}
				if (this.xLabelRotation > 0){
					this.endPoint -= Math.sin(toRadians(this.xLabelRotation))*originalLabelWidth + 3;
				}
			}
			else{
				this.xLabelWidth = 0;
				this.xScalePaddingRight = this.padding;
				this.xScalePaddingLeft = this.padding;
			}

		},
		// Needs to be overidden in each Chart type
		// Otherwise we need to pass all the data into the scale class
		calculateYRange: noop,
		drawingArea: function(){
			return this.startPoint - this.endPoint;
		},
		calculateY : function(value){
			var scalingFactor = this.drawingArea() / (this.min - this.max);
			return this.endPoint - (scalingFactor * (value - this.min));
		},
		calculateX : function(index){
			var isRotated = (this.xLabelRotation > 0),
				// innerWidth = (this.offsetGridLines) ? this.width - offsetLeft - this.padding : this.width - (offsetLeft + halfLabelWidth * 2) - this.padding,
				innerWidth = this.width - (this.xScalePaddingLeft + this.xScalePaddingRight),
				valueWidth = innerWidth/(this.valuesCount - ((this.offsetGridLines) ? 0 : 1)),
				valueOffset = (valueWidth * index) + this.xScalePaddingLeft;

			if (this.offsetGridLines){
				valueOffset += (valueWidth/2);
			}

			return Math.round(valueOffset);
		},
		update : function(newProps){
			helpers.extend(this, newProps);
			this.fit();
		},
		draw : function(){
			var ctx = this.ctx,
				yLabelGap = (this.endPoint - this.startPoint) / this.steps,
				xStart = Math.round(this.xScalePaddingLeft);
			if (this.display){
				ctx.fillStyle = this.textColor;
				ctx.font = this.font;
				each(this.yLabels,function(labelString,index){
					var yLabelCenter = this.endPoint - (yLabelGap * index),
						linePositionY = Math.round(yLabelCenter);

					ctx.textAlign = "right";
					ctx.textBaseline = "middle";
					if (this.showLabels){
						ctx.fillText(labelString,xStart - 10,yLabelCenter);
					}
					ctx.beginPath();
					if (index > 0){
						// This is a grid line in the centre, so drop that
						ctx.lineWidth = this.gridLineWidth;
						ctx.strokeStyle = this.gridLineColor;
					} else {
						// This is the first line on the scale
						ctx.lineWidth = this.lineWidth;
						ctx.strokeStyle = this.lineColor;
					}

					linePositionY += helpers.aliasPixel(ctx.lineWidth);

					ctx.moveTo(xStart, linePositionY);
					ctx.lineTo(this.width, linePositionY);
					ctx.stroke();
					ctx.closePath();

					ctx.lineWidth = this.lineWidth;
					ctx.strokeStyle = this.lineColor;
					ctx.beginPath();
					ctx.moveTo(xStart - 5, linePositionY);
					ctx.lineTo(xStart, linePositionY);
					ctx.stroke();
					ctx.closePath();

				},this);

				each(this.xLabels,function(label,index){
					var xPos = this.calculateX(index) + aliasPixel(this.lineWidth),
						// Check to see if line/bar here and decide where to place the line
						linePos = this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) + aliasPixel(this.lineWidth),
						isRotated = (this.xLabelRotation > 0);

					ctx.beginPath();

					if (index > 0){
						// This is a grid line in the centre, so drop that
						ctx.lineWidth = this.gridLineWidth;
						ctx.strokeStyle = this.gridLineColor;
					} else {
						// This is the first line on the scale
						ctx.lineWidth = this.lineWidth;
						ctx.strokeStyle = this.lineColor;
					}
					ctx.moveTo(linePos,this.endPoint);
					ctx.lineTo(linePos,this.startPoint - 3);
					ctx.stroke();
					ctx.closePath();


					ctx.lineWidth = this.lineWidth;
					ctx.strokeStyle = this.lineColor;


					// Small lines at the bottom of the base grid line
					ctx.beginPath();
					ctx.moveTo(linePos,this.endPoint);
					ctx.lineTo(linePos,this.endPoint + 5);
					ctx.stroke();
					ctx.closePath();

					ctx.save();
					ctx.translate(xPos,(isRotated) ? this.endPoint + 12 : this.endPoint + 8);
					ctx.rotate(toRadians(this.xLabelRotation)*-1);
					ctx.font = this.font;
					ctx.textAlign = (isRotated) ? "right" : "center";
					ctx.textBaseline = (isRotated) ? "middle" : "top";
					ctx.fillText(label, 0, 0);
					ctx.restore();
				},this);

			}
		}

	});

	Chart.RadialScale = Chart.Element.extend({
		initialize: function(){
			this.size = min([this.height, this.width]);
			this.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);
		},
		calculateCenterOffset: function(value){
			// Take into account half font size + the yPadding of the top value
			var scalingFactor = this.drawingArea / (this.max - this.min);

			return (value - this.min) * scalingFactor;
		},
		update : function(){
			if (!this.lineArc){
				this.setScaleSize();
			} else {
				this.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);
			}
			this.buildYLabels();
		},
		buildYLabels: function(){
			this.yLabels = [];

			var stepDecimalPlaces = getDecimalPlaces(this.stepValue);

			for (var i=0; i<=this.steps; i++){
				this.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));
			}
		},
		getCircumference : function(){
			return ((Math.PI*2) / this.valuesCount);
		},
		setScaleSize: function(){
			/*
			 * Right, this is really confusing and there is a lot of maths going on here
			 * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
			 *
			 * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
			 *
			 * Solution:
			 *
			 * We assume the radius of the polygon is half the size of the canvas at first
			 * at each index we check if the text overlaps.
			 *
			 * Where it does, we store that angle and that index.
			 *
			 * After finding the largest index and angle we calculate how much we need to remove
			 * from the shape radius to move the point inwards by that x.
			 *
			 * We average the left and right distances to get the maximum shape radius that can fit in the box
			 * along with labels.
			 *
			 * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
			 * on each side, removing that from the size, halving it and adding the left x protrusion width.
			 *
			 * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
			 * and position it in the most space efficient manner
			 *
			 * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
			 */


			// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
			// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
			var largestPossibleRadius = min([(this.height/2 - this.pointLabelFontSize - 5), this.width/2]),
				pointPosition,
				i,
				textWidth,
				halfTextWidth,
				furthestRight = this.width,
				furthestRightIndex,
				furthestRightAngle,
				furthestLeft = 0,
				furthestLeftIndex,
				furthestLeftAngle,
				xProtrusionLeft,
				xProtrusionRight,
				radiusReductionRight,
				radiusReductionLeft,
				maxWidthRadius;
			this.ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);
			for (i=0;i<this.valuesCount;i++){
				// 5px to space the text slightly out - similar to what we do in the draw function.
				pointPosition = this.getPointPosition(i, largestPossibleRadius);
				textWidth = this.ctx.measureText(template(this.templateString, { value: this.labels[i] })).width + 5;
				if (i === 0 || i === this.valuesCount/2){
					// If we're at index zero, or exactly the middle, we're at exactly the top/bottom
					// of the radar chart, so text will be aligned centrally, so we'll half it and compare
					// w/left and right text sizes
					halfTextWidth = textWidth/2;
					if (pointPosition.x + halfTextWidth > furthestRight) {
						furthestRight = pointPosition.x + halfTextWidth;
						furthestRightIndex = i;
					}
					if (pointPosition.x - halfTextWidth < furthestLeft) {
						furthestLeft = pointPosition.x - halfTextWidth;
						furthestLeftIndex = i;
					}
				}
				else if (i < this.valuesCount/2) {
					// Less than half the values means we'll left align the text
					if (pointPosition.x + textWidth > furthestRight) {
						furthestRight = pointPosition.x + textWidth;
						furthestRightIndex = i;
					}
				}
				else if (i > this.valuesCount/2){
					// More than half the values means we'll right align the text
					if (pointPosition.x - textWidth < furthestLeft) {
						furthestLeft = pointPosition.x - textWidth;
						furthestLeftIndex = i;
					}
				}
			}

			xProtrusionLeft = furthestLeft;

			xProtrusionRight = Math.ceil(furthestRight - this.width);

			furthestRightAngle = this.getIndexAngle(furthestRightIndex);

			furthestLeftAngle = this.getIndexAngle(furthestLeftIndex);

			radiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI/2);

			radiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI/2);

			// Ensure we actually need to reduce the size of the chart
			radiusReductionRight = (isNumber(radiusReductionRight)) ? radiusReductionRight : 0;
			radiusReductionLeft = (isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;

			this.drawingArea = largestPossibleRadius - (radiusReductionLeft + radiusReductionRight)/2;

			//this.drawingArea = min([maxWidthRadius, (this.height - (2 * (this.pointLabelFontSize + 5)))/2])
			this.setCenterPoint(radiusReductionLeft, radiusReductionRight);

		},
		setCenterPoint: function(leftMovement, rightMovement){

			var maxRight = this.width - rightMovement - this.drawingArea,
				maxLeft = leftMovement + this.drawingArea;

			this.xCenter = (maxLeft + maxRight)/2;
			// Always vertically in the centre as the text height doesn't change
			this.yCenter = (this.height/2);
		},

		getIndexAngle : function(index){
			var angleMultiplier = (Math.PI * 2) / this.valuesCount;
			// Start from the top instead of right, so remove a quarter of the circle

			return index * angleMultiplier - (Math.PI/2);
		},
		getPointPosition : function(index, distanceFromCenter){
			var thisAngle = this.getIndexAngle(index);
			return {
				x : (Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,
				y : (Math.sin(thisAngle) * distanceFromCenter) + this.yCenter
			};
		},
		draw: function(){
			if (this.display){
				var ctx = this.ctx;
				each(this.yLabels, function(label, index){
					// Don't draw a centre value
					if (index > 0){
						var yCenterOffset = index * (this.drawingArea/this.steps),
							yHeight = this.yCenter - yCenterOffset,
							pointPosition;

						// Draw circular lines around the scale
						if (this.lineWidth > 0){
							ctx.strokeStyle = this.lineColor;
							ctx.lineWidth = this.lineWidth;

							if(this.lineArc){
								ctx.beginPath();
								ctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI*2);
								ctx.closePath();
								ctx.stroke();
							} else{
								ctx.beginPath();
								for (var i=0;i<this.valuesCount;i++)
								{
									pointPosition = this.getPointPosition(i, this.calculateCenterOffset(this.min + (index * this.stepValue)));
									if (i === 0){
										ctx.moveTo(pointPosition.x, pointPosition.y);
									} else {
										ctx.lineTo(pointPosition.x, pointPosition.y);
									}
								}
								ctx.closePath();
								ctx.stroke();
							}
						}
						if(this.showLabels){
							ctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);
							if (this.showLabelBackdrop){
								var labelWidth = ctx.measureText(label).width;
								ctx.fillStyle = this.backdropColor;
								ctx.fillRect(
									this.xCenter - labelWidth/2 - this.backdropPaddingX,
									yHeight - this.fontSize/2 - this.backdropPaddingY,
									labelWidth + this.backdropPaddingX*2,
									this.fontSize + this.backdropPaddingY*2
								);
							}
							ctx.textAlign = 'center';
							ctx.textBaseline = "middle";
							ctx.fillStyle = this.fontColor;
							ctx.fillText(label, this.xCenter, yHeight);
						}
					}
				}, this);

				if (!this.lineArc){
					ctx.lineWidth = this.angleLineWidth;
					ctx.strokeStyle = this.angleLineColor;
					for (var i = this.valuesCount - 1; i >= 0; i--) {
						if (this.angleLineWidth > 0){
							var outerPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max));
							ctx.beginPath();
							ctx.moveTo(this.xCenter, this.yCenter);
							ctx.lineTo(outerPosition.x, outerPosition.y);
							ctx.stroke();
							ctx.closePath();
						}
						// Extra 3px out for some label spacing
						var pointLabelPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);
						ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);
						ctx.fillStyle = this.pointLabelFontColor;

						var labelsCount = this.labels.length,
							halfLabelsCount = this.labels.length/2,
							quarterLabelsCount = halfLabelsCount/2,
							upperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),
							exactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);
						if (i === 0){
							ctx.textAlign = 'center';
						} else if(i === halfLabelsCount){
							ctx.textAlign = 'center';
						} else if (i < halfLabelsCount){
							ctx.textAlign = 'left';
						} else {
							ctx.textAlign = 'right';
						}

						// Set the correct text baseline based on outer positioning
						if (exactQuarter){
							ctx.textBaseline = 'middle';
						} else if (upperHalf){
							ctx.textBaseline = 'bottom';
						} else {
							ctx.textBaseline = 'top';
						}

						ctx.fillText(this.labels[i], pointLabelPosition.x, pointLabelPosition.y);
					}
				}
			}
		}
	});

	// Attach global event to resize each chart instance when the browser resizes
	helpers.addEvent(window, "resize", (function(){
		// Basic debounce of resize function so it doesn't hurt performance when resizing browser.
		var timeout;
		return function(){
			clearTimeout(timeout);
			timeout = setTimeout(function(){
				each(Chart.instances,function(instance){
					// If the responsive flag is set in the chart instance config
					// Cascade the resize event down to the chart.
					if (instance.options.responsive){
						instance.resize(instance.render, true);
					}
				});
			}, 50);
		};
	})());


	if (amd) {
		define(function(){
			return Chart;
		});
	} else if (typeof module === 'object' && module.exports) {
		module.exports = Chart;
	}

	root.Chart = Chart;

	Chart.noConflict = function(){
		root.Chart = previous;
		return Chart;
	};

}).call(this);

(function(){
	"use strict";

	var root = this,
		Chart = root.Chart,
		helpers = Chart.helpers;


	var defaultConfig = {
		//Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
		scaleBeginAtZero : true,

		//Boolean - Whether grid lines are shown across the chart
		scaleShowGridLines : true,

		//String - Colour of the grid lines
		scaleGridLineColor : "rgba(0,0,0,.05)",

		//Number - Width of the grid lines
		scaleGridLineWidth : 1,

		//Boolean - If there is a stroke on each bar
		barShowStroke : true,

		//Number - Pixel width of the bar stroke
		barStrokeWidth : 2,

		//Number - Spacing between each of the X value sets
		barValueSpacing : 5,

		//Number - Spacing between data sets within X values
		barDatasetSpacing : 1,

		//String - A legend template
		legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

	};


	Chart.Type.extend({
		name: "Bar",
		defaults : defaultConfig,
		initialize:  function(data){

			//Expose options as a scope variable here so we can access it in the ScaleClass
			var options = this.options;

			this.ScaleClass = Chart.Scale.extend({
				offsetGridLines : true,
				calculateBarX : function(datasetCount, datasetIndex, barIndex){
					//Reusable method for calculating the xPosition of a given bar based on datasetIndex & width of the bar
					var xWidth = this.calculateBaseWidth(),
						xAbsolute = this.calculateX(barIndex) - (xWidth/2),
						barWidth = this.calculateBarWidth(datasetCount);

					return xAbsolute + (barWidth * datasetIndex) + (datasetIndex * options.barDatasetSpacing) + barWidth/2;
				},
				calculateBaseWidth : function(){
					return (this.calculateX(1) - this.calculateX(0)) - (2*options.barValueSpacing);
				},
				calculateBarWidth : function(datasetCount){
					//The padding between datasets is to the right of each bar, providing that there are more than 1 dataset
					var baseWidth = this.calculateBaseWidth() - ((datasetCount - 1) * options.barDatasetSpacing);

					return (baseWidth / datasetCount);
				}
			});

			this.datasets = [];

			//Set up tooltip events on the chart
			if (this.options.showTooltips){
				helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
					var activeBars = (evt.type !== 'mouseout') ? this.getBarsAtEvent(evt) : [];

					this.eachBars(function(bar){
						bar.restore(['fillColor', 'strokeColor']);
					});
					helpers.each(activeBars, function(activeBar){
						activeBar.fillColor = activeBar.highlightFill;
						activeBar.strokeColor = activeBar.highlightStroke;
					});
					this.showTooltip(activeBars);
				});
			}

			//Declare the extension of the default point, to cater for the options passed in to the constructor
			this.BarClass = Chart.Rectangle.extend({
				strokeWidth : this.options.barStrokeWidth,
				showStroke : this.options.barShowStroke,
				ctx : this.chart.ctx
			});

			//Iterate through each of the datasets, and build this into a property of the chart
			helpers.each(data.datasets,function(dataset,datasetIndex){

				var datasetObject = {
					label : dataset.label || null,
					fillColor : dataset.fillColor,
					strokeColor : dataset.strokeColor,
					bars : []
				};

				this.datasets.push(datasetObject);

				helpers.each(dataset.data,function(dataPoint,index){
					//Add a new point for each piece of data, passing any required data to draw.
					datasetObject.bars.push(new this.BarClass({
						value : dataPoint,
						label : data.labels[index],
						datasetLabel: dataset.label,
						strokeColor : dataset.strokeColor,
						fillColor : dataset.fillColor,
						highlightFill : dataset.highlightFill || dataset.fillColor,
						highlightStroke : dataset.highlightStroke || dataset.strokeColor
					}));
				},this);

			},this);

			this.buildScale(data.labels);

			this.BarClass.prototype.base = this.scale.endPoint;

			this.eachBars(function(bar, index, datasetIndex){
				helpers.extend(bar, {
					width : this.scale.calculateBarWidth(this.datasets.length),
					x: this.scale.calculateBarX(this.datasets.length, datasetIndex, index),
					y: this.scale.endPoint
				});
				bar.save();
			}, this);

			this.render();
		},
		update : function(){
			this.scale.update();
			// Reset any highlight colours before updating.
			helpers.each(this.activeElements, function(activeElement){
				activeElement.restore(['fillColor', 'strokeColor']);
			});

			this.eachBars(function(bar){
				bar.save();
			});
			this.render();
		},
		eachBars : function(callback){
			helpers.each(this.datasets,function(dataset, datasetIndex){
				helpers.each(dataset.bars, callback, this, datasetIndex);
			},this);
		},
		getBarsAtEvent : function(e){
			var barsArray = [],
				eventPosition = helpers.getRelativePosition(e),
				datasetIterator = function(dataset){
					barsArray.push(dataset.bars[barIndex]);
				},
				barIndex;

			for (var datasetIndex = 0; datasetIndex < this.datasets.length; datasetIndex++) {
				for (barIndex = 0; barIndex < this.datasets[datasetIndex].bars.length; barIndex++) {
					if (this.datasets[datasetIndex].bars[barIndex].inRange(eventPosition.x,eventPosition.y)){
						helpers.each(this.datasets, datasetIterator);
						return barsArray;
					}
				}
			}

			return barsArray;
		},
		buildScale : function(labels){
			var self = this;

			var dataTotal = function(){
				var values = [];
				self.eachBars(function(bar){
					values.push(bar.value);
				});
				return values;
			};

			var scaleOptions = {
				templateString : this.options.scaleLabel,
				height : this.chart.height,
				width : this.chart.width,
				ctx : this.chart.ctx,
				textColor : this.options.scaleFontColor,
				fontSize : this.options.scaleFontSize,
				fontStyle : this.options.scaleFontStyle,
				fontFamily : this.options.scaleFontFamily,
				valuesCount : labels.length,
				beginAtZero : this.options.scaleBeginAtZero,
				integersOnly : this.options.scaleIntegersOnly,
				calculateYRange: function(currentHeight){
					var updatedRanges = helpers.calculateScaleRange(
						dataTotal(),
						currentHeight,
						this.fontSize,
						this.beginAtZero,
						this.integersOnly
					);
					helpers.extend(this, updatedRanges);
				},
				xLabels : labels,
				font : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),
				lineWidth : this.options.scaleLineWidth,
				lineColor : this.options.scaleLineColor,
				gridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,
				gridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : "rgba(0,0,0,0)",
				padding : (this.options.showScale) ? 0 : (this.options.barShowStroke) ? this.options.barStrokeWidth : 0,
				showLabels : this.options.scaleShowLabels,
				display : this.options.showScale
			};

			if (this.options.scaleOverride){
				helpers.extend(scaleOptions, {
					calculateYRange: helpers.noop,
					steps: this.options.scaleSteps,
					stepValue: this.options.scaleStepWidth,
					min: this.options.scaleStartValue,
					max: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)
				});
			}

			this.scale = new this.ScaleClass(scaleOptions);
		},
		addData : function(valuesArray,label){
			//Map the values array for each of the datasets
			helpers.each(valuesArray,function(value,datasetIndex){
				//Add a new point for each piece of data, passing any required data to draw.
				this.datasets[datasetIndex].bars.push(new this.BarClass({
					value : value,
					label : label,
					x: this.scale.calculateBarX(this.datasets.length, datasetIndex, this.scale.valuesCount+1),
					y: this.scale.endPoint,
					width : this.scale.calculateBarWidth(this.datasets.length),
					base : this.scale.endPoint,
					strokeColor : this.datasets[datasetIndex].strokeColor,
					fillColor : this.datasets[datasetIndex].fillColor
				}));
			},this);

			this.scale.addXLabel(label);
			//Then re-render the chart.
			this.update();
		},
		removeData : function(){
			this.scale.removeXLabel();
			//Then re-render the chart.
			helpers.each(this.datasets,function(dataset){
				dataset.bars.shift();
			},this);
			this.update();
		},
		reflow : function(){
			helpers.extend(this.BarClass.prototype,{
				y: this.scale.endPoint,
				base : this.scale.endPoint
			});
			var newScaleProps = helpers.extend({
				height : this.chart.height,
				width : this.chart.width
			});
			this.scale.update(newScaleProps);
		},
		draw : function(ease){
			var easingDecimal = ease || 1;
			this.clear();

			var ctx = this.chart.ctx;

			this.scale.draw(easingDecimal);

			//Draw all the bars for each dataset
			helpers.each(this.datasets,function(dataset,datasetIndex){
				helpers.each(dataset.bars,function(bar,index){
					if (bar.hasValue()){
						bar.base = this.scale.endPoint;
						//Transition then draw
						bar.transition({
							x : this.scale.calculateBarX(this.datasets.length, datasetIndex, index),
							y : this.scale.calculateY(bar.value),
							width : this.scale.calculateBarWidth(this.datasets.length)
						}, easingDecimal).draw();
					}
				},this);

			},this);
		}
	});


}).call(this);
(function(){
	"use strict";

	var root = this,
		Chart = root.Chart,
		//Cache a local reference to Chart.helpers
		helpers = Chart.helpers;

	var defaultConfig = {
		//Boolean - Whether we should show a stroke on each segment
		segmentShowStroke : true,

		//String - The colour of each segment stroke
		segmentStrokeColor : "#fff",

		//Number - The width of each segment stroke
		segmentStrokeWidth : 2,

		//The percentage of the chart that we cut out of the middle.
		percentageInnerCutout : 50,

		//Number - Amount of animation steps
		animationSteps : 100,

		//String - Animation easing effect
		animationEasing : "easeOutBounce",

		//Boolean - Whether we animate the rotation of the Doughnut
		animateRotate : true,

		//Boolean - Whether we animate scaling the Doughnut from the centre
		animateScale : false,

		//String - A legend template
		legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"

	};


	Chart.Type.extend({
		//Passing in a name registers this chart in the Chart namespace
		name: "Doughnut",
		//Providing a defaults will also register the deafults in the chart namespace
		defaults : defaultConfig,
		//Initialize is fired when the chart is initialized - Data is passed in as a parameter
		//Config is automatically merged by the core of Chart.js, and is available at this.options
		initialize:  function(data){

			//Declare segments as a static property to prevent inheriting across the Chart type prototype
			this.segments = [];
			this.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -	this.options.segmentStrokeWidth/2)/2;

			this.SegmentArc = Chart.Arc.extend({
				ctx : this.chart.ctx,
				x : this.chart.width/2,
				y : this.chart.height/2
			});

			//Set up tooltip events on the chart
			if (this.options.showTooltips){
				helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
					var activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];

					helpers.each(this.segments,function(segment){
						segment.restore(["fillColor"]);
					});
					helpers.each(activeSegments,function(activeSegment){
						activeSegment.fillColor = activeSegment.highlightColor;
					});
					this.showTooltip(activeSegments);
				});
			}
			this.calculateTotal(data);

			helpers.each(data,function(datapoint, index){
				this.addData(datapoint, index, true);
			},this);

			this.render();
		},
		getSegmentsAtEvent : function(e){
			var segmentsArray = [];

			var location = helpers.getRelativePosition(e);

			helpers.each(this.segments,function(segment){
				if (segment.inRange(location.x,location.y)) segmentsArray.push(segment);
			},this);
			return segmentsArray;
		},
		addData : function(segment, atIndex, silent){
			var index = atIndex || this.segments.length;
			this.segments.splice(index, 0, new this.SegmentArc({
				value : segment.value,
				outerRadius : (this.options.animateScale) ? 0 : this.outerRadius,
				innerRadius : (this.options.animateScale) ? 0 : (this.outerRadius/100) * this.options.percentageInnerCutout,
				fillColor : segment.color,
				highlightColor : segment.highlight || segment.color,
				showStroke : this.options.segmentShowStroke,
				strokeWidth : this.options.segmentStrokeWidth,
				strokeColor : this.options.segmentStrokeColor,
				startAngle : Math.PI * 1.5,
				circumference : (this.options.animateRotate) ? 0 : this.calculateCircumference(segment.value),
				label : segment.label
			}));
			if (!silent){
				this.reflow();
				this.update();
			}
		},
		calculateCircumference : function(value){
			return (Math.PI*2)*(value / this.total);
		},
		calculateTotal : function(data){
			this.total = 0;
			helpers.each(data,function(segment){
				this.total += segment.value;
			},this);
		},
		update : function(){
			this.calculateTotal(this.segments);

			// Reset any highlight colours before updating.
			helpers.each(this.activeElements, function(activeElement){
				activeElement.restore(['fillColor']);
			});

			helpers.each(this.segments,function(segment){
				segment.save();
			});
			this.render();
		},

		removeData: function(atIndex){
			var indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;
			this.segments.splice(indexToDelete, 1);
			this.reflow();
			this.update();
		},

		reflow : function(){
			helpers.extend(this.SegmentArc.prototype,{
				x : this.chart.width/2,
				y : this.chart.height/2
			});
			this.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -	this.options.segmentStrokeWidth/2)/2;
			helpers.each(this.segments, function(segment){
				segment.update({
					outerRadius : this.outerRadius,
					innerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout
				});
			}, this);
		},
		draw : function(easeDecimal){
			var animDecimal = (easeDecimal) ? easeDecimal : 1;
			this.clear();
			helpers.each(this.segments,function(segment,index){
				segment.transition({
					circumference : this.calculateCircumference(segment.value),
					outerRadius : this.outerRadius,
					innerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout
				},animDecimal);

				segment.endAngle = segment.startAngle + segment.circumference;

				segment.draw();
				if (index === 0){
					segment.startAngle = Math.PI * 1.5;
				}
				//Check to see if it's the last segment, if not get the next and update the start angle
				if (index < this.segments.length-1){
					this.segments[index+1].startAngle = segment.endAngle;
				}
			},this);

		}
	});

	Chart.types.Doughnut.extend({
		name : "Pie",
		defaults : helpers.merge(defaultConfig,{percentageInnerCutout : 0})
	});

}).call(this);
(function(){
	"use strict";

	var root = this,
		Chart = root.Chart,
		helpers = Chart.helpers;

	var defaultConfig = {

		///Boolean - Whether grid lines are shown across the chart
		scaleShowGridLines : true,

		//String - Colour of the grid lines
		scaleGridLineColor : "rgba(0,0,0,.05)",

		//Number - Width of the grid lines
		scaleGridLineWidth : 1,

		//Boolean - Whether the line is curved between points
		bezierCurve : true,

		//Number - Tension of the bezier curve between points
		bezierCurveTension : 0.4,

		//Boolean - Whether to show a dot for each point
		pointDot : true,

		//Number - Radius of each point dot in pixels
		pointDotRadius : 4,

		//Number - Pixel width of point dot stroke
		pointDotStrokeWidth : 1,

		//Number - amount extra to add to the radius to cater for hit detection outside the drawn point
		pointHitDetectionRadius : 20,

		//Boolean - Whether to show a stroke for datasets
		datasetStroke : true,

		//Number - Pixel width of dataset stroke
		datasetStrokeWidth : 2,

		//Boolean - Whether to fill the dataset with a colour
		datasetFill : true,

		//String - A legend template
		legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

	};


	Chart.Type.extend({
		name: "Line",
		defaults : defaultConfig,
		initialize:  function(data){
			//Declare the extension of the default point, to cater for the options passed in to the constructor
			this.PointClass = Chart.Point.extend({
				strokeWidth : this.options.pointDotStrokeWidth,
				radius : this.options.pointDotRadius,
				display: this.options.pointDot,
				hitDetectionRadius : this.options.pointHitDetectionRadius,
				ctx : this.chart.ctx,
				inRange : function(mouseX){
					return (Math.pow(mouseX-this.x, 2) < Math.pow(this.radius + this.hitDetectionRadius,2));
				}
			});

			this.datasets = [];

			//Set up tooltip events on the chart
			if (this.options.showTooltips){
				helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
					var activePoints = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];
					this.eachPoints(function(point){
						point.restore(['fillColor', 'strokeColor']);
					});
					helpers.each(activePoints, function(activePoint){
						activePoint.fillColor = activePoint.highlightFill;
						activePoint.strokeColor = activePoint.highlightStroke;
					});
					this.showTooltip(activePoints);
				});
			}

			//Iterate through each of the datasets, and build this into a property of the chart
			helpers.each(data.datasets,function(dataset){

				var datasetObject = {
					label : dataset.label || null,
					fillColor : dataset.fillColor,
					strokeColor : dataset.strokeColor,
					pointColor : dataset.pointColor,
					pointStrokeColor : dataset.pointStrokeColor,
					points : []
				};

				this.datasets.push(datasetObject);


				helpers.each(dataset.data,function(dataPoint,index){
					//Add a new point for each piece of data, passing any required data to draw.
					datasetObject.points.push(new this.PointClass({
						value : dataPoint,
						label : data.labels[index],
						datasetLabel: dataset.label,
						strokeColor : dataset.pointStrokeColor,
						fillColor : dataset.pointColor,
						highlightFill : dataset.pointHighlightFill || dataset.pointColor,
						highlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor
					}));
				},this);

				this.buildScale(data.labels);


				this.eachPoints(function(point, index){
					helpers.extend(point, {
						x: this.scale.calculateX(index),
						y: this.scale.endPoint
					});
					point.save();
				}, this);

			},this);


			this.render();
		},
		update : function(){
			this.scale.update();
			// Reset any highlight colours before updating.
			helpers.each(this.activeElements, function(activeElement){
				activeElement.restore(['fillColor', 'strokeColor']);
			});
			this.eachPoints(function(point){
				point.save();
			});
			this.render();
		},
		eachPoints : function(callback){
			helpers.each(this.datasets,function(dataset){
				helpers.each(dataset.points,callback,this);
			},this);
		},
		getPointsAtEvent : function(e){
			var pointsArray = [],
				eventPosition = helpers.getRelativePosition(e);
			helpers.each(this.datasets,function(dataset){
				helpers.each(dataset.points,function(point){
					if (point.inRange(eventPosition.x,eventPosition.y)) pointsArray.push(point);
				});
			},this);
			return pointsArray;
		},
		buildScale : function(labels){
			var self = this;

			var dataTotal = function(){
				var values = [];
				self.eachPoints(function(point){
					values.push(point.value);
				});

				return values;
			};

			var scaleOptions = {
				templateString : this.options.scaleLabel,
				height : this.chart.height,
				width : this.chart.width,
				ctx : this.chart.ctx,
				textColor : this.options.scaleFontColor,
				fontSize : this.options.scaleFontSize,
				fontStyle : this.options.scaleFontStyle,
				fontFamily : this.options.scaleFontFamily,
				valuesCount : labels.length,
				beginAtZero : this.options.scaleBeginAtZero,
				integersOnly : this.options.scaleIntegersOnly,
				calculateYRange : function(currentHeight){
					var updatedRanges = helpers.calculateScaleRange(
						dataTotal(),
						currentHeight,
						this.fontSize,
						this.beginAtZero,
						this.integersOnly
					);
					helpers.extend(this, updatedRanges);
				},
				xLabels : labels,
				font : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),
				lineWidth : this.options.scaleLineWidth,
				lineColor : this.options.scaleLineColor,
				gridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,
				gridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : "rgba(0,0,0,0)",
				padding: (this.options.showScale) ? 0 : this.options.pointDotRadius + this.options.pointDotStrokeWidth,
				showLabels : this.options.scaleShowLabels,
				display : this.options.showScale
			};

			if (this.options.scaleOverride){
				helpers.extend(scaleOptions, {
					calculateYRange: helpers.noop,
					steps: this.options.scaleSteps,
					stepValue: this.options.scaleStepWidth,
					min: this.options.scaleStartValue,
					max: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)
				});
			}


			this.scale = new Chart.Scale(scaleOptions);
		},
		addData : function(valuesArray,label){
			//Map the values array for each of the datasets

			helpers.each(valuesArray,function(value,datasetIndex){
				//Add a new point for each piece of data, passing any required data to draw.
				this.datasets[datasetIndex].points.push(new this.PointClass({
					value : value,
					label : label,
					x: this.scale.calculateX(this.scale.valuesCount+1),
					y: this.scale.endPoint,
					strokeColor : this.datasets[datasetIndex].pointStrokeColor,
					fillColor : this.datasets[datasetIndex].pointColor
				}));
			},this);

			this.scale.addXLabel(label);
			//Then re-render the chart.
			this.update();
		},
		removeData : function(){
			this.scale.removeXLabel();
			//Then re-render the chart.
			helpers.each(this.datasets,function(dataset){
				dataset.points.shift();
			},this);
			this.update();
		},
		reflow : function(){
			var newScaleProps = helpers.extend({
				height : this.chart.height,
				width : this.chart.width
			});
			this.scale.update(newScaleProps);
		},
		draw : function(ease){
			var easingDecimal = ease || 1;
			this.clear();

			var ctx = this.chart.ctx;

			// Some helper methods for getting the next/prev points
			var hasValue = function(item){
				return item.value !== null;
			},
			nextPoint = function(point, collection, index){
				return helpers.findNextWhere(collection, hasValue, index) || point;
			},
			previousPoint = function(point, collection, index){
				return helpers.findPreviousWhere(collection, hasValue, index) || point;
			};

			this.scale.draw(easingDecimal);


			helpers.each(this.datasets,function(dataset){
				var pointsWithValues = helpers.where(dataset.points, hasValue);

				//Transition each point first so that the line and point drawing isn't out of sync
				//We can use this extra loop to calculate the control points of this dataset also in this loop

				helpers.each(dataset.points, function(point, index){
					if (point.hasValue()){
						point.transition({
							y : this.scale.calculateY(point.value),
							x : this.scale.calculateX(index)
						}, easingDecimal);
					}
				},this);


				// Control points need to be calculated in a seperate loop, because we need to know the current x/y of the point
				// This would cause issues when there is no animation, because the y of the next point would be 0, so beziers would be skewed
				if (this.options.bezierCurve){
					helpers.each(pointsWithValues, function(point, index){
						var tension = (index > 0 && index < pointsWithValues.length - 1) ? this.options.bezierCurveTension : 0;
						point.controlPoints = helpers.splineCurve(
							previousPoint(point, pointsWithValues, index),
							point,
							nextPoint(point, pointsWithValues, index),
							tension
						);

						// Prevent the bezier going outside of the bounds of the graph

						// Cap puter bezier handles to the upper/lower scale bounds
						if (point.controlPoints.outer.y > this.scale.endPoint){
							point.controlPoints.outer.y = this.scale.endPoint;
						}
						else if (point.controlPoints.outer.y < this.scale.startPoint){
							point.controlPoints.outer.y = this.scale.startPoint;
						}

						// Cap inner bezier handles to the upper/lower scale bounds
						if (point.controlPoints.inner.y > this.scale.endPoint){
							point.controlPoints.inner.y = this.scale.endPoint;
						}
						else if (point.controlPoints.inner.y < this.scale.startPoint){
							point.controlPoints.inner.y = this.scale.startPoint;
						}
					},this);
				}


				//Draw the line between all the points
				ctx.lineWidth = this.options.datasetStrokeWidth;
				ctx.strokeStyle = dataset.strokeColor;
				ctx.beginPath();

				helpers.each(pointsWithValues, function(point, index){
					if (index === 0){
						ctx.moveTo(point.x, point.y);
					}
					else{
						if(this.options.bezierCurve){
							var previous = previousPoint(point, pointsWithValues, index);

							ctx.bezierCurveTo(
								previous.controlPoints.outer.x,
								previous.controlPoints.outer.y,
								point.controlPoints.inner.x,
								point.controlPoints.inner.y,
								point.x,
								point.y
							);
						}
						else{
							ctx.lineTo(point.x,point.y);
						}
					}
				}, this);

				ctx.stroke();

				if (this.options.datasetFill && pointsWithValues.length > 0){
					//Round off the line by going to the base of the chart, back to the start, then fill.
					ctx.lineTo(pointsWithValues[pointsWithValues.length - 1].x, this.scale.endPoint);
					ctx.lineTo(pointsWithValues[0].x, this.scale.endPoint);
					ctx.fillStyle = dataset.fillColor;
					ctx.closePath();
					ctx.fill();
				}

				//Now draw the points over the line
				//A little inefficient double looping, but better than the line
				//lagging behind the point positions
				helpers.each(pointsWithValues,function(point){
					point.draw();
				});
			},this);
		}
	});


}).call(this);
(function(){
	"use strict";

	var root = this,
		Chart = root.Chart,
		//Cache a local reference to Chart.helpers
		helpers = Chart.helpers;

	var defaultConfig = {
		//Boolean - Show a backdrop to the scale label
		scaleShowLabelBackdrop : true,

		//String - The colour of the label backdrop
		scaleBackdropColor : "rgba(255,255,255,0.75)",

		// Boolean - Whether the scale should begin at zero
		scaleBeginAtZero : true,

		//Number - The backdrop padding above & below the label in pixels
		scaleBackdropPaddingY : 2,

		//Number - The backdrop padding to the side of the label in pixels
		scaleBackdropPaddingX : 2,

		//Boolean - Show line for each value in the scale
		scaleShowLine : true,

		//Boolean - Stroke a line around each segment in the chart
		segmentShowStroke : true,

		//String - The colour of the stroke on each segement.
		segmentStrokeColor : "#fff",

		//Number - The width of the stroke value in pixels
		segmentStrokeWidth : 2,

		//Number - Amount of animation steps
		animationSteps : 100,

		//String - Animation easing effect.
		animationEasing : "easeOutBounce",

		//Boolean - Whether to animate the rotation of the chart
		animateRotate : true,

		//Boolean - Whether to animate scaling the chart from the centre
		animateScale : false,

		//String - A legend template
		legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
	};


	Chart.Type.extend({
		//Passing in a name registers this chart in the Chart namespace
		name: "PolarArea",
		//Providing a defaults will also register the deafults in the chart namespace
		defaults : defaultConfig,
		//Initialize is fired when the chart is initialized - Data is passed in as a parameter
		//Config is automatically merged by the core of Chart.js, and is available at this.options
		initialize:  function(data){
			this.segments = [];
			//Declare segment class as a chart instance specific class, so it can share props for this instance
			this.SegmentArc = Chart.Arc.extend({
				showStroke : this.options.segmentShowStroke,
				strokeWidth : this.options.segmentStrokeWidth,
				strokeColor : this.options.segmentStrokeColor,
				ctx : this.chart.ctx,
				innerRadius : 0,
				x : this.chart.width/2,
				y : this.chart.height/2
			});
			this.scale = new Chart.RadialScale({
				display: this.options.showScale,
				fontStyle: this.options.scaleFontStyle,
				fontSize: this.options.scaleFontSize,
				fontFamily: this.options.scaleFontFamily,
				fontColor: this.options.scaleFontColor,
				showLabels: this.options.scaleShowLabels,
				showLabelBackdrop: this.options.scaleShowLabelBackdrop,
				backdropColor: this.options.scaleBackdropColor,
				backdropPaddingY : this.options.scaleBackdropPaddingY,
				backdropPaddingX: this.options.scaleBackdropPaddingX,
				lineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,
				lineColor: this.options.scaleLineColor,
				lineArc: true,
				width: this.chart.width,
				height: this.chart.height,
				xCenter: this.chart.width/2,
				yCenter: this.chart.height/2,
				ctx : this.chart.ctx,
				templateString: this.options.scaleLabel,
				valuesCount: data.length
			});

			this.updateScaleRange(data);

			this.scale.update();

			helpers.each(data,function(segment,index){
				this.addData(segment,index,true);
			},this);

			//Set up tooltip events on the chart
			if (this.options.showTooltips){
				helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
					var activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];
					helpers.each(this.segments,function(segment){
						segment.restore(["fillColor"]);
					});
					helpers.each(activeSegments,function(activeSegment){
						activeSegment.fillColor = activeSegment.highlightColor;
					});
					this.showTooltip(activeSegments);
				});
			}

			this.render();
		},
		getSegmentsAtEvent : function(e){
			var segmentsArray = [];

			var location = helpers.getRelativePosition(e);

			helpers.each(this.segments,function(segment){
				if (segment.inRange(location.x,location.y)) segmentsArray.push(segment);
			},this);
			return segmentsArray;
		},
		addData : function(segment, atIndex, silent){
			var index = atIndex || this.segments.length;

			this.segments.splice(index, 0, new this.SegmentArc({
				fillColor: segment.color,
				highlightColor: segment.highlight || segment.color,
				label: segment.label,
				value: segment.value,
				outerRadius: (this.options.animateScale) ? 0 : this.scale.calculateCenterOffset(segment.value),
				circumference: (this.options.animateRotate) ? 0 : this.scale.getCircumference(),
				startAngle: Math.PI * 1.5
			}));
			if (!silent){
				this.reflow();
				this.update();
			}
		},
		removeData: function(atIndex){
			var indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;
			this.segments.splice(indexToDelete, 1);
			this.reflow();
			this.update();
		},
		calculateTotal: function(data){
			this.total = 0;
			helpers.each(data,function(segment){
				this.total += segment.value;
			},this);
			this.scale.valuesCount = this.segments.length;
		},
		updateScaleRange: function(datapoints){
			var valuesArray = [];
			helpers.each(datapoints,function(segment){
				valuesArray.push(segment.value);
			});

			var scaleSizes = (this.options.scaleOverride) ?
				{
					steps: this.options.scaleSteps,
					stepValue: this.options.scaleStepWidth,
					min: this.options.scaleStartValue,
					max: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)
				} :
				helpers.calculateScaleRange(
					valuesArray,
					helpers.min([this.chart.width, this.chart.height])/2,
					this.options.scaleFontSize,
					this.options.scaleBeginAtZero,
					this.options.scaleIntegersOnly
				);

			helpers.extend(
				this.scale,
				scaleSizes,
				{
					size: helpers.min([this.chart.width, this.chart.height]),
					xCenter: this.chart.width/2,
					yCenter: this.chart.height/2
				}
			);

		},
		update : function(){
			this.calculateTotal(this.segments);

			helpers.each(this.segments,function(segment){
				segment.save();
			});
			this.render();
		},
		reflow : function(){
			helpers.extend(this.SegmentArc.prototype,{
				x : this.chart.width/2,
				y : this.chart.height/2
			});
			this.updateScaleRange(this.segments);
			this.scale.update();

			helpers.extend(this.scale,{
				xCenter: this.chart.width/2,
				yCenter: this.chart.height/2
			});

			helpers.each(this.segments, function(segment){
				segment.update({
					outerRadius : this.scale.calculateCenterOffset(segment.value)
				});
			}, this);

		},
		draw : function(ease){
			var easingDecimal = ease || 1;
			//Clear & draw the canvas
			this.clear();
			helpers.each(this.segments,function(segment, index){
				segment.transition({
					circumference : this.scale.getCircumference(),
					outerRadius : this.scale.calculateCenterOffset(segment.value)
				},easingDecimal);

				segment.endAngle = segment.startAngle + segment.circumference;

				// If we've removed the first segment we need to set the first one to
				// start at the top.
				if (index === 0){
					segment.startAngle = Math.PI * 1.5;
				}

				//Check to see if it's the last segment, if not get the next and update the start angle
				if (index < this.segments.length - 1){
					this.segments[index+1].startAngle = segment.endAngle;
				}
				segment.draw();
			}, this);
			this.scale.draw();
		}
	});

}).call(this);
(function(){
	"use strict";

	var root = this,
		Chart = root.Chart,
		helpers = Chart.helpers;



	Chart.Type.extend({
		name: "Radar",
		defaults:{
			//Boolean - Whether to show lines for each scale point
			scaleShowLine : true,

			//Boolean - Whether we show the angle lines out of the radar
			angleShowLineOut : true,

			//Boolean - Whether to show labels on the scale
			scaleShowLabels : false,

			// Boolean - Whether the scale should begin at zero
			scaleBeginAtZero : true,

			//String - Colour of the angle line
			angleLineColor : "rgba(0,0,0,.1)",

			//Number - Pixel width of the angle line
			angleLineWidth : 1,

			//String - Point label font declaration
			pointLabelFontFamily : "'Arial'",

			//String - Point label font weight
			pointLabelFontStyle : "normal",

			//Number - Point label font size in pixels
			pointLabelFontSize : 10,

			//String - Point label font colour
			pointLabelFontColor : "#666",

			//Boolean - Whether to show a dot for each point
			pointDot : true,

			//Number - Radius of each point dot in pixels
			pointDotRadius : 3,

			//Number - Pixel width of point dot stroke
			pointDotStrokeWidth : 1,

			//Number - amount extra to add to the radius to cater for hit detection outside the drawn point
			pointHitDetectionRadius : 20,

			//Boolean - Whether to show a stroke for datasets
			datasetStroke : true,

			//Number - Pixel width of dataset stroke
			datasetStrokeWidth : 2,

			//Boolean - Whether to fill the dataset with a colour
			datasetFill : true,

			//String - A legend template
			legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

		},

		initialize: function(data){
			this.PointClass = Chart.Point.extend({
				strokeWidth : this.options.pointDotStrokeWidth,
				radius : this.options.pointDotRadius,
				display: this.options.pointDot,
				hitDetectionRadius : this.options.pointHitDetectionRadius,
				ctx : this.chart.ctx
			});

			this.datasets = [];

			this.buildScale(data);

			//Set up tooltip events on the chart
			if (this.options.showTooltips){
				helpers.bindEvents(this, this.options.tooltipEvents, function(evt){
					var activePointsCollection = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];

					this.eachPoints(function(point){
						point.restore(['fillColor', 'strokeColor']);
					});
					helpers.each(activePointsCollection, function(activePoint){
						activePoint.fillColor = activePoint.highlightFill;
						activePoint.strokeColor = activePoint.highlightStroke;
					});

					this.showTooltip(activePointsCollection);
				});
			}

			//Iterate through each of the datasets, and build this into a property of the chart
			helpers.each(data.datasets,function(dataset){

				var datasetObject = {
					label: dataset.label || null,
					fillColor : dataset.fillColor,
					strokeColor : dataset.strokeColor,
					pointColor : dataset.pointColor,
					pointStrokeColor : dataset.pointStrokeColor,
					points : []
				};

				this.datasets.push(datasetObject);

				helpers.each(dataset.data,function(dataPoint,index){
					//Add a new point for each piece of data, passing any required data to draw.
					var pointPosition;
					if (!this.scale.animation){
						pointPosition = this.scale.getPointPosition(index, this.scale.calculateCenterOffset(dataPoint));
					}
					datasetObject.points.push(new this.PointClass({
						value : dataPoint,
						label : data.labels[index],
						datasetLabel: dataset.label,
						x: (this.options.animation) ? this.scale.xCenter : pointPosition.x,
						y: (this.options.animation) ? this.scale.yCenter : pointPosition.y,
						strokeColor : dataset.pointStrokeColor,
						fillColor : dataset.pointColor,
						highlightFill : dataset.pointHighlightFill || dataset.pointColor,
						highlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor
					}));
				},this);

			},this);

			this.render();
		},
		eachPoints : function(callback){
			helpers.each(this.datasets,function(dataset){
				helpers.each(dataset.points,callback,this);
			},this);
		},

		getPointsAtEvent : function(evt){
			var mousePosition = helpers.getRelativePosition(evt),
				fromCenter = helpers.getAngleFromPoint({
					x: this.scale.xCenter,
					y: this.scale.yCenter
				}, mousePosition);

			var anglePerIndex = (Math.PI * 2) /this.scale.valuesCount,
				pointIndex = Math.round((fromCenter.angle - Math.PI * 1.5) / anglePerIndex),
				activePointsCollection = [];

			// If we're at the top, make the pointIndex 0 to get the first of the array.
			if (pointIndex >= this.scale.valuesCount || pointIndex < 0){
				pointIndex = 0;
			}

			if (fromCenter.distance <= this.scale.drawingArea){
				helpers.each(this.datasets, function(dataset){
					activePointsCollection.push(dataset.points[pointIndex]);
				});
			}

			return activePointsCollection;
		},

		buildScale : function(data){
			this.scale = new Chart.RadialScale({
				display: this.options.showScale,
				fontStyle: this.options.scaleFontStyle,
				fontSize: this.options.scaleFontSize,
				fontFamily: this.options.scaleFontFamily,
				fontColor: this.options.scaleFontColor,
				showLabels: this.options.scaleShowLabels,
				showLabelBackdrop: this.options.scaleShowLabelBackdrop,
				backdropColor: this.options.scaleBackdropColor,
				backdropPaddingY : this.options.scaleBackdropPaddingY,
				backdropPaddingX: this.options.scaleBackdropPaddingX,
				lineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,
				lineColor: this.options.scaleLineColor,
				angleLineColor : this.options.angleLineColor,
				angleLineWidth : (this.options.angleShowLineOut) ? this.options.angleLineWidth : 0,
				// Point labels at the edge of each line
				pointLabelFontColor : this.options.pointLabelFontColor,
				pointLabelFontSize : this.options.pointLabelFontSize,
				pointLabelFontFamily : this.options.pointLabelFontFamily,
				pointLabelFontStyle : this.options.pointLabelFontStyle,
				height : this.chart.height,
				width: this.chart.width,
				xCenter: this.chart.width/2,
				yCenter: this.chart.height/2,
				ctx : this.chart.ctx,
				templateString: this.options.scaleLabel,
				labels: data.labels,
				valuesCount: data.datasets[0].data.length
			});

			this.scale.setScaleSize();
			this.updateScaleRange(data.datasets);
			this.scale.buildYLabels();
		},
		updateScaleRange: function(datasets){
			var valuesArray = (function(){
				var totalDataArray = [];
				helpers.each(datasets,function(dataset){
					if (dataset.data){
						totalDataArray = totalDataArray.concat(dataset.data);
					}
					else {
						helpers.each(dataset.points, function(point){
							totalDataArray.push(point.value);
						});
					}
				});
				return totalDataArray;
			})();


			var scaleSizes = (this.options.scaleOverride) ?
				{
					steps: this.options.scaleSteps,
					stepValue: this.options.scaleStepWidth,
					min: this.options.scaleStartValue,
					max: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)
				} :
				helpers.calculateScaleRange(
					valuesArray,
					helpers.min([this.chart.width, this.chart.height])/2,
					this.options.scaleFontSize,
					this.options.scaleBeginAtZero,
					this.options.scaleIntegersOnly
				);

			helpers.extend(
				this.scale,
				scaleSizes
			);

		},
		addData : function(valuesArray,label){
			//Map the values array for each of the datasets
			this.scale.valuesCount++;
			helpers.each(valuesArray,function(value,datasetIndex){
				var pointPosition = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(value));
				this.datasets[datasetIndex].points.push(new this.PointClass({
					value : value,
					label : label,
					x: pointPosition.x,
					y: pointPosition.y,
					strokeColor : this.datasets[datasetIndex].pointStrokeColor,
					fillColor : this.datasets[datasetIndex].pointColor
				}));
			},this);

			this.scale.labels.push(label);

			this.reflow();

			this.update();
		},
		removeData : function(){
			this.scale.valuesCount--;
			this.scale.labels.shift();
			helpers.each(this.datasets,function(dataset){
				dataset.points.shift();
			},this);
			this.reflow();
			this.update();
		},
		update : function(){
			this.eachPoints(function(point){
				point.save();
			});
			this.reflow();
			this.render();
		},
		reflow: function(){
			helpers.extend(this.scale, {
				width : this.chart.width,
				height: this.chart.height,
				size : helpers.min([this.chart.width, this.chart.height]),
				xCenter: this.chart.width/2,
				yCenter: this.chart.height/2
			});
			this.updateScaleRange(this.datasets);
			this.scale.setScaleSize();
			this.scale.buildYLabels();
		},
		draw : function(ease){
			var easeDecimal = ease || 1,
				ctx = this.chart.ctx;
			this.clear();
			this.scale.draw();

			helpers.each(this.datasets,function(dataset){

				//Transition each point first so that the line and point drawing isn't out of sync
				helpers.each(dataset.points,function(point,index){
					if (point.hasValue()){
						point.transition(this.scale.getPointPosition(index, this.scale.calculateCenterOffset(point.value)), easeDecimal);
					}
				},this);



				//Draw the line between all the points
				ctx.lineWidth = this.options.datasetStrokeWidth;
				ctx.strokeStyle = dataset.strokeColor;
				ctx.beginPath();
				helpers.each(dataset.points,function(point,index){
					if (index === 0){
						ctx.moveTo(point.x,point.y);
					}
					else{
						ctx.lineTo(point.x,point.y);
					}
				},this);
				ctx.closePath();
				ctx.stroke();

				ctx.fillStyle = dataset.fillColor;
				ctx.fill();

				//Now draw the points over the line
				//A little inefficient double looping, but better than the line
				//lagging behind the point positions
				helpers.each(dataset.points,function(point){
					if (point.hasValue()){
						point.draw();
					}
				});

			},this);

		}

	});





}).call(this);

/*!jQuery Knob*/
/**
 * Downward compatible, touchable dial
 *
 * Version: 1.2.10
 * Requires: jQuery v1.7+
 *
 * Copyright (c) 2012 Anthony Terrien
 * Under MIT License (http://www.opensource.org/licenses/mit-license.php)
 *
 * Thanks to vor, eskimoblood, spiffistan, FabrizioC
 */
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    /**
     * Kontrol library
     */
    "use strict";

    /**
     * Definition of globals and core
     */
    var k = {}, // kontrol
        max = Math.max,
        min = Math.min;

    k.c = {};
    k.c.d = $(document);
    k.c.t = function (e) {
        return e.originalEvent.touches.length - 1;
    };

    /**
     * Kontrol Object
     *
     * Definition of an abstract UI control
     *
     * Each concrete component must call this one.
     * <code>
     * k.o.call(this);
     * </code>
     */
    k.o = function () {
        var s = this;

        this.o = null; // array of options
        this.$ = null; // jQuery wrapped element
        this.i = null; // mixed HTMLInputElement or array of HTMLInputElement
        this.g = null; // deprecated 2D graphics context for 'pre-rendering'
        this.v = null; // value ; mixed array or integer
        this.cv = null; // change value ; not commited value
        this.x = 0; // canvas x position
        this.y = 0; // canvas y position
        this.w = 0; // canvas width
        this.h = 0; // canvas height
        this.$c = null; // jQuery canvas element
        this.c = null; // rendered canvas context
        this.t = 0; // touches index
        this.isInit = false;
        this.fgColor = null; // main color
        this.pColor = null; // previous color
        this.dH = null; // draw hook
        this.cH = null; // change hook
        this.eH = null; // cancel hook
        this.rH = null; // release hook
        this.scale = 1; // scale factor
        this.relative = false;
        this.relativeWidth = false;
        this.relativeHeight = false;
        this.$div = null; // component div

        this.run = function () {
            var cf = function (e, conf) {
                var k;
                for (k in conf) {
                    s.o[k] = conf[k];
                }
                s._carve().init();
                s._configure()
                 ._draw();
            };

            if (this.$.data('kontroled')) return;
            this.$.data('kontroled', true);

            this.extend();
            this.o = $.extend({
                    // Config
                    min: this.$.data('min') !== undefined ? this.$.data('min') : 0,
                    max: this.$.data('max') !== undefined ? this.$.data('max') : 100,
                    stopper: true,
                    readOnly: this.$.data('readonly') || (this.$.attr('readonly') === 'readonly'),

                    // UI
                    cursor: this.$.data('cursor') === true && 30
                            || this.$.data('cursor') || 0,
                    thickness: this.$.data('thickness')
                               && Math.max(Math.min(this.$.data('thickness'), 1), 0.01)
                               || 0.35,
                    lineCap: this.$.data('linecap') || 'butt',
                    width: this.$.data('width') || 200,
                    height: this.$.data('height') || 200,
                    displayInput: this.$.data('displayinput') == null || this.$.data('displayinput'),
                    displayPrevious: this.$.data('displayprevious'),
                    fgColor: this.$.data('fgcolor') || '#87CEEB',
                    inputColor: this.$.data('inputcolor'),
                    font: this.$.data('font') || 'Arial',
                    fontWeight: this.$.data('font-weight') || 'bold',
                    inline: false,
                    step: this.$.data('step') || 1,
                    rotation: this.$.data('rotation'),

                    // Hooks
                    draw: null, // function () {}
                    change: null, // function (value) {}
                    cancel: null, // function () {}
                    release: null, // function (value) {}

                    // Output formatting, allows to add unit: %, ms ...
                    format: function(v) {
                        return v;
                    },
                    parse: function (v) {
                        return parseFloat(v);
                    }
                }, this.o
            );

            // finalize options
            this.o.flip = this.o.rotation === 'anticlockwise' || this.o.rotation === 'acw';
            if (!this.o.inputColor) {
                this.o.inputColor = this.o.fgColor;
            }

            // routing value
            if (this.$.is('fieldset')) {

                // fieldset = array of integer
                this.v = {};
                this.i = this.$.find('input');
                this.i.each(function(k) {
                    var $this = $(this);
                    s.i[k] = $this;
                    s.v[k] = s.o.parse($this.val());

                    $this.bind(
                        'change blur',
                        function () {
                            var val = {};
                            val[k] = $this.val();
                            s.val(val);
                        }
                    );
                });
                this.$.find('legend').remove();
            } else {

                // input = integer
                this.i = this.$;
                this.v = this.o.parse(this.$.val());
                this.v === '' && (this.v = this.o.min);
                this.$.bind(
                    'change blur',
                    function () {
                        s.val(s._validate(s.o.parse(s.$.val())));
                    }
                );

            }

            !this.o.displayInput && this.$.hide();

            // adds needed DOM elements (canvas, div)
            this.$c = $(document.createElement('canvas')).attr({
                width: this.o.width,
                height: this.o.height
            });

            // wraps all elements in a div
            // add to DOM before Canvas init is triggered
            this.$div = $('<div style="'
                + (this.o.inline ? 'display:inline;' : '')
                + 'width:' + this.o.width + 'px;height:' + this.o.height + 'px;'
                + '"></div>');

            this.$.wrap(this.$div).before(this.$c);
            this.$div = this.$.parent();

            if (typeof G_vmlCanvasManager !== 'undefined') {
                G_vmlCanvasManager.initElement(this.$c[0]);
            }

            this.c = this.$c[0].getContext ? this.$c[0].getContext('2d') : null;

            if (!this.c) {
                throw {
                    name:        "CanvasNotSupportedException",
                    message:     "Canvas not supported. Please use excanvas on IE8.0.",
                    toString:    function(){return this.name + ": " + this.message}
                }
            }

            // hdpi support
            this.scale = (window.devicePixelRatio || 1) / (
                            this.c.webkitBackingStorePixelRatio ||
                            this.c.mozBackingStorePixelRatio ||
                            this.c.msBackingStorePixelRatio ||
                            this.c.oBackingStorePixelRatio ||
                            this.c.backingStorePixelRatio || 1
                         );

            // detects relative width / height
            this.relativeWidth =  this.o.width % 1 !== 0
                                  && this.o.width.indexOf('%');
            this.relativeHeight = this.o.height % 1 !== 0
                                  && this.o.height.indexOf('%');
            this.relative = this.relativeWidth || this.relativeHeight;

            // computes size and carves the component
            this._carve();

            // prepares props for transaction
            if (this.v instanceof Object) {
                this.cv = {};
                this.copy(this.v, this.cv);
            } else {
                this.cv = this.v;
            }

            // binds configure event
            this.$
                .bind("configure", cf)
                .parent()
                .bind("configure", cf);

            // finalize init
            this._listen()
                ._configure()
                ._xy()
                .init();

            this.isInit = true;

            this.$.val(this.o.format(this.v));
            this._draw();

            return this;
        };

        this._carve = function() {
            if (this.relative) {
                var w = this.relativeWidth ?
                        this.$div.parent().width() *
                        parseInt(this.o.width) / 100
                        : this.$div.parent().width(),
                    h = this.relativeHeight ?
                        this.$div.parent().height() *
                        parseInt(this.o.height) / 100
                        : this.$div.parent().height();

                // apply relative
                this.w = this.h = Math.min(w, h);
            } else {
                this.w = this.o.width;
                this.h = this.o.height;
            }

            // finalize div
            this.$div.css({
                'width': this.w + 'px',
                'height': this.h + 'px'
            });

            // finalize canvas with computed width
            this.$c.attr({
                width: this.w,
                height: this.h
            });

            // scaling
            if (this.scale !== 1) {
                this.$c[0].width = this.$c[0].width * this.scale;
                this.$c[0].height = this.$c[0].height * this.scale;
                this.$c.width(this.w);
                this.$c.height(this.h);
            }

            return this;
        }

        this._draw = function () {

            // canvas pre-rendering
            var d = true;

            s.g = s.c;

            s.clear();

            s.dH && (d = s.dH());

            d !== false && s.draw();
        };

        this._touch = function (e) {
            var touchMove = function (e) {
                var v = s.xy2val(
                            e.originalEvent.touches[s.t].pageX,
                            e.originalEvent.touches[s.t].pageY
                        );

                if (v == s.cv) return;

                if (s.cH && s.cH(v) === false) return;

                s.change(s._validate(v));
                s._draw();
            };

            // get touches index
            this.t = k.c.t(e);

            // First touch
            touchMove(e);

            // Touch events listeners
            k.c.d
                .bind("touchmove.k", touchMove)
                .bind(
                    "touchend.k",
                    function () {
                        k.c.d.unbind('touchmove.k touchend.k');
                        s.val(s.cv);
                    }
                );

            return this;
        };

        this._mouse = function (e) {
            var mouseMove = function (e) {
                var v = s.xy2val(e.pageX, e.pageY);

                if (v == s.cv) return;

                if (s.cH && (s.cH(v) === false)) return;

                s.change(s._validate(v));
                s._draw();
            };

            // First click
            mouseMove(e);

            // Mouse events listeners
            k.c.d
                .bind("mousemove.k", mouseMove)
                .bind(
                    // Escape key cancel current change
                    "keyup.k",
                    function (e) {
                        if (e.keyCode === 27) {
                            k.c.d.unbind("mouseup.k mousemove.k keyup.k");

                            if (s.eH && s.eH() === false)
                                return;

                            s.cancel();
                        }
                    }
                )
                .bind(
                    "mouseup.k",
                    function (e) {
                        k.c.d.unbind('mousemove.k mouseup.k keyup.k');
                        s.val(s.cv);
                    }
                );

            return this;
        };

        this._xy = function () {
            var o = this.$c.offset();
            this.x = o.left;
            this.y = o.top;

            return this;
        };

        this._listen = function () {
            if (!this.o.readOnly) {
                this.$c
                    .bind(
                        "mousedown",
                        function (e) {
                            e.preventDefault();
                            s._xy()._mouse(e);
                        }
                    )
                    .bind(
                        "touchstart",
                        function (e) {
                            e.preventDefault();
                            s._xy()._touch(e);
                        }
                    );

                this.listen();
            } else {
                this.$.attr('readonly', 'readonly');
            }

            if (this.relative) {
                $(window).resize(function() {
                    s._carve().init();
                    s._draw();
                });
            }

            return this;
        };

        this._configure = function () {

            // Hooks
            if (this.o.draw) this.dH = this.o.draw;
            if (this.o.change) this.cH = this.o.change;
            if (this.o.cancel) this.eH = this.o.cancel;
            if (this.o.release) this.rH = this.o.release;

            if (this.o.displayPrevious) {
                this.pColor = this.h2rgba(this.o.fgColor, "0.4");
                this.fgColor = this.h2rgba(this.o.fgColor, "0.6");
            } else {
                this.fgColor = this.o.fgColor;
            }

            return this;
        };

        this._clear = function () {
            this.$c[0].width = this.$c[0].width;
        };

        this._validate = function (v) {
            return (~~ (((v < 0) ? -0.5 : 0.5) + (v/this.o.step))) * this.o.step;
        };

        // Abstract methods
        this.listen = function () {}; // on start, one time
        this.extend = function () {}; // each time configure triggered
        this.init = function () {}; // each time configure triggered
        this.change = function (v) {}; // on change
        this.val = function (v) {}; // on release
        this.xy2val = function (x, y) {}; //
        this.draw = function () {}; // on change / on release
        this.clear = function () { this._clear(); };

        // Utils
        this.h2rgba = function (h, a) {
            var rgb;
            h = h.substring(1,7)
            rgb = [
                parseInt(h.substring(0,2), 16),
                parseInt(h.substring(2,4), 16),
                parseInt(h.substring(4,6), 16)
            ];

            return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + a + ")";
        };

        this.copy = function (f, t) {
            for (var i in f) {
                t[i] = f[i];
            }
        };
    };


    /**
     * k.Dial
     */
    k.Dial = function () {
        k.o.call(this);

        this.startAngle = null;
        this.xy = null;
        this.radius = null;
        this.lineWidth = null;
        this.cursorExt = null;
        this.w2 = null;
        this.PI2 = 2*Math.PI;

        this.extend = function () {
            this.o = $.extend({
                bgColor: this.$.data('bgcolor') || '#EEEEEE',
                angleOffset: this.$.data('angleoffset') || 0,
                angleArc: this.$.data('anglearc') || 360,
                inline: true
            }, this.o);
        };

        this.val = function (v, triggerRelease) {
            if (null != v) {

                // reverse format
                v = this.o.parse(v);

                if (triggerRelease !== false
                    && v != this.v
                    && this.rH
                    && this.rH(v) === false) { return; }

                this.cv = this.o.stopper ? max(min(v, this.o.max), this.o.min) : v;
                this.v = this.cv;
                this.$.val(this.o.format(this.v));
                this._draw();
            } else {
                return this.v;
            }
        };

        this.xy2val = function (x, y) {
            var a, ret;

            a = Math.atan2(
                        x - (this.x + this.w2),
                        - (y - this.y - this.w2)
                    ) - this.angleOffset;

            if (this.o.flip) {
                a = this.angleArc - a - this.PI2;
            }

            if (this.angleArc != this.PI2 && (a < 0) && (a > -0.5)) {

                // if isset angleArc option, set to min if .5 under min
                a = 0;
            } else if (a < 0) {
                a += this.PI2;
            }

            ret = ~~ (0.5 + (a * (this.o.max - this.o.min) / this.angleArc)) + this.o.min;

            this.o.stopper && (ret = max(min(ret, this.o.max), this.o.min));

            return ret;
        };

        this.listen = function () {

            // bind MouseWheel
            var s = this, mwTimerStop,
                mwTimerRelease,
                mw = function (e) {
                    e.preventDefault();

                    var ori = e.originalEvent,
                        deltaX = ori.detail || ori.wheelDeltaX,
                        deltaY = ori.detail || ori.wheelDeltaY,
                        v = s._validate(s.o.parse(s.$.val()))
                            + (
                                deltaX > 0 || deltaY > 0
                                ? s.o.step
                                : deltaX < 0 || deltaY < 0 ? -s.o.step : 0
                              );

                    v = max(min(v, s.o.max), s.o.min);

                    s.val(v, false);

                    if (s.rH) {
                        // Handle mousewheel stop
                        clearTimeout(mwTimerStop);
                        mwTimerStop = setTimeout(function () {
                            s.rH(v);
                            mwTimerStop = null;
                        }, 100);

                        // Handle mousewheel releases
                        if (!mwTimerRelease) {
                            mwTimerRelease = setTimeout(function () {
                                if (mwTimerStop)
                                    s.rH(v);
                                mwTimerRelease = null;
                            }, 200);
                        }
                    }
                },
                kval,
                to,
                m = 1,
                kv = {
                    37: -s.o.step,
                    38: s.o.step,
                    39: s.o.step,
                    40: -s.o.step
                };

            this.$
                .bind(
                    "keydown",
                    function (e) {
                        var kc = e.keyCode;

                        // numpad support
                        if (kc >= 96 && kc <= 105) {
                            kc = e.keyCode = kc - 48;
                        }

                        kval = parseInt(String.fromCharCode(kc));

                        if (isNaN(kval)) {
                            (kc !== 13)                     // enter
                            && kc !== 8                     // bs
                            && kc !== 9                     // tab
                            && kc !== 189                   // -
                            && (kc !== 190
                                || s.$.val().match(/\./))   // . allowed once
                            && e.preventDefault();

                            // arrows
                            if ($.inArray(kc,[37,38,39,40]) > -1) {
                                e.preventDefault();

                                var v = s.o.parse(s.$.val()) + kv[kc] * m;
                                s.o.stopper && (v = max(min(v, s.o.max), s.o.min));

                                s.change(v);
                                s._draw();

                                // long time keydown speed-up
                                to = window.setTimeout(function () {
                                    m *= 2;
                                }, 30);
                            }
                        }
                    }
                )
                .bind(
                    "keyup",
                    function (e) {
                        if (isNaN(kval)) {
                            if (to) {
                                window.clearTimeout(to);
                                to = null;
                                m = 1;
                                s.val(s.$.val());
                            }
                        } else {
                            // kval postcond
                            (s.$.val() > s.o.max && s.$.val(s.o.max))
                            || (s.$.val() < s.o.min && s.$.val(s.o.min));
                        }
                    }
                );

            this.$c.bind("mousewheel DOMMouseScroll", mw);
            this.$.bind("mousewheel DOMMouseScroll", mw)
        };

        this.init = function () {
            if (this.v < this.o.min
                || this.v > this.o.max) { this.v = this.o.min; }

            this.$.val(this.v);
            this.w2 = this.w / 2;
            this.cursorExt = this.o.cursor / 100;
            this.xy = this.w2 * this.scale;
            this.lineWidth = this.xy * this.o.thickness;
            this.lineCap = this.o.lineCap;
            this.radius = this.xy - this.lineWidth / 2;

            this.o.angleOffset
            && (this.o.angleOffset = isNaN(this.o.angleOffset) ? 0 : this.o.angleOffset);

            this.o.angleArc
            && (this.o.angleArc = isNaN(this.o.angleArc) ? this.PI2 : this.o.angleArc);

            // deg to rad
            this.angleOffset = this.o.angleOffset * Math.PI / 180;
            this.angleArc = this.o.angleArc * Math.PI / 180;

            // compute start and end angles
            this.startAngle = 1.5 * Math.PI + this.angleOffset;
            this.endAngle = 1.5 * Math.PI + this.angleOffset + this.angleArc;

            var s = max(
                String(Math.abs(this.o.max)).length,
                String(Math.abs(this.o.min)).length,
                2
            ) + 2;

            this.o.displayInput
                && this.i.css({
                        'width' : ((this.w / 2 + 4) >> 0) + 'px',
                        'height' : ((this.w / 3) >> 0) + 'px',
                        'position' : 'absolute',
                        'vertical-align' : 'middle',
                        'margin-top' : ((this.w / 3) >> 0) + 'px',
                        'margin-left' : '-' + ((this.w * 3 / 4 + 2) >> 0) + 'px',
                        'border' : 0,
                        'background' : 'none',
                        'font' : this.o.fontWeight + ' ' + ((this.w / s) >> 0) + 'px ' + this.o.font,
                        'text-align' : 'center',
                        'color' : this.o.inputColor || this.o.fgColor,
                        'padding' : '0px',
                        '-webkit-appearance': 'none'
                        }) || this.i.css({
                            'width': '0px',
                            'visibility': 'hidden'
                        });
        };

        this.change = function (v) {
            this.cv = v;
            this.$.val(this.o.format(v));
        };

        this.angle = function (v) {
            return (v - this.o.min) * this.angleArc / (this.o.max - this.o.min);
        };

        this.arc = function (v) {
          var sa, ea;
          v = this.angle(v);
          if (this.o.flip) {
              sa = this.endAngle + 0.00001;
              ea = sa - v - 0.00001;
          } else {
              sa = this.startAngle - 0.00001;
              ea = sa + v + 0.00001;
          }
          this.o.cursor
              && (sa = ea - this.cursorExt)
              && (ea = ea + this.cursorExt);

          return {
              s: sa,
              e: ea,
              d: this.o.flip && !this.o.cursor
          };
        };

        this.draw = function () {
            var c = this.g,                 // context
                a = this.arc(this.cv),      // Arc
                pa,                         // Previous arc
                r = 1;

            c.lineWidth = this.lineWidth;
            c.lineCap = this.lineCap;

            if (this.o.bgColor !== "none") {
                c.beginPath();
                    c.strokeStyle = this.o.bgColor;
                    c.arc(this.xy, this.xy, this.radius, this.endAngle - 0.00001, this.startAngle + 0.00001, true);
                c.stroke();
            }

            if (this.o.displayPrevious) {
                pa = this.arc(this.v);
                c.beginPath();
                c.strokeStyle = this.pColor;
                c.arc(this.xy, this.xy, this.radius, pa.s, pa.e, pa.d);
                c.stroke();
                r = this.cv == this.v;
            }

            c.beginPath();
            c.strokeStyle = r ? this.o.fgColor : this.fgColor ;
            c.arc(this.xy, this.xy, this.radius, a.s, a.e, a.d);
            c.stroke();
        };

        this.cancel = function () {
            this.val(this.v);
        };
    };

    $.fn.dial = $.fn.knob = function (o) {
        return this.each(
            function () {
                var d = new k.Dial();
                d.o = o;
                d.$ = $(this);
                d.run();
            }
        ).parent();
    };

}));

/*!

 handlebars v1.3.0

Copyright (C) 2011 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
var Handlebars=function(){var a=function(){"use strict";function a(a){this.string=a}var b;return a.prototype.toString=function(){return""+this.string},b=a}(),b=function(a){"use strict";function b(a){return h[a]||"&amp;"}function c(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])}function d(a){return a instanceof g?a.toString():a||0===a?(a=""+a,j.test(a)?a.replace(i,b):a):""}function e(a){return a||0===a?m(a)&&0===a.length?!0:!1:!0}var f={},g=a,h={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},i=/[&<>"'`]/g,j=/[&<>"'`]/;f.extend=c;var k=Object.prototype.toString;f.toString=k;var l=function(a){return"function"==typeof a};l(/x/)&&(l=function(a){return"function"==typeof a&&"[object Function]"===k.call(a)});var l;f.isFunction=l;var m=Array.isArray||function(a){return a&&"object"==typeof a?"[object Array]"===k.call(a):!1};return f.isArray=m,f.escapeExpression=d,f.isEmpty=e,f}(a),c=function(){"use strict";function a(a,b){var d;b&&b.firstLine&&(d=b.firstLine,a+=" - "+d+":"+b.firstColumn);for(var e=Error.prototype.constructor.call(this,a),f=0;f<c.length;f++)this[c[f]]=e[c[f]];d&&(this.lineNumber=d,this.column=b.firstColumn)}var b,c=["description","fileName","lineNumber","message","name","number","stack"];return a.prototype=new Error,b=a}(),d=function(a,b){"use strict";function c(a,b){this.helpers=a||{},this.partials=b||{},d(this)}function d(a){a.registerHelper("helperMissing",function(a){if(2===arguments.length)return void 0;throw new h("Missing helper: '"+a+"'")}),a.registerHelper("blockHelperMissing",function(b,c){var d=c.inverse||function(){},e=c.fn;return m(b)&&(b=b.call(this)),b===!0?e(this):b===!1||null==b?d(this):l(b)?b.length>0?a.helpers.each(b,c):d(this):e(b)}),a.registerHelper("each",function(a,b){var c,d=b.fn,e=b.inverse,f=0,g="";if(m(a)&&(a=a.call(this)),b.data&&(c=q(b.data)),a&&"object"==typeof a)if(l(a))for(var h=a.length;h>f;f++)c&&(c.index=f,c.first=0===f,c.last=f===a.length-1),g+=d(a[f],{data:c});else for(var i in a)a.hasOwnProperty(i)&&(c&&(c.key=i,c.index=f,c.first=0===f),g+=d(a[i],{data:c}),f++);return 0===f&&(g=e(this)),g}),a.registerHelper("if",function(a,b){return m(a)&&(a=a.call(this)),!b.hash.includeZero&&!a||g.isEmpty(a)?b.inverse(this):b.fn(this)}),a.registerHelper("unless",function(b,c){return a.helpers["if"].call(this,b,{fn:c.inverse,inverse:c.fn,hash:c.hash})}),a.registerHelper("with",function(a,b){return m(a)&&(a=a.call(this)),g.isEmpty(a)?void 0:b.fn(a)}),a.registerHelper("log",function(b,c){var d=c.data&&null!=c.data.level?parseInt(c.data.level,10):1;a.log(d,b)})}function e(a,b){p.log(a,b)}var f={},g=a,h=b,i="1.3.0";f.VERSION=i;var j=4;f.COMPILER_REVISION=j;var k={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:">= 1.0.0"};f.REVISION_CHANGES=k;var l=g.isArray,m=g.isFunction,n=g.toString,o="[object Object]";f.HandlebarsEnvironment=c,c.prototype={constructor:c,logger:p,log:e,registerHelper:function(a,b,c){if(n.call(a)===o){if(c||b)throw new h("Arg not supported with multiple helpers");g.extend(this.helpers,a)}else c&&(b.not=c),this.helpers[a]=b},registerPartial:function(a,b){n.call(a)===o?g.extend(this.partials,a):this.partials[a]=b}};var p={methodMap:{0:"debug",1:"info",2:"warn",3:"error"},DEBUG:0,INFO:1,WARN:2,ERROR:3,level:3,log:function(a,b){if(p.level<=a){var c=p.methodMap[a];"undefined"!=typeof console&&console[c]&&console[c].call(console,b)}}};f.logger=p,f.log=e;var q=function(a){var b={};return g.extend(b,a),b};return f.createFrame=q,f}(b,c),e=function(a,b,c){"use strict";function d(a){var b=a&&a[0]||1,c=m;if(b!==c){if(c>b){var d=n[c],e=n[b];throw new l("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+d+") or downgrade your runtime to an older version ("+e+").")}throw new l("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+a[1]+").")}}function e(a,b){if(!b)throw new l("No environment passed to template");var c=function(a,c,d,e,f,g){var h=b.VM.invokePartial.apply(this,arguments);if(null!=h)return h;if(b.compile){var i={helpers:e,partials:f,data:g};return f[c]=b.compile(a,{data:void 0!==g},b),f[c](d,i)}throw new l("The partial "+c+" could not be compiled when running in runtime-only mode")},d={escapeExpression:k.escapeExpression,invokePartial:c,programs:[],program:function(a,b,c){var d=this.programs[a];return c?d=g(a,b,c):d||(d=this.programs[a]=g(a,b)),d},merge:function(a,b){var c=a||b;return a&&b&&a!==b&&(c={},k.extend(c,b),k.extend(c,a)),c},programWithDepth:b.VM.programWithDepth,noop:b.VM.noop,compilerInfo:null};return function(c,e){e=e||{};var f,g,h=e.partial?e:b;e.partial||(f=e.helpers,g=e.partials);var i=a.call(d,h,c,f,g,e.data);return e.partial||b.VM.checkRevision(d.compilerInfo),i}}function f(a,b,c){var d=Array.prototype.slice.call(arguments,3),e=function(a,e){return e=e||{},b.apply(this,[a,e.data||c].concat(d))};return e.program=a,e.depth=d.length,e}function g(a,b,c){var d=function(a,d){return d=d||{},b(a,d.data||c)};return d.program=a,d.depth=0,d}function h(a,b,c,d,e,f){var g={partial:!0,helpers:d,partials:e,data:f};if(void 0===a)throw new l("The partial "+b+" could not be found");return a instanceof Function?a(c,g):void 0}function i(){return""}var j={},k=a,l=b,m=c.COMPILER_REVISION,n=c.REVISION_CHANGES;return j.checkRevision=d,j.template=e,j.programWithDepth=f,j.program=g,j.invokePartial=h,j.noop=i,j}(b,c,d),f=function(a,b,c,d,e){"use strict";var f,g=a,h=b,i=c,j=d,k=e,l=function(){var a=new g.HandlebarsEnvironment;return j.extend(a,g),a.SafeString=h,a.Exception=i,a.Utils=j,a.VM=k,a.template=function(b){return k.template(b,a)},a},m=l();return m.create=l,f=m}(d,a,c,b,e),g=function(a){"use strict";function b(a){a=a||{},this.firstLine=a.first_line,this.firstColumn=a.first_column,this.lastColumn=a.last_column,this.lastLine=a.last_line}var c,d=a,e={ProgramNode:function(a,c,d,f){var g,h;3===arguments.length?(f=d,d=null):2===arguments.length&&(f=c,c=null),b.call(this,f),this.type="program",this.statements=a,this.strip={},d?(h=d[0],h?(g={first_line:h.firstLine,last_line:h.lastLine,last_column:h.lastColumn,first_column:h.firstColumn},this.inverse=new e.ProgramNode(d,c,g)):this.inverse=new e.ProgramNode(d,c),this.strip.right=c.left):c&&(this.strip.left=c.right)},MustacheNode:function(a,c,d,f,g){if(b.call(this,g),this.type="mustache",this.strip=f,null!=d&&d.charAt){var h=d.charAt(3)||d.charAt(2);this.escaped="{"!==h&&"&"!==h}else this.escaped=!!d;this.sexpr=a instanceof e.SexprNode?a:new e.SexprNode(a,c),this.sexpr.isRoot=!0,this.id=this.sexpr.id,this.params=this.sexpr.params,this.hash=this.sexpr.hash,this.eligibleHelper=this.sexpr.eligibleHelper,this.isHelper=this.sexpr.isHelper},SexprNode:function(a,c,d){b.call(this,d),this.type="sexpr",this.hash=c;var e=this.id=a[0],f=this.params=a.slice(1),g=this.eligibleHelper=e.isSimple;this.isHelper=g&&(f.length||c)},PartialNode:function(a,c,d,e){b.call(this,e),this.type="partial",this.partialName=a,this.context=c,this.strip=d},BlockNode:function(a,c,e,f,g){if(b.call(this,g),a.sexpr.id.original!==f.path.original)throw new d(a.sexpr.id.original+" doesn't match "+f.path.original,this);this.type="block",this.mustache=a,this.program=c,this.inverse=e,this.strip={left:a.strip.left,right:f.strip.right},(c||e).strip.left=a.strip.right,(e||c).strip.right=f.strip.left,e&&!c&&(this.isInverse=!0)},ContentNode:function(a,c){b.call(this,c),this.type="content",this.string=a},HashNode:function(a,c){b.call(this,c),this.type="hash",this.pairs=a},IdNode:function(a,c){b.call(this,c),this.type="ID";for(var e="",f=[],g=0,h=0,i=a.length;i>h;h++){var j=a[h].part;if(e+=(a[h].separator||"")+j,".."===j||"."===j||"this"===j){if(f.length>0)throw new d("Invalid path: "+e,this);".."===j?g++:this.isScoped=!0}else f.push(j)}this.original=e,this.parts=f,this.string=f.join("."),this.depth=g,this.isSimple=1===a.length&&!this.isScoped&&0===g,this.stringModeValue=this.string},PartialNameNode:function(a,c){b.call(this,c),this.type="PARTIAL_NAME",this.name=a.original},DataNode:function(a,c){b.call(this,c),this.type="DATA",this.id=a},StringNode:function(a,c){b.call(this,c),this.type="STRING",this.original=this.string=this.stringModeValue=a},IntegerNode:function(a,c){b.call(this,c),this.type="INTEGER",this.original=this.integer=a,this.stringModeValue=Number(a)},BooleanNode:function(a,c){b.call(this,c),this.type="BOOLEAN",this.bool=a,this.stringModeValue="true"===a},CommentNode:function(a,c){b.call(this,c),this.type="comment",this.comment=a}};return c=e}(c),h=function(){"use strict";var a,b=function(){function a(a,b){return{left:"~"===a.charAt(2),right:"~"===b.charAt(0)||"~"===b.charAt(1)}}function b(){this.yy={}}var c={trace:function(){},yy:{},symbols_:{error:2,root:3,statements:4,EOF:5,program:6,simpleInverse:7,statement:8,openInverse:9,closeBlock:10,openBlock:11,mustache:12,partial:13,CONTENT:14,COMMENT:15,OPEN_BLOCK:16,sexpr:17,CLOSE:18,OPEN_INVERSE:19,OPEN_ENDBLOCK:20,path:21,OPEN:22,OPEN_UNESCAPED:23,CLOSE_UNESCAPED:24,OPEN_PARTIAL:25,partialName:26,partial_option0:27,sexpr_repetition0:28,sexpr_option0:29,dataName:30,param:31,STRING:32,INTEGER:33,BOOLEAN:34,OPEN_SEXPR:35,CLOSE_SEXPR:36,hash:37,hash_repetition_plus0:38,hashSegment:39,ID:40,EQUALS:41,DATA:42,pathSegments:43,SEP:44,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"CLOSE_UNESCAPED",25:"OPEN_PARTIAL",32:"STRING",33:"INTEGER",34:"BOOLEAN",35:"OPEN_SEXPR",36:"CLOSE_SEXPR",40:"ID",41:"EQUALS",42:"DATA",44:"SEP"},productions_:[0,[3,2],[3,1],[6,2],[6,3],[6,2],[6,1],[6,1],[6,0],[4,1],[4,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,4],[7,2],[17,3],[17,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[37,1],[39,3],[26,1],[26,1],[26,1],[30,2],[21,1],[43,3],[43,1],[27,0],[27,1],[28,0],[28,2],[29,0],[29,1],[38,1],[38,2]],performAction:function(b,c,d,e,f,g){var h=g.length-1;switch(f){case 1:return new e.ProgramNode(g[h-1],this._$);case 2:return new e.ProgramNode([],this._$);case 3:this.$=new e.ProgramNode([],g[h-1],g[h],this._$);break;case 4:this.$=new e.ProgramNode(g[h-2],g[h-1],g[h],this._$);break;case 5:this.$=new e.ProgramNode(g[h-1],g[h],[],this._$);break;case 6:this.$=new e.ProgramNode(g[h],this._$);break;case 7:this.$=new e.ProgramNode([],this._$);break;case 8:this.$=new e.ProgramNode([],this._$);break;case 9:this.$=[g[h]];break;case 10:g[h-1].push(g[h]),this.$=g[h-1];break;case 11:this.$=new e.BlockNode(g[h-2],g[h-1].inverse,g[h-1],g[h],this._$);break;case 12:this.$=new e.BlockNode(g[h-2],g[h-1],g[h-1].inverse,g[h],this._$);break;case 13:this.$=g[h];break;case 14:this.$=g[h];break;case 15:this.$=new e.ContentNode(g[h],this._$);break;case 16:this.$=new e.CommentNode(g[h],this._$);break;case 17:this.$=new e.MustacheNode(g[h-1],null,g[h-2],a(g[h-2],g[h]),this._$);break;case 18:this.$=new e.MustacheNode(g[h-1],null,g[h-2],a(g[h-2],g[h]),this._$);break;case 19:this.$={path:g[h-1],strip:a(g[h-2],g[h])};break;case 20:this.$=new e.MustacheNode(g[h-1],null,g[h-2],a(g[h-2],g[h]),this._$);break;case 21:this.$=new e.MustacheNode(g[h-1],null,g[h-2],a(g[h-2],g[h]),this._$);break;case 22:this.$=new e.PartialNode(g[h-2],g[h-1],a(g[h-3],g[h]),this._$);break;case 23:this.$=a(g[h-1],g[h]);break;case 24:this.$=new e.SexprNode([g[h-2]].concat(g[h-1]),g[h],this._$);break;case 25:this.$=new e.SexprNode([g[h]],null,this._$);break;case 26:this.$=g[h];break;case 27:this.$=new e.StringNode(g[h],this._$);break;case 28:this.$=new e.IntegerNode(g[h],this._$);break;case 29:this.$=new e.BooleanNode(g[h],this._$);break;case 30:this.$=g[h];break;case 31:g[h-1].isHelper=!0,this.$=g[h-1];break;case 32:this.$=new e.HashNode(g[h],this._$);break;case 33:this.$=[g[h-2],g[h]];break;case 34:this.$=new e.PartialNameNode(g[h],this._$);break;case 35:this.$=new e.PartialNameNode(new e.StringNode(g[h],this._$),this._$);break;case 36:this.$=new e.PartialNameNode(new e.IntegerNode(g[h],this._$));break;case 37:this.$=new e.DataNode(g[h],this._$);break;case 38:this.$=new e.IdNode(g[h],this._$);break;case 39:g[h-2].push({part:g[h],separator:g[h-1]}),this.$=g[h-2];break;case 40:this.$=[{part:g[h]}];break;case 43:this.$=[];break;case 44:g[h-1].push(g[h]);break;case 47:this.$=[g[h]];break;case 48:g[h-1].push(g[h])}},table:[{3:1,4:2,5:[1,3],8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],25:[1,15]},{1:[3]},{5:[1,16],8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],25:[1,15]},{1:[2,2]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],25:[2,9]},{4:20,6:18,7:19,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,8],22:[1,13],23:[1,14],25:[1,15]},{4:20,6:22,7:19,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,8],22:[1,13],23:[1,14],25:[1,15]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],25:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],25:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],25:[2,15]},{5:[2,16],14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],25:[2,16]},{17:23,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:29,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:30,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:31,21:24,30:25,40:[1,28],42:[1,27],43:26},{21:33,26:32,32:[1,34],33:[1,35],40:[1,28],43:26},{1:[2,1]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],25:[2,10]},{10:36,20:[1,37]},{4:38,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,7],22:[1,13],23:[1,14],25:[1,15]},{7:39,8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,6],22:[1,13],23:[1,14],25:[1,15]},{17:23,18:[1,40],21:24,30:25,40:[1,28],42:[1,27],43:26},{10:41,20:[1,37]},{18:[1,42]},{18:[2,43],24:[2,43],28:43,32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],40:[2,43],42:[2,43]},{18:[2,25],24:[2,25],36:[2,25]},{18:[2,38],24:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],40:[2,38],42:[2,38],44:[1,44]},{21:45,40:[1,28],43:26},{18:[2,40],24:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],40:[2,40],42:[2,40],44:[2,40]},{18:[1,46]},{18:[1,47]},{24:[1,48]},{18:[2,41],21:50,27:49,40:[1,28],43:26},{18:[2,34],40:[2,34]},{18:[2,35],40:[2,35]},{18:[2,36],40:[2,36]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],25:[2,11]},{21:51,40:[1,28],43:26},{8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,3],22:[1,13],23:[1,14],25:[1,15]},{4:52,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,5],22:[1,13],23:[1,14],25:[1,15]},{14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],25:[2,23]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],25:[2,12]},{14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],25:[2,18]},{18:[2,45],21:56,24:[2,45],29:53,30:60,31:54,32:[1,57],33:[1,58],34:[1,59],35:[1,61],36:[2,45],37:55,38:62,39:63,40:[1,64],42:[1,27],43:26},{40:[1,65]},{18:[2,37],24:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],40:[2,37],42:[2,37]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],25:[2,17]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],25:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],25:[2,21]},{18:[1,66]},{18:[2,42]},{18:[1,67]},{8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],25:[1,15]},{18:[2,24],24:[2,24],36:[2,24]},{18:[2,44],24:[2,44],32:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],40:[2,44],42:[2,44]},{18:[2,46],24:[2,46],36:[2,46]},{18:[2,26],24:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[2,26],40:[2,26],42:[2,26]},{18:[2,27],24:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],40:[2,27],42:[2,27]},{18:[2,28],24:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],40:[2,28],42:[2,28]},{18:[2,29],24:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],40:[2,29],42:[2,29]},{18:[2,30],24:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],40:[2,30],42:[2,30]},{17:68,21:24,30:25,40:[1,28],42:[1,27],43:26},{18:[2,32],24:[2,32],36:[2,32],39:69,40:[1,70]},{18:[2,47],24:[2,47],36:[2,47],40:[2,47]},{18:[2,40],24:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],40:[2,40],41:[1,71],42:[2,40],44:[2,40]},{18:[2,39],24:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],40:[2,39],42:[2,39],44:[2,39]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],25:[2,22]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],25:[2,19]},{36:[1,72]},{18:[2,48],24:[2,48],36:[2,48],40:[2,48]},{41:[1,71]},{21:56,30:60,31:73,32:[1,57],33:[1,58],34:[1,59],35:[1,61],40:[1,28],42:[1,27],43:26},{18:[2,31],24:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],40:[2,31],42:[2,31]},{18:[2,33],24:[2,33],36:[2,33],40:[2,33]}],defaultActions:{3:[2,2],16:[2,1],50:[2,42]},parseError:function(a){throw new Error(a)},parse:function(a){function b(){var a;return a=c.lexer.lex()||1,"number"!=typeof a&&(a=c.symbols_[a]||a),a}var c=this,d=[0],e=[null],f=[],g=this.table,h="",i=0,j=0,k=0;this.lexer.setInput(a),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,"undefined"==typeof this.lexer.yylloc&&(this.lexer.yylloc={});var l=this.lexer.yylloc;f.push(l);var m=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var n,o,p,q,r,s,t,u,v,w={};;){if(p=d[d.length-1],this.defaultActions[p]?q=this.defaultActions[p]:((null===n||"undefined"==typeof n)&&(n=b()),q=g[p]&&g[p][n]),"undefined"==typeof q||!q.length||!q[0]){var x="";if(!k){v=[];for(s in g[p])this.terminals_[s]&&s>2&&v.push("'"+this.terminals_[s]+"'");x=this.lexer.showPosition?"Parse error on line "+(i+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+v.join(", ")+", got '"+(this.terminals_[n]||n)+"'":"Parse error on line "+(i+1)+": Unexpected "+(1==n?"end of input":"'"+(this.terminals_[n]||n)+"'"),this.parseError(x,{text:this.lexer.match,token:this.terminals_[n]||n,line:this.lexer.yylineno,loc:l,expected:v})}}if(q[0]instanceof Array&&q.length>1)throw new Error("Parse Error: multiple actions possible at state: "+p+", token: "+n);switch(q[0]){case 1:d.push(n),e.push(this.lexer.yytext),f.push(this.lexer.yylloc),d.push(q[1]),n=null,o?(n=o,o=null):(j=this.lexer.yyleng,h=this.lexer.yytext,i=this.lexer.yylineno,l=this.lexer.yylloc,k>0&&k--);break;case 2:if(t=this.productions_[q[1]][1],w.$=e[e.length-t],w._$={first_line:f[f.length-(t||1)].first_line,last_line:f[f.length-1].last_line,first_column:f[f.length-(t||1)].first_column,last_column:f[f.length-1].last_column},m&&(w._$.range=[f[f.length-(t||1)].range[0],f[f.length-1].range[1]]),r=this.performAction.call(w,h,j,i,this.yy,q[1],e,f),"undefined"!=typeof r)return r;t&&(d=d.slice(0,-1*t*2),e=e.slice(0,-1*t),f=f.slice(0,-1*t)),d.push(this.productions_[q[1]][0]),e.push(w.$),f.push(w._$),u=g[d[d.length-2]][d[d.length-1]],d.push(u);break;case 3:return!0}}return!0}},d=function(){var a={EOF:1,parseError:function(a,b){if(!this.yy.parser)throw new Error(a);this.yy.parser.parseError(a,b)},setInput:function(a){return this._input=a,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var a=this._input[0];this.yytext+=a,this.yyleng++,this.offset++,this.match+=a,this.matched+=a;var b=a.match(/(?:\r\n?|\n).*/g);return b?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),a},unput:function(a){var b=a.length,c=a.split(/(?:\r\n?|\n)/g);this._input=a+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-b-1),this.offset-=b;var d=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),c.length-1&&(this.yylineno-=c.length-1);var e=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:c?(c.length===d.length?this.yylloc.first_column:0)+d[d.length-c.length].length-c[0].length:this.yylloc.first_column-b},this.options.ranges&&(this.yylloc.range=[e[0],e[0]+this.yyleng-b]),this},more:function(){return this._more=!0,this},less:function(a){this.unput(this.match.slice(a))},pastInput:function(){var a=this.matched.substr(0,this.matched.length-this.match.length);return(a.length>20?"...":"")+a.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var a=this.match;return a.length<20&&(a+=this._input.substr(0,20-a.length)),(a.substr(0,20)+(a.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var a=this.pastInput(),b=new Array(a.length+1).join("-");return a+this.upcomingInput()+"\n"+b+"^"},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var a,b,c,d,e;this._more||(this.yytext="",this.match="");for(var f=this._currentRules(),g=0;g<f.length&&(c=this._input.match(this.rules[f[g]]),!c||b&&!(c[0].length>b[0].length)||(b=c,d=g,this.options.flex));g++);return b?(e=b[0].match(/(?:\r\n?|\n).*/g),e&&(this.yylineno+=e.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:e?e[e.length-1].length-e[e.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+b[0].length},this.yytext+=b[0],this.match+=b[0],this.matches=b,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(b[0].length),this.matched+=b[0],a=this.performAction.call(this,this.yy,this,f[d],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),a?a:void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var a=this.next();return"undefined"!=typeof a?a:this.lex()},begin:function(a){this.conditionStack.push(a)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(a){this.begin(a)}};return a.options={},a.performAction=function(a,b,c,d){function e(a,c){return b.yytext=b.yytext.substr(a,b.yyleng-c)}switch(c){case 0:if("\\\\"===b.yytext.slice(-2)?(e(0,1),this.begin("mu")):"\\"===b.yytext.slice(-1)?(e(0,1),this.begin("emu")):this.begin("mu"),b.yytext)return 14;break;case 1:return 14;case 2:return this.popState(),14;case 3:return e(0,4),this.popState(),15;case 4:return 35;case 5:return 36;case 6:return 25;case 7:return 16;case 8:return 20;case 9:return 19;case 10:return 19;case 11:return 23;case 12:return 22;case 13:this.popState(),this.begin("com");break;case 14:return e(3,5),this.popState(),15;case 15:return 22;case 16:return 41;case 17:return 40;case 18:return 40;case 19:return 44;case 20:break;case 21:return this.popState(),24;case 22:return this.popState(),18;case 23:return b.yytext=e(1,2).replace(/\\"/g,'"'),32;case 24:return b.yytext=e(1,2).replace(/\\'/g,"'"),32;case 25:return 42;case 26:return 34;case 27:return 34;case 28:return 33;case 29:return 40;case 30:return b.yytext=e(1,2),40;case 31:return"INVALID";case 32:return 5}},a.rules=[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{(~)?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:-?[0-9]+(?=([~}\s)])))/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)]))))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/],a.conditions={mu:{rules:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[3],inclusive:!1},INITIAL:{rules:[0,1,32],inclusive:!0}},a}();return c.lexer=d,b.prototype=c,c.Parser=b,new b}();return a=b}(),i=function(a,b){"use strict";function c(a){return a.constructor===f.ProgramNode?a:(e.yy=f,e.parse(a))}var d={},e=a,f=b;return d.parser=e,d.parse=c,d}(h,g),j=function(a){"use strict";function b(){}function c(a,b,c){if(null==a||"string"!=typeof a&&a.constructor!==c.AST.ProgramNode)throw new f("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+a);b=b||{},"data"in b||(b.data=!0);var d=c.parse(a),e=(new c.Compiler).compile(d,b);return(new c.JavaScriptCompiler).compile(e,b)}function d(a,b,c){function d(){var d=c.parse(a),e=(new c.Compiler).compile(d,b),f=(new c.JavaScriptCompiler).compile(e,b,void 0,!0);return c.template(f)}if(null==a||"string"!=typeof a&&a.constructor!==c.AST.ProgramNode)throw new f("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+a);b=b||{},"data"in b||(b.data=!0);var e;return function(a,b){return e||(e=d()),e.call(this,a,b)}}var e={},f=a;return e.Compiler=b,b.prototype={compiler:b,disassemble:function(){for(var a,b,c,d=this.opcodes,e=[],f=0,g=d.length;g>f;f++)if(a=d[f],"DECLARE"===a.opcode)e.push("DECLARE "+a.name+"="+a.value);else{b=[];for(var h=0;h<a.args.length;h++)c=a.args[h],"string"==typeof c&&(c='"'+c.replace("\n","\\n")+'"'),b.push(c);e.push(a.opcode+" "+b.join(" "))}return e.join("\n")},equals:function(a){var b=this.opcodes.length;if(a.opcodes.length!==b)return!1;for(var c=0;b>c;c++){var d=this.opcodes[c],e=a.opcodes[c];if(d.opcode!==e.opcode||d.args.length!==e.args.length)return!1;for(var f=0;f<d.args.length;f++)if(d.args[f]!==e.args[f])return!1}if(b=this.children.length,a.children.length!==b)return!1;for(c=0;b>c;c++)if(!this.children[c].equals(a.children[c]))return!1;return!0},guid:0,compile:function(a,b){this.opcodes=[],this.children=[],this.depths={list:[]},this.options=b;var c=this.options.knownHelpers;if(this.options.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,"if":!0,unless:!0,"with":!0,log:!0},c)for(var d in c)this.options.knownHelpers[d]=c[d];return this.accept(a)},accept:function(a){var b,c=a.strip||{};return c.left&&this.opcode("strip"),b=this[a.type](a),c.right&&this.opcode("strip"),b},program:function(a){for(var b=a.statements,c=0,d=b.length;d>c;c++)this.accept(b[c]);return this.isSimple=1===d,this.depths.list=this.depths.list.sort(function(a,b){return a-b}),this},compileProgram:function(a){var b,c=(new this.compiler).compile(a,this.options),d=this.guid++;this.usePartial=this.usePartial||c.usePartial,this.children[d]=c;for(var e=0,f=c.depths.list.length;f>e;e++)b=c.depths.list[e],2>b||this.addDepth(b-1);return d},block:function(a){var b=a.mustache,c=a.program,d=a.inverse;c&&(c=this.compileProgram(c)),d&&(d=this.compileProgram(d));var e=b.sexpr,f=this.classifySexpr(e);"helper"===f?this.helperSexpr(e,c,d):"simple"===f?(this.simpleSexpr(e),this.opcode("pushProgram",c),this.opcode("pushProgram",d),this.opcode("emptyHash"),this.opcode("blockValue")):(this.ambiguousSexpr(e,c,d),this.opcode("pushProgram",c),this.opcode("pushProgram",d),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},hash:function(a){var b,c,d=a.pairs;this.opcode("pushHash");for(var e=0,f=d.length;f>e;e++)b=d[e],c=b[1],this.options.stringParams?(c.depth&&this.addDepth(c.depth),this.opcode("getContext",c.depth||0),this.opcode("pushStringParam",c.stringModeValue,c.type),"sexpr"===c.type&&this.sexpr(c)):this.accept(c),this.opcode("assignToHash",b[0]);this.opcode("popHash")},partial:function(a){var b=a.partialName;this.usePartial=!0,a.context?this.ID(a.context):this.opcode("push","depth0"),this.opcode("invokePartial",b.name),this.opcode("append")},content:function(a){this.opcode("appendContent",a.string)},mustache:function(a){this.sexpr(a.sexpr),a.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},ambiguousSexpr:function(a,b,c){var d=a.id,e=d.parts[0],f=null!=b||null!=c;this.opcode("getContext",d.depth),this.opcode("pushProgram",b),this.opcode("pushProgram",c),this.opcode("invokeAmbiguous",e,f)},simpleSexpr:function(a){var b=a.id;"DATA"===b.type?this.DATA(b):b.parts.length?this.ID(b):(this.addDepth(b.depth),this.opcode("getContext",b.depth),this.opcode("pushContext")),this.opcode("resolvePossibleLambda")},helperSexpr:function(a,b,c){var d=this.setupFullMustacheParams(a,b,c),e=a.id.parts[0];if(this.options.knownHelpers[e])this.opcode("invokeKnownHelper",d.length,e);else{if(this.options.knownHelpersOnly)throw new f("You specified knownHelpersOnly, but used the unknown helper "+e,a);this.opcode("invokeHelper",d.length,e,a.isRoot)}},sexpr:function(a){var b=this.classifySexpr(a);"simple"===b?this.simpleSexpr(a):"helper"===b?this.helperSexpr(a):this.ambiguousSexpr(a)},ID:function(a){this.addDepth(a.depth),this.opcode("getContext",a.depth);var b=a.parts[0];b?this.opcode("lookupOnContext",a.parts[0]):this.opcode("pushContext");for(var c=1,d=a.parts.length;d>c;c++)this.opcode("lookup",a.parts[c])},DATA:function(a){if(this.options.data=!0,a.id.isScoped||a.id.depth)throw new f("Scoped data references are not supported: "+a.original,a);this.opcode("lookupData");for(var b=a.id.parts,c=0,d=b.length;d>c;c++)this.opcode("lookup",b[c])},STRING:function(a){this.opcode("pushString",a.string)},INTEGER:function(a){this.opcode("pushLiteral",a.integer)},BOOLEAN:function(a){this.opcode("pushLiteral",a.bool)},comment:function(){},opcode:function(a){this.opcodes.push({opcode:a,args:[].slice.call(arguments,1)})},declare:function(a,b){this.opcodes.push({opcode:"DECLARE",name:a,value:b})},addDepth:function(a){0!==a&&(this.depths[a]||(this.depths[a]=!0,this.depths.list.push(a)))},classifySexpr:function(a){var b=a.isHelper,c=a.eligibleHelper,d=this.options;if(c&&!b){var e=a.id.parts[0];d.knownHelpers[e]?b=!0:d.knownHelpersOnly&&(c=!1)}return b?"helper":c?"ambiguous":"simple"},pushParams:function(a){for(var b,c=a.length;c--;)b=a[c],this.options.stringParams?(b.depth&&this.addDepth(b.depth),this.opcode("getContext",b.depth||0),this.opcode("pushStringParam",b.stringModeValue,b.type),"sexpr"===b.type&&this.sexpr(b)):this[b.type](b)},setupFullMustacheParams:function(a,b,c){var d=a.params;return this.pushParams(d),this.opcode("pushProgram",b),this.opcode("pushProgram",c),a.hash?this.hash(a.hash):this.opcode("emptyHash"),d}},e.precompile=c,e.compile=d,e}(c),k=function(a,b){"use strict";function c(a){this.value=a}function d(){}var e,f=a.COMPILER_REVISION,g=a.REVISION_CHANGES,h=a.log,i=b;d.prototype={nameLookup:function(a,b){var c,e;return 0===a.indexOf("depth")&&(c=!0),e=/^[0-9]+$/.test(b)?a+"["+b+"]":d.isValidJavaScriptVariableName(b)?a+"."+b:a+"['"+b+"']",c?"("+a+" && "+e+")":e},compilerInfo:function(){var a=f,b=g[a];return"this.compilerInfo = ["+a+",'"+b+"'];\n"},appendToBuffer:function(a){return this.environment.isSimple?"return "+a+";":{appendToBuffer:!0,content:a,toString:function(){return"buffer += "+a+";"}}},initializeBuffer:function(){return this.quotedString("")},namespace:"Handlebars",compile:function(a,b,c,d){this.environment=a,this.options=b||{},h("debug",this.environment.disassemble()+"\n\n"),this.name=this.environment.name,this.isChild=!!c,this.context=c||{programs:[],environments:[],aliases:{}},this.preamble(),this.stackSlot=0,this.stackVars=[],this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.compileChildren(a,b);
var e,f=a.opcodes;this.i=0;for(var g=f.length;this.i<g;this.i++)e=f[this.i],"DECLARE"===e.opcode?this[e.name]=e.value:this[e.opcode].apply(this,e.args),e.opcode!==this.stripNext&&(this.stripNext=!1);if(this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new i("Compile completed with content left on stack");return this.createFunctionContext(d)},preamble:function(){var a=[];if(this.isChild)a.push("");else{var b=this.namespace,c="helpers = this.merge(helpers, "+b+".helpers);";this.environment.usePartial&&(c=c+" partials = this.merge(partials, "+b+".partials);"),this.options.data&&(c+=" data = data || {};"),a.push(c)}this.environment.isSimple?a.push(""):a.push(", buffer = "+this.initializeBuffer()),this.lastContext=0,this.source=a},createFunctionContext:function(a){var b=this.stackVars.concat(this.registers.list);if(b.length>0&&(this.source[1]=this.source[1]+", "+b.join(", ")),!this.isChild)for(var c in this.context.aliases)this.context.aliases.hasOwnProperty(c)&&(this.source[1]=this.source[1]+", "+c+"="+this.context.aliases[c]);this.source[1]&&(this.source[1]="var "+this.source[1].substring(2)+";"),this.isChild||(this.source[1]+="\n"+this.context.programs.join("\n")+"\n"),this.environment.isSimple||this.pushSource("return buffer;");for(var d=this.isChild?["depth0","data"]:["Handlebars","depth0","helpers","partials","data"],e=0,f=this.environment.depths.list.length;f>e;e++)d.push("depth"+this.environment.depths.list[e]);var g=this.mergeSource();if(this.isChild||(g=this.compilerInfo()+g),a)return d.push(g),Function.apply(this,d);var i="function "+(this.name||"")+"("+d.join(",")+") {\n  "+g+"}";return h("debug",i+"\n\n"),i},mergeSource:function(){for(var a,b="",c=0,d=this.source.length;d>c;c++){var e=this.source[c];e.appendToBuffer?a=a?a+"\n    + "+e.content:e.content:(a&&(b+="buffer += "+a+";\n  ",a=void 0),b+=e+"\n  ")}return b},blockValue:function(){this.context.aliases.blockHelperMissing="helpers.blockHelperMissing";var a=["depth0"];this.setupParams(0,a),this.replaceStack(function(b){return a.splice(1,0,b),"blockHelperMissing.call("+a.join(", ")+")"})},ambiguousBlockValue:function(){this.context.aliases.blockHelperMissing="helpers.blockHelperMissing";var a=["depth0"];this.setupParams(0,a);var b=this.topStack();a.splice(1,0,b),this.pushSource("if (!"+this.lastHelper+") { "+b+" = blockHelperMissing.call("+a.join(", ")+"); }")},appendContent:function(a){this.pendingContent&&(a=this.pendingContent+a),this.stripNext&&(a=a.replace(/^\s+/,"")),this.pendingContent=a},strip:function(){this.pendingContent&&(this.pendingContent=this.pendingContent.replace(/\s+$/,"")),this.stripNext="strip"},append:function(){this.flushInline();var a=this.popStack();this.pushSource("if("+a+" || "+a+" === 0) { "+this.appendToBuffer(a)+" }"),this.environment.isSimple&&this.pushSource("else { "+this.appendToBuffer("''")+" }")},appendEscaped:function(){this.context.aliases.escapeExpression="this.escapeExpression",this.pushSource(this.appendToBuffer("escapeExpression("+this.popStack()+")"))},getContext:function(a){this.lastContext!==a&&(this.lastContext=a)},lookupOnContext:function(a){this.push(this.nameLookup("depth"+this.lastContext,a,"context"))},pushContext:function(){this.pushStackLiteral("depth"+this.lastContext)},resolvePossibleLambda:function(){this.context.aliases.functionType='"function"',this.replaceStack(function(a){return"typeof "+a+" === functionType ? "+a+".apply(depth0) : "+a})},lookup:function(a){this.replaceStack(function(b){return b+" == null || "+b+" === false ? "+b+" : "+this.nameLookup(b,a,"context")})},lookupData:function(){this.pushStackLiteral("data")},pushStringParam:function(a,b){this.pushStackLiteral("depth"+this.lastContext),this.pushString(b),"sexpr"!==b&&("string"==typeof a?this.pushString(a):this.pushStackLiteral(a))},emptyHash:function(){this.pushStackLiteral("{}"),this.options.stringParams&&(this.push("{}"),this.push("{}"))},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[]}},popHash:function(){var a=this.hash;this.hash=this.hashes.pop(),this.options.stringParams&&(this.push("{"+a.contexts.join(",")+"}"),this.push("{"+a.types.join(",")+"}")),this.push("{\n    "+a.values.join(",\n    ")+"\n  }")},pushString:function(a){this.pushStackLiteral(this.quotedString(a))},push:function(a){return this.inlineStack.push(a),a},pushLiteral:function(a){this.pushStackLiteral(a)},pushProgram:function(a){null!=a?this.pushStackLiteral(this.programExpression(a)):this.pushStackLiteral(null)},invokeHelper:function(a,b,c){this.context.aliases.helperMissing="helpers.helperMissing",this.useRegister("helper");var d=this.lastHelper=this.setupHelper(a,b,!0),e=this.nameLookup("depth"+this.lastContext,b,"context"),f="helper = "+d.name+" || "+e;d.paramsInit&&(f+=","+d.paramsInit),this.push("("+f+",helper ? helper.call("+d.callParams+") : helperMissing.call("+d.helperMissingParams+"))"),c||this.flushInline()},invokeKnownHelper:function(a,b){var c=this.setupHelper(a,b);this.push(c.name+".call("+c.callParams+")")},invokeAmbiguous:function(a,b){this.context.aliases.functionType='"function"',this.useRegister("helper"),this.emptyHash();var c=this.setupHelper(0,a,b),d=this.lastHelper=this.nameLookup("helpers",a,"helper"),e=this.nameLookup("depth"+this.lastContext,a,"context"),f=this.nextStack();c.paramsInit&&this.pushSource(c.paramsInit),this.pushSource("if (helper = "+d+") { "+f+" = helper.call("+c.callParams+"); }"),this.pushSource("else { helper = "+e+"; "+f+" = typeof helper === functionType ? helper.call("+c.callParams+") : helper; }")},invokePartial:function(a){var b=[this.nameLookup("partials",a,"partial"),"'"+a+"'",this.popStack(),"helpers","partials"];this.options.data&&b.push("data"),this.context.aliases.self="this",this.push("self.invokePartial("+b.join(", ")+")")},assignToHash:function(a){var b,c,d=this.popStack();this.options.stringParams&&(c=this.popStack(),b=this.popStack());var e=this.hash;b&&e.contexts.push("'"+a+"': "+b),c&&e.types.push("'"+a+"': "+c),e.values.push("'"+a+"': ("+d+")")},compiler:d,compileChildren:function(a,b){for(var c,d,e=a.children,f=0,g=e.length;g>f;f++){c=e[f],d=new this.compiler;var h=this.matchExistingProgram(c);null==h?(this.context.programs.push(""),h=this.context.programs.length,c.index=h,c.name="program"+h,this.context.programs[h]=d.compile(c,b,this.context),this.context.environments[h]=c):(c.index=h,c.name="program"+h)}},matchExistingProgram:function(a){for(var b=0,c=this.context.environments.length;c>b;b++){var d=this.context.environments[b];if(d&&d.equals(a))return b}},programExpression:function(a){if(this.context.aliases.self="this",null==a)return"self.noop";for(var b,c=this.environment.children[a],d=c.depths.list,e=[c.index,c.name,"data"],f=0,g=d.length;g>f;f++)b=d[f],1===b?e.push("depth0"):e.push("depth"+(b-1));return(0===d.length?"self.program(":"self.programWithDepth(")+e.join(", ")+")"},register:function(a,b){this.useRegister(a),this.pushSource(a+" = "+b+";")},useRegister:function(a){this.registers[a]||(this.registers[a]=!0,this.registers.list.push(a))},pushStackLiteral:function(a){return this.push(new c(a))},pushSource:function(a){this.pendingContent&&(this.source.push(this.appendToBuffer(this.quotedString(this.pendingContent))),this.pendingContent=void 0),a&&this.source.push(a)},pushStack:function(a){this.flushInline();var b=this.incrStack();return a&&this.pushSource(b+" = "+a+";"),this.compileStack.push(b),b},replaceStack:function(a){var b,d,e,f="",g=this.isInline();if(g){var h=this.popStack(!0);if(h instanceof c)b=h.value,e=!0;else{d=!this.stackSlot;var i=d?this.incrStack():this.topStackName();f="("+this.push(i)+" = "+h+"),",b=this.topStack()}}else b=this.topStack();var j=a.call(this,b);return g?(e||this.popStack(),d&&this.stackSlot--,this.push("("+f+j+")")):(/^stack/.test(b)||(b=this.nextStack()),this.pushSource(b+" = ("+f+j+");")),b},nextStack:function(){return this.pushStack()},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var a=this.inlineStack;if(a.length){this.inlineStack=[];for(var b=0,d=a.length;d>b;b++){var e=a[b];e instanceof c?this.compileStack.push(e):this.pushStack(e)}}},isInline:function(){return this.inlineStack.length},popStack:function(a){var b=this.isInline(),d=(b?this.inlineStack:this.compileStack).pop();if(!a&&d instanceof c)return d.value;if(!b){if(!this.stackSlot)throw new i("Invalid stack pop");this.stackSlot--}return d},topStack:function(a){var b=this.isInline()?this.inlineStack:this.compileStack,d=b[b.length-1];return!a&&d instanceof c?d.value:d},quotedString:function(a){return'"'+a.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},setupHelper:function(a,b,c){var d=[],e=this.setupParams(a,d,c),f=this.nameLookup("helpers",b,"helper");return{params:d,paramsInit:e,name:f,callParams:["depth0"].concat(d).join(", "),helperMissingParams:c&&["depth0",this.quotedString(b)].concat(d).join(", ")}},setupOptions:function(a,b){var c,d,e,f=[],g=[],h=[];f.push("hash:"+this.popStack()),this.options.stringParams&&(f.push("hashTypes:"+this.popStack()),f.push("hashContexts:"+this.popStack())),d=this.popStack(),e=this.popStack(),(e||d)&&(e||(this.context.aliases.self="this",e="self.noop"),d||(this.context.aliases.self="this",d="self.noop"),f.push("inverse:"+d),f.push("fn:"+e));for(var i=0;a>i;i++)c=this.popStack(),b.push(c),this.options.stringParams&&(h.push(this.popStack()),g.push(this.popStack()));return this.options.stringParams&&(f.push("contexts:["+g.join(",")+"]"),f.push("types:["+h.join(",")+"]")),this.options.data&&f.push("data:data"),f},setupParams:function(a,b,c){var d="{"+this.setupOptions(a,b).join(",")+"}";return c?(this.useRegister("options"),b.push("options"),"options="+d):(b.push(d),"")}};for(var j="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield".split(" "),k=d.RESERVED_WORDS={},l=0,m=j.length;m>l;l++)k[j[l]]=!0;return d.isValidJavaScriptVariableName=function(a){return!d.RESERVED_WORDS[a]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(a)?!0:!1},e=d}(d,c),l=function(a,b,c,d,e){"use strict";var f,g=a,h=b,i=c.parser,j=c.parse,k=d.Compiler,l=d.compile,m=d.precompile,n=e,o=g.create,p=function(){var a=o();return a.compile=function(b,c){return l(b,c,a)},a.precompile=function(b,c){return m(b,c,a)},a.AST=h,a.Compiler=k,a.JavaScriptCompiler=n,a.Parser=i,a.parse=j,a};return g=p(),g.create=p,f=g}(f,g,i,j,k);return l}();
/*!
Alpaca Version 1.1.3

Copyright 2014 Gitana Software, Inc.

Licensed under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance with the License. 

You may obtain a copy of the License at 
	http://www.apache.org/licenses/LICENSE-2.0 

Unless required by applicable law or agreed to in writing, software 
distributed under the License is distributed on an "AS IS" BASIS, 
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
See the License for the specific language governing permissions and 
limitations under the License. 

For more information, please contact Gitana Software, Inc. at this
address:

  info@gitanasoftware.com
*/
(function(name,global,definition){global[name]=definition();})("Base",this,function(){var Base=function(){};Base.extend=function(_instance,_static){var extend=Base.prototype.extend;Base._prototyping=true;var proto=new this();extend.call(proto,_instance);proto.base=function(){};delete Base._prototyping;var constructor=proto.constructor;var klass=proto.constructor=function(){if(!Base._prototyping){if(this._constructing||this.constructor===klass){this._constructing=true;constructor.apply(this,arguments);delete this._constructing;}else{if(arguments[0]!==null){return(arguments[0].extend||extend).call(arguments[0],proto);}}}};klass.ancestor=this;klass.extend=this.extend;klass.forEach=this.forEach;klass.implement=this.implement;klass.prototype=proto;klass.toString=this.toString;klass.valueOf=function(type){return(type==="object")?klass:constructor.valueOf();};extend.call(klass,_static);if(typeof klass.init==="function"){klass.init();}return klass;};Base.prototype={extend:function(source,value){if(arguments.length>1){var ancestor=this[source];if(ancestor&&(typeof value==="function")&&(!ancestor.valueOf||ancestor.valueOf()!==value.valueOf())&&/\bbase\b/.test(value)){var method=value.valueOf();value=function(){var previous=this.base||Base.prototype.base;this.base=ancestor;var returnValue=method.apply(this,arguments);this.base=previous;return returnValue;};value.valueOf=function(type){return(type==="object")?value:method;};value.toString=Base.toString;}this[source]=value;}else{if(source){var extend=Base.prototype.extend;if(!Base._prototyping&&typeof this!=="function"){extend=this.extend||extend;}var proto={toSource:null};var hidden=["constructor","toString","valueOf"];for(var i=Base._prototyping?0:1;i<hidden.length;i++){var h=hidden[i];if(source[h]!==proto[h]){extend.call(this,h,source[h]);}}for(var key in source){if(!proto[key]){extend.call(this,key,source[key]);}}}}return this;}};Base=Base.extend({constructor:function(){this.extend(arguments[0]);}},{ancestor:Object,version:"1.1",forEach:function(object,block,context){for(var key in object){if(this.prototype[key]===undefined){block.call(context,object[key],key,object);}}},implement:function(){for(var i=0;i<arguments.length;i++){if(typeof arguments[i]==="function"){arguments[i](this.prototype);}else{this.prototype.extend(arguments[i]);}}return this;},toString:function(){return String(this.valueOf());}});return Base;});if(typeof JSON!=="object"){JSON={};}(function(){function f(n){return n<10?"0"+n:n;}if(typeof Date.prototype.toJSON!=="function"){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null;};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};}var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==="string"?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4);})+'"':'"'+string+'"';}function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==="object"&&typeof value.toJSON==="function"){value=value.toJSON(key);}if(typeof rep==="function"){value=rep.call(holder,key,value);}switch(typeof value){case"string":return quote(value);case"number":return isFinite(value)?String(value):"null";case"boolean":case"null":return String(value);case"object":if(!value){return"null";}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==="[object Array]"){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||"null";}v=partial.length===0?"[]":gap?"[\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"]":"["+partial.join(",")+"]";gap=mind;return v;}if(rep&&typeof rep==="object"){length=rep.length;for(i=0;i<length;i+=1){if(typeof rep[i]==="string"){k=rep[i];v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v);}}}}else{for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v);}}}}v=partial.length===0?"{}":gap?"{\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"}":"{"+partial.join(",")+"}";gap=mind;return v;}}if(typeof JSON.stringify!=="function"){JSON.stringify=function(value,replacer,space){var i;gap="";indent="";if(typeof space==="number"){for(i=0;i<space;i+=1){indent+=" ";}}else{if(typeof space==="string"){indent=space;}}rep=replacer;if(replacer&&typeof replacer!=="function"&&(typeof replacer!=="object"||typeof replacer.length!=="number")){throw new Error("JSON.stringify");}return str("",{"":value});};}if(typeof JSON.parse!=="function"){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value==="object"){for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}}return reviver.call(holder,key,value);}text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4);});}if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver==="function"?walk({"":j},""):j;}throw new SyntaxError("JSON.parse");};}}());
/*!
 * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
 *    (http://www.json.com/json-schema-proposal/)
 *
 * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
 * Licensed under the MIT (MIT-LICENSE.txt) license.
 To use the validator call the validate function with an instance object and an optional schema object.
 If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
 that schema will be used to validate and the schema parameter is not necessary (if both exist,
 both validations will occur).
 The validate method will return an array of validation errors. If there are no errors, then an
 empty list will be returned. A validation error will have two properties:
 "property" which indicates which property had the error
 "message" which indicates what the error was
 */
(function($){Validator={validate:function(instance,schema){return Validator._validate(instance,schema,{changing:false});},checkPropertyChange:function(value,schema,property){return Validator._validate(value,schema,{changing:property||"property"});},_validate:function(instance,schema,options){if(!options){options={};}var _changing=options.changing;var errors=[];function checkProp(value,schema,path,i){var l;path+=path?typeof i=="number"?"["+i+"]":typeof i=="undefined"?"":"."+i:i;function addError(message){errors.push({property:path,message:message});}if((typeof schema!="object"||schema instanceof Array)&&(path||typeof schema!="function")&&!(schema&&schema.type)){if(typeof schema=="function"){if(!(value instanceof schema)){addError("is not an instance of the class/constructor "+schema.name);}}else{if(schema){addError("Invalid schema/property definition "+schema);}}return null;}if(_changing&&schema.readonly){addError("is a readonly field, it can not be changed");}if(schema["extends"]){checkProp(value,schema["extends"],path,i);}function checkType(type,value){if(type){if(typeof type=="string"&&type!="any"&&(type=="null"?value!==null:typeof value!=type)&&!(value instanceof Array&&type=="array")&&!(value instanceof Date&&type=="date")&&!(type=="integer"&&value%1===0)){return[{property:path,message:(typeof value)+" value found, but a "+type+" is required"}];}if(type instanceof Array){var unionErrors=[];for(var j=0;j<type.length;j++){if(!(unionErrors=checkType(type[j],value)).length){break;}}if(unionErrors.length){return unionErrors;}}else{if(typeof type=="object"){var priorErrors=errors;errors=[];checkProp(value,type,path);var theseErrors=errors;errors=priorErrors;return theseErrors;}}}return[];}if(value===undefined){if(schema.required){addError("is missing and it is required");}}else{errors=errors.concat(checkType(schema.type,value));if(schema.disallow&&!checkType(schema.disallow,value).length){addError(" disallowed value was matched");}if(value!==null){if(value instanceof Array){if(schema.items){var itemsIsArray=schema.items instanceof Array;var propDef=schema.items;for(i=0,l=value.length;i<l;i+=1){if(itemsIsArray){propDef=schema.items[i];}if(options.coerce){value[i]=options.coerce(value[i],propDef);}errors.concat(checkProp(value[i],propDef,path,i));}}if(schema.minItems&&value.length<schema.minItems){addError("There must be a minimum of "+schema.minItems+" in the array");}if(schema.maxItems&&value.length>schema.maxItems){addError("There must be a maximum of "+schema.maxItems+" in the array");}}else{if(schema.properties||schema.additionalProperties){errors.concat(checkObj(value,schema.properties,path,schema.additionalProperties));}}if(schema.pattern&&typeof value=="string"&&!value.match(schema.pattern)){addError("does not match the regex pattern "+schema.pattern);}if(schema.maxLength&&typeof value=="string"&&value.length>schema.maxLength){addError("may only be "+schema.maxLength+" characters long");}if(schema.minLength&&typeof value=="string"&&value.length<schema.minLength){addError("must be at least "+schema.minLength+" characters long");}if(typeof schema.minimum!==undefined&&typeof value==typeof schema.minimum&&schema.minimum>value){addError("must have a minimum value of "+schema.minimum);}if(typeof schema.maximum!==undefined&&typeof value==typeof schema.maximum&&schema.maximum<value){addError("must have a maximum value of "+schema.maximum);}if(schema["enum"]){var enumer=schema["enum"];l=enumer.length;var found;for(var j=0;j<l;j++){if(enumer[j]===value){found=1;break;}}if(!found){addError("does not have a value in the enumeration "+enumer.join(", "));}}if(typeof schema.maxDecimal=="number"&&(value.toString().match(new RegExp("\\.[0-9]{"+(schema.maxDecimal+1)+",}")))){addError("may only have "+schema.maxDecimal+" digits of decimal places");}}}return null;}function checkObj(instance,objTypeDef,path,additionalProp){if(typeof objTypeDef=="object"){if(typeof instance!="object"||instance instanceof Array){errors.push({property:path,message:"an object is required"});}for(var i in objTypeDef){if(objTypeDef.hasOwnProperty(i)){var value=instance[i];if(value===undefined&&options.existingOnly){continue;}var propDef=objTypeDef[i];if(value===undefined&&propDef["default"]){value=instance[i]=propDef["default"];}if(options.coerce&&i in instance){value=instance[i]=options.coerce(value,propDef);}checkProp(value,propDef,path,i);}}}for(i in instance){if(instance.hasOwnProperty(i)&&!(i.charAt(0)=="_"&&i.charAt(1)=="_")&&objTypeDef&&!objTypeDef[i]&&additionalProp===false){if(options.filter){delete instance[i];continue;}else{errors.push({property:path,message:(typeof value)+"The property "+i+" is not defined in the schema and the schema does not allow additional properties"});}}var requires=objTypeDef&&objTypeDef[i]&&objTypeDef[i].requires;if(requires&&!(requires in instance)){errors.push({property:path,message:"the presence of the property "+i+" requires that "+requires+" also be present"});}value=instance[i];if(additionalProp&&(!(objTypeDef&&typeof objTypeDef=="object")||!(i in objTypeDef))){if(options.coerce){value=instance[i]=options.coerce(value,additionalProp);}checkProp(value,additionalProp,path,i);}if(!_changing&&value&&value.$schema){errors=errors.concat(checkProp(value,value.$schema,path,i));}}return errors;}if(schema){checkProp(instance,schema,"",_changing||"");}if(!_changing&&instance&&instance.$schema){checkProp(instance,instance.$schema,"","");}return{valid:!errors.length,errors:errors};},mustBeValid:function(result){if(!result.valid){throw new TypeError(result.errors.map(function(error){return"for property "+error.property+": "+error.message;}).join(", \n"));}}};String.type="string";Boolean.type="boolean";Number.type="number";Integer={type:"integer"};Object.type="object";Array.type="array";Date.type="date";$.validator=window.Validator=Validator;})(jQuery);
/*!
 * jQuery Templates Plugin 1.0.0pre
 * http://github.com/jquery/jquery-tmpl
 * Requires jQuery 1.4.2
 *
 * Copyright 2011, Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */
(function(jQuery,undefined){var oldManip=jQuery.fn.domManip,tmplItmAtt="_tmplitem",htmlExpr=/^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,newTmplItems={},wrappedItems={},appendToTmplItems,topTmplItem={key:0,data:{}},itemKey=0,cloneIndex=0,stack=[];function newTmplItem(options,parentItem,fn,data){var newItem={data:data||(data===0||data===false)?data:(parentItem?parentItem.data:{}),_wrap:parentItem?parentItem._wrap:null,tmpl:null,parent:parentItem||null,nodes:[],calls:tiCalls,nest:tiNest,wrap:tiWrap,html:tiHtml,update:tiUpdate};if(options){jQuery.extend(newItem,options,{nodes:[],parent:parentItem});}if(fn){newItem.tmpl=fn;newItem._ctnt=newItem._ctnt||newItem.tmpl(jQuery,newItem);newItem.key=++itemKey;(stack.length?wrappedItems:newTmplItems)[itemKey]=newItem;}return newItem;}jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(selector){var ret=[],insert=jQuery(selector),elems,i,l,tmplItems,parent=this.length===1&&this[0].parentNode;appendToTmplItems=newTmplItems||{};if(parent&&parent.nodeType===11&&parent.childNodes.length===1&&insert.length===1){insert[original](this[0]);ret=this;}else{for(i=0,l=insert.length;i<l;i++){cloneIndex=i;elems=(i>0?this.clone(true):this).get();jQuery(insert[i])[original](elems);ret=ret.concat(elems);}cloneIndex=0;ret=this.pushStack(ret,name,insert.selector);}tmplItems=appendToTmplItems;appendToTmplItems=null;jQuery.tmpl.complete(tmplItems);return ret;};});jQuery.fn.extend({tmpl:function(data,options,parentItem){return jQuery.tmpl(this[0],data,options,parentItem);},tmplItem:function(){return jQuery.tmplItem(this[0]);},template:function(name){return jQuery.template(name,this[0]);},domManip:function(args,table,callback,options){if(args[0]&&jQuery.isArray(args[0])){var dmArgs=jQuery.makeArray(arguments),elems=args[0],elemsLength=elems.length,i=0,tmplItem;while(i<elemsLength&&!(tmplItem=jQuery.data(elems[i++],"tmplItem"))){}if(tmplItem&&cloneIndex){dmArgs[2]=function(fragClone){jQuery.tmpl.afterManip(this,fragClone,callback);};}oldManip.apply(this,dmArgs);}else{oldManip.apply(this,arguments);}cloneIndex=0;if(!appendToTmplItems){jQuery.tmpl.complete(newTmplItems);}return this;}});jQuery.extend({tmpl:function(tmpl,data,options,parentItem){var ret,topLevel=!parentItem;if(topLevel){parentItem=topTmplItem;tmpl=jQuery.template[tmpl]||jQuery.template(null,tmpl);wrappedItems={};}else{if(!tmpl){tmpl=parentItem.tmpl;newTmplItems[parentItem.key]=parentItem;parentItem.nodes=[];if(parentItem.wrapped){updateWrapped(parentItem,parentItem.wrapped);}return jQuery(build(parentItem,null,parentItem.tmpl(jQuery,parentItem)));}}if(!tmpl){return[];}if(typeof data==="function"){data=data.call(parentItem||{});}if(options&&options.wrapped){updateWrapped(options,options.wrapped);}ret=jQuery.isArray(data)?jQuery.map(data,function(dataItem){return dataItem?newTmplItem(options,parentItem,tmpl,dataItem):null;}):[newTmplItem(options,parentItem,tmpl,data)];return topLevel?jQuery(build(parentItem,null,ret)):ret;},tmplItem:function(elem){var tmplItem;if(elem instanceof jQuery){elem=elem[0];}while(elem&&elem.nodeType===1&&!(tmplItem=jQuery.data(elem,"tmplItem"))&&(elem=elem.parentNode)){}return tmplItem||topTmplItem;},template:function(name,tmpl){if(tmpl){if(typeof tmpl==="string"){tmpl=buildTmplFn(tmpl);}else{if(tmpl instanceof jQuery){tmpl=tmpl[0]||{};}}if(tmpl.nodeType){tmpl=jQuery.data(tmpl,"tmpl")||jQuery.data(tmpl,"tmpl",buildTmplFn(tmpl.innerHTML));}return typeof name==="string"?(jQuery.template[name]=tmpl):tmpl;}return name?(typeof name!=="string"?jQuery.template(null,name):(jQuery.template[name]||jQuery.template(null,htmlExpr.test(name)?name:jQuery(name)))):null;},encode:function(text){return(""+text).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;");}});jQuery.extend(jQuery.tmpl,{tag:{"tmpl":{_default:{$2:"null"},open:"if($notnull_1){__=__.concat($item.nest($1,$2));}"},"wrap":{_default:{$2:"null"},open:"$item.calls(__,$1,$2);__=[];",close:"call=$item.calls();__=call._.concat($item.wrap(call,__));"},"each":{_default:{$2:"$index, $value"},open:"if($notnull_1){$.each($1a,function($2){with(this){",close:"}});}"},"if":{open:"if(($notnull_1) && $1a){",close:"}"},"else":{_default:{$1:"true"},open:"}else if(($notnull_1) && $1a){"},"html":{open:"if($notnull_1){__.push($1a);}"},"=":{_default:{$1:"$data"},open:"if($notnull_1){__.push($.encode($1a));}"},"!":{open:""}},complete:function(items){newTmplItems={};},afterManip:function afterManip(elem,fragClone,callback){var content=fragClone.nodeType===11?jQuery.makeArray(fragClone.childNodes):fragClone.nodeType===1?[fragClone]:[];callback.call(elem,fragClone);storeTmplItems(content);cloneIndex++;}});function build(tmplItem,nested,content){var frag,ret=content?jQuery.map(content,function(item){return(typeof item==="string")?(tmplItem.key?item.replace(/(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g,"$1 "+tmplItmAtt+'="'+tmplItem.key+'" $2'):item):build(item,tmplItem,item._ctnt);}):tmplItem;if(nested){return ret;}ret=ret.join("");ret.replace(/^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/,function(all,before,middle,after){frag=jQuery(middle).get();storeTmplItems(frag);if(before){frag=unencode(before).concat(frag);}if(after){frag=frag.concat(unencode(after));}});return frag?frag:unencode(ret);}function unencode(text){var el=document.createElement("div");el.innerHTML=text;return jQuery.makeArray(el.childNodes);}function buildTmplFn(markup){return new Function("jQuery","$item","var $=jQuery,call,__=[],$data=$item.data;"+"with($data){__.push('"+jQuery.trim(markup).replace(/([\\'])/g,"\\$1").replace(/[\r\t\n]/g," ").replace(/\$\{([^\}]*)\}/g,"{{= $1}}").replace(/\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,function(all,slash,type,fnargs,target,parens,args){var tag=jQuery.tmpl.tag[type],def,expr,exprAutoFnDetect;if(!tag){throw"Unknown template tag: "+type;}def=tag._default||[];if(parens&&!/\w$/.test(target)){target+=parens;parens="";}if(target){target=unescape(target);args=args?(","+unescape(args)+")"):(parens?")":"");expr=parens?(target.indexOf(".")>-1?target+unescape(parens):("("+target+").call($item"+args)):target;exprAutoFnDetect=parens?expr:"(typeof("+target+")==='function'?("+target+").call($item):("+target+"))";}else{exprAutoFnDetect=expr=def.$1||"null";}fnargs=unescape(fnargs);return"');"+tag[slash?"close":"open"].split("$notnull_1").join(target?"typeof("+target+")!=='undefined' && ("+target+")!=null":"true").split("$1a").join(exprAutoFnDetect).split("$1").join(expr).split("$2").join(fnargs||def.$2||"")+"__.push('";})+"');}return __;");}function updateWrapped(options,wrapped){options._wrap=build(options,true,jQuery.isArray(wrapped)?wrapped:[htmlExpr.test(wrapped)?wrapped:jQuery(wrapped).html()]).join("");}function unescape(args){return args?args.replace(/\\'/g,"'").replace(/\\\\/g,"\\"):null;}function outerHtml(elem){var div=document.createElement("div");div.appendChild(elem.cloneNode(true));return div.innerHTML;}function storeTmplItems(content){var keySuffix="_"+cloneIndex,elem,elems,newClonedItems={},i,l,m;for(i=0,l=content.length;i<l;i++){if((elem=content[i]).nodeType!==1){continue;}elems=elem.getElementsByTagName("*");for(m=elems.length-1;m>=0;m--){processItemKey(elems[m]);}processItemKey(elem);}function processItemKey(el){var pntKey,pntNode=el,pntItem,tmplItem,key;if((key=el.getAttribute(tmplItmAtt))){while(pntNode.parentNode&&(pntNode=pntNode.parentNode).nodeType===1&&!(pntKey=pntNode.getAttribute(tmplItmAtt))){}if(pntKey!==key){pntNode=pntNode.parentNode?(pntNode.nodeType===11?0:(pntNode.getAttribute(tmplItmAtt)||0)):0;if(!(tmplItem=newTmplItems[key])){tmplItem=wrappedItems[key];tmplItem=newTmplItem(tmplItem,newTmplItems[pntNode]||wrappedItems[pntNode]);tmplItem.key=++itemKey;newTmplItems[itemKey]=tmplItem;}if(cloneIndex){cloneTmplItem(key);}}el.removeAttribute(tmplItmAtt);}else{if(cloneIndex&&(tmplItem=jQuery.data(el,"tmplItem"))){cloneTmplItem(tmplItem.key);newTmplItems[tmplItem.key]=tmplItem;pntNode=jQuery.data(el.parentNode,"tmplItem");pntNode=pntNode?pntNode.key:0;}}if(tmplItem){pntItem=tmplItem;while(pntItem&&pntItem.key!=pntNode){pntItem.nodes.push(el);pntItem=pntItem.parent;}delete tmplItem._ctnt;delete tmplItem._wrap;jQuery.data(el,"tmplItem",tmplItem);}function cloneTmplItem(key){key=key+keySuffix;tmplItem=newClonedItems[key]=(newClonedItems[key]||newTmplItem(tmplItem,newTmplItems[tmplItem.parent.key+keySuffix]||tmplItem.parent));}}}function tiCalls(content,tmpl,data,options){if(!content){return stack.pop();}stack.push({_:content,tmpl:tmpl,item:this,data:data,options:options});}function tiNest(tmpl,data,options){return jQuery.tmpl(jQuery.template(tmpl),data,options,this);}function tiWrap(call,wrapped){var options=call.options||{};options.wrapped=wrapped;return jQuery.tmpl(jQuery.template(call.tmpl),call.data,options,call.item);}function tiHtml(filter,textOnly){var wrapped=this._wrap;return jQuery.map(jQuery(jQuery.isArray(wrapped)?wrapped.join(""):wrapped).filter(filter||"*"),function(e){return textOnly?e.innerText||e.textContent:e.outerHTML||outerHtml(e);});}function tiUpdate(){var coll=this.nodes;jQuery.tmpl(null,null,null,this).insertBefore(coll[0]);jQuery(coll).remove();}})(jQuery);function hoozit(o){if(o.constructor===String){return"string";}else{if(o.constructor===Boolean){return"boolean";}else{if(o.constructor===Number){if(isNaN(o)){return"nan";}else{return"number";}}else{if(typeof o==="undefined"){return"undefined";}else{if(o===null){return"null";}else{if(o instanceof Array){return"array";}else{if(o instanceof Date){return"date";}else{if(o instanceof RegExp){return"regexp";}else{if(typeof o==="object"){return"object";}else{if(o instanceof Function){return"function";}else{return undefined;}}}}}}}}}}}function bindCallbacks(o,callbacks,args){var prop=hoozit(o);if(prop){if(hoozit(callbacks[prop])==="function"){return callbacks[prop].apply(callbacks,args);}else{return callbacks[prop];}}}var equiv=function(){var innerEquiv;var callers=[];var callbacks=function(){function useStrictEquality(b,a){if(b instanceof a.constructor||a instanceof b.constructor){return a==b;}else{return a===b;}}return{"string":useStrictEquality,"boolean":useStrictEquality,"number":useStrictEquality,"null":useStrictEquality,"undefined":useStrictEquality,"nan":function(b){return isNaN(b);},"date":function(b,a){return hoozit(b)==="date"&&a.valueOf()===b.valueOf();},"regexp":function(b,a){return hoozit(b)==="regexp"&&a.source===b.source&&a.global===b.global&&a.ignoreCase===b.ignoreCase&&a.multiline===b.multiline;},"function":function(){var caller=callers[callers.length-1];return caller!==Object&&typeof caller!=="undefined";},"array":function(b,a){var i;var len;if(!(hoozit(b)==="array")){return false;}len=a.length;if(len!==b.length){return false;}for(i=0;i<len;i++){if(!innerEquiv(a[i],b[i])){return false;}}return true;},"object":function(b,a){var i;var eq=true;var aProperties=[],bProperties=[];if(a.constructor!==b.constructor){return false;}callers.push(a.constructor);for(i in a){aProperties.push(i);if(!innerEquiv(a[i],b[i])){eq=false;}}callers.pop();for(i in b){bProperties.push(i);}return eq&&innerEquiv(aProperties.sort(),bProperties.sort());}};}();innerEquiv=function(){var args=Array.prototype.slice.apply(arguments);if(args.length<2){return true;}return(function(a,b){if(a===b){return true;}else{if(a===null||b===null||typeof a==="undefined"||typeof b==="undefined"||hoozit(a)!==hoozit(b)){return false;}else{return bindCallbacks(a,callbacks,[b,a]);}}})(args[0],args[1])&&arguments.callee.apply(this,args.splice(1,args.length-1));};return innerEquiv;}();(function($){function getPasteEvent(){var el=document.createElement("input"),name="onpaste";el.setAttribute(name,"");return(typeof el[name]==="function")?"paste":"input";}var pasteEventName=getPasteEvent()+".mask",ua=navigator.userAgent,iPhone=/iphone/i.test(ua),android=/android/i.test(ua),caretTimeoutId;$.mask={definitions:{"9":"[0-9]","a":"[A-Za-z]","*":"[A-Za-z0-9]"},dataName:"rawMaskFn",placeholder:"_"};$.fn.extend({caret:function(begin,end){var range;if(this.length===0||this.is(":hidden")){return;}if(typeof begin=="number"){end=(typeof end==="number")?end:begin;return this.each(function(){if(this.setSelectionRange){this.setSelectionRange(begin,end);}else{if(this.createTextRange){range=this.createTextRange();range.collapse(true);range.moveEnd("character",end);range.moveStart("character",begin);range.select();}}});}else{if(this[0].setSelectionRange){begin=this[0].selectionStart;end=this[0].selectionEnd;}else{if(document.selection&&document.selection.createRange){range=document.selection.createRange();begin=0-range.duplicate().moveStart("character",-100000);end=begin+range.text.length;}}return{begin:begin,end:end};}},unmask:function(){return this.trigger("unmask");},mask:function(mask,settings){var input,defs,tests,partialPosition,firstNonMaskPos,len;if(!mask&&this.length>0){input=$(this[0]);return input.data($.mask.dataName)();}settings=$.extend({placeholder:$.mask.placeholder,completed:null},settings);defs=$.mask.definitions;tests=[];partialPosition=len=mask.length;firstNonMaskPos=null;$.each(mask.split(""),function(i,c){if(c=="?"){len--;partialPosition=i;}else{if(defs[c]){tests.push(new RegExp(defs[c]));if(firstNonMaskPos===null){firstNonMaskPos=tests.length-1;}}else{tests.push(null);}}});return this.trigger("unmask").each(function(){var input=$(this),buffer=$.map(mask.split(""),function(c,i){if(c!="?"){return defs[c]?settings.placeholder:c;}}),focusText=input.val();function seekNext(pos){while(++pos<len&&!tests[pos]){}return pos;}function seekPrev(pos){while(--pos>=0&&!tests[pos]){}return pos;}function shiftL(begin,end){var i,j;if(begin<0){return;}for(i=begin,j=seekNext(end);i<len;i++){if(tests[i]){if(j<len&&tests[i].test(buffer[j])){buffer[i]=buffer[j];buffer[j]=settings.placeholder;}else{break;}j=seekNext(j);}}writeBuffer();input.caret(Math.max(firstNonMaskPos,begin));}function shiftR(pos){var i,c,j,t;for(i=pos,c=settings.placeholder;i<len;i++){if(tests[i]){j=seekNext(i);t=buffer[i];buffer[i]=c;if(j<len&&tests[j].test(t)){c=t;}else{break;}}}}function keydownEvent(e){var k=e.which,pos,begin,end;if(k===8||k===46||(iPhone&&k===127)){pos=input.caret();begin=pos.begin;end=pos.end;if(end-begin===0){begin=k!==46?seekPrev(begin):(end=seekNext(begin-1));end=k===46?seekNext(end):end;}clearBuffer(begin,end);shiftL(begin,end-1);e.preventDefault();}else{if(k==27){input.val(focusText);input.caret(0,checkVal());e.preventDefault();}}}function keypressEvent(e){var k=e.which,pos=input.caret(),p,c,next;if(e.ctrlKey||e.altKey||e.metaKey||k<32){return;}else{if(k){if(pos.end-pos.begin!==0){clearBuffer(pos.begin,pos.end);shiftL(pos.begin,pos.end-1);}p=seekNext(pos.begin-1);if(p<len){c=String.fromCharCode(k);if(tests[p].test(c)){shiftR(p);buffer[p]=c;writeBuffer();next=seekNext(p);if(android){setTimeout($.proxy($.fn.caret,input,next),0);}else{input.caret(next);}if(settings.completed&&next>=len){settings.completed.call(input);}}}e.preventDefault();}}}function clearBuffer(start,end){var i;for(i=start;i<end&&i<len;i++){if(tests[i]){buffer[i]=settings.placeholder;}}}function writeBuffer(){input.val(buffer.join(""));}function checkVal(allow){var test=input.val(),lastMatch=-1,i,c;for(i=0,pos=0;i<len;i++){if(tests[i]){buffer[i]=settings.placeholder;while(pos++<test.length){c=test.charAt(pos-1);if(tests[i].test(c)){buffer[i]=c;lastMatch=i;break;}}if(pos>test.length){break;}}else{if(buffer[i]===test.charAt(pos)&&i!==partialPosition){pos++;lastMatch=i;}}}if(allow){writeBuffer();}else{if(lastMatch+1<partialPosition){input.val("");clearBuffer(0,len);}else{writeBuffer();input.val(input.val().substring(0,lastMatch+1));}}return(partialPosition?i:firstNonMaskPos);}input.data($.mask.dataName,function(){return $.map(buffer,function(c,i){return tests[i]&&c!=settings.placeholder?c:null;}).join("");});if(!input.attr("readonly")){input.one("unmask",function(){input.unbind(".mask").removeData($.mask.dataName);}).bind("focus.mask",function(){clearTimeout(caretTimeoutId);var pos,moveCaret;focusText=input.val();if(focusText===""){clearBuffer(0,len);writeBuffer();pos=0;}else{pos=checkVal();}caretTimeoutId=setTimeout(function(){writeBuffer();if(pos==mask.length){input.caret(0,pos);}else{input.caret(pos);}},10);}).bind("blur.mask",function(){checkVal();if(input.val()!=focusText){input.change();}}).bind("keydown.mask",keydownEvent).bind("keypress.mask",keypressEvent).bind(pasteEventName,function(){setTimeout(function(){var pos=checkVal(true);input.caret(pos);if(settings.completed&&pos==input.val().length){settings.completed.call(input);}},0);});}checkVal();});}});})(jQuery);(function($){var Alpaca;Alpaca=function(){var args=Alpaca.makeArray(arguments);if(args.length===0){return Alpaca.throwDefaultError("You must supply at least one argument which is the element against which to apply the Alpaca generated form");}var el=args[0];var data=null;var schema=null;var options=null;var view=null;var callback=null;var renderedCallback=null;var errorCallback=null;var connector=null;var notTopLevel=false;var isDynamicCreation=false;var initialSettings={};var dataSource=null;var schemaSource=null;var optionsSource=null;var viewSource=null;if(args.length==1){var domElements=$(el).find(":first");var field=null;for(var i=0;i<domElements.length;i++){var domElement=domElements[i];var fieldId=$(domElement).attr("alpaca-field-id");if(fieldId){var _field=Alpaca.fieldInstances[fieldId];if(_field){field=_field;}}}if(field!==null){return field;}else{var domData=$(el).html();$(el).html("");data=domData;}}if(args.length>=2){if(Alpaca.isObject(args[1])){data=args[1].data;schema=args[1].schema;options=args[1].options;view=args[1].view;callback=args[1].render;renderedCallback=args[1].postRender;errorCallback=args[1].error;connector=args[1].connector;dataSource=args[1].dataSource;schemaSource=args[1].schemaSource;optionsSource=args[1].optionsSource;viewSource=args[1].viewSource;if(args[1].ui){initialSettings["ui"]=args[1].ui;}if(args[1].type){initialSettings["type"]=args[1].type;}if(!Alpaca.isEmpty(args[1].notTopLevel)){notTopLevel=args[1].notTopLevel;}if(!Alpaca.isEmpty(args[1].isDynamicCreation)){isDynamicCreation=args[1].isDynamicCreation;}}else{data=args[1];if(Alpaca.isFunction(data)){data=data();}}}if(Alpaca.isEmpty(errorCallback)){errorCallback=Alpaca.defaultErrorCallback;}if(Alpaca.isEmpty(connector)){var connectorClass=Alpaca.getConnectorClass("default");connector=new connectorClass("default");}if(el){if(Alpaca.isString(el)){el=$("#"+el);}}var loadAllConnector=connector;if(notTopLevel){var loadAllConnectorClass=Alpaca.getConnectorClass("default");loadAllConnector=new loadAllConnectorClass("default");}if(!options){options={};}if(Alpaca.isUndefined(options.focus)){options.focus=false;}var _renderedCallback=function(control){if(options&&options.focus){window.setTimeout(function(){if(options.focus===true){if(control.children&&control.children.length>0){if(control.children[0].field&&control.children[0].field){control.children[0].field.focus();}}}else{var child=control.getControlByPath(options.focus);if(child&&child.field&&child.field.length>0){child.field.focus();}}},250);}if(renderedCallback){renderedCallback(control);}};loadAllConnector.loadAll({"data":data,"schema":schema,"options":options,"view":view,"dataSource":dataSource,"schemaSource":schemaSource,"optionsSource":optionsSource,"viewSource":viewSource},function(loadedData,loadedOptions,loadedSchema,loadedView){loadedData=loadedData?loadedData:data;loadedSchema=loadedSchema?loadedSchema:schema;loadedOptions=loadedOptions?loadedOptions:options;loadedView=loadedView?loadedView:view;if(Alpaca.isEmpty(loadedData)){if(Alpaca.isEmpty(loadedSchema)&&(Alpaca.isEmpty(loadedOptions)||Alpaca.isEmpty(loadedOptions.type))){loadedData="";if(Alpaca.isEmpty(loadedOptions)){loadedOptions="text";}else{if(options&&Alpaca.isObject(options)){loadedOptions.type="text";}}}}return Alpaca.init(el,loadedData,loadedOptions,loadedSchema,loadedView,initialSettings,callback,_renderedCallback,connector,errorCallback,isDynamicCreation);},function(loadError){errorCallback(loadError);return null;});return $(el);};Alpaca.Fields={};Alpaca.Connectors={};Alpaca.Extend=$.extend;Alpaca.Create=function(){var args=Array.prototype.slice.call(arguments);args.unshift({});return $.extend.apply(this,args);};Alpaca.Extend(Alpaca,{VERSION:"0.1.0",makeArray:function(nonArray){return Array.prototype.slice.call(nonArray);},isFunction:function(obj){return Object.prototype.toString.call(obj)==="[object Function]";},isString:function(obj){return(typeof obj==="string");},isObject:function(obj){return !Alpaca.isUndefined(obj)&&Object.prototype.toString.call(obj)==="[object Object]";},isPlainObject:function(obj){return $.isPlainObject(obj);},isNumber:function(obj){return(typeof obj==="number");},isArray:function(obj){return obj instanceof Array;},isBoolean:function(obj){return(typeof obj==="boolean");},isUndefined:function(obj){return(typeof obj==="undefined");},trim:function(text){var trimmed=text;if(trimmed&&Alpaca.isString(trimmed)){trimmed=trimmed.replace(/^\s+|\s+$/g,"");}return trimmed;},safeDomParse:function(x){if(x&&Alpaca.isString(x)){x=Alpaca.trim(x);var converted=null;try{converted=$(x);}catch(e){x="<div>"+x+"</div>";converted=$(x).children();}return converted;}return x;},isEmpty:function(obj){return Alpaca.isUndefined(obj)||obj===null;},copyOf:function(thing){var copy=thing;if(Alpaca.isArray(thing)){copy=[];for(var i=0;i<thing.length;i++){copy.push(Alpaca.copyOf(thing[i]));}}else{if(Alpaca.isObject(thing)){if(thing instanceof Date){return new Date(thing.getTime());}else{if(thing instanceof RegExp){return new RegExp(thing);}else{if(thing.nodeType&&"cloneNode" in thing){copy=thing.cloneNode(true);}else{if($.isPlainObject(thing)){copy={};for(var k in thing){if(thing.hasOwnProperty(k)){copy[k]=Alpaca.copyOf(thing[k]);}}}else{}}}}}}return copy;},cloneObject:function(object){return Alpaca.copyOf(object);},spliceIn:function(source,splicePoint,splice){return source.substring(0,splicePoint)+splice+source.substring(splicePoint,source.length);},compactArray:function(arr){var n=[],l=arr.length,i;for(i=0;i<l;i++){if(!lang.isNull(arr[i])&&!lang.isUndefined(arr[i])){n.push(arr[i]);}}return n;},removeAccents:function(str){return str.replace(/[àáâãäå]/g,"a").replace(/[èéêë]/g,"e").replace(/[ìíîï]/g,"i").replace(/[òóôõö]/g,"o").replace(/[ùúûü]/g,"u").replace(/[ýÿ]/g,"y").replace(/[ñ]/g,"n").replace(/[ç]/g,"c").replace(/[œ]/g,"oe").replace(/[æ]/g,"ae");},indexOf:function(el,arr,fn){var l=arr.length,i;if(!Alpaca.isFunction(fn)){fn=function(elt,arrElt){return elt===arrElt;};}for(i=0;i<l;i++){if(fn.call({},el,arr[i])){return i;}}return -1;},uniqueIdCounter:0,defaultLocale:"en_US",setDefaultLocale:function(locale){this.defaultLocale=locale;},defaultSchemaFieldMapping:{},registerDefaultSchemaFieldMapping:function(schemaType,fieldType){if(schemaType&&fieldType){this.defaultSchemaFieldMapping[schemaType]=fieldType;}},defaultFormatFieldMapping:{},registerDefaultFormatFieldMapping:function(format,fieldType){if(format&&fieldType){this.defaultFormatFieldMapping[format]=fieldType;}},getSchemaType:function(data){if(Alpaca.isEmpty(data)){return"string";}if(Alpaca.isObject(data)){return"object";}if(Alpaca.isString(data)){return"string";}if(Alpaca.isNumber(data)){return"number";}if(Alpaca.isArray(data)){return"array";}if(Alpaca.isBoolean(data)){return"boolean";}if(typeof data=="object"){return"object";}},views:{},viewIdPrefix:"VIEW_",isValidViewId:function(id){return Alpaca.startsWith(id,this.viewIdPrefix);},generateViewId:function(){return this.viewIdPrefix+this.generateId();},registerView:function(viewObject){var id=viewObject.id;if(!id){return Alpaca.throwDefaultError("Cannot register view with missing view id: "+id);}var existingView=this.views[id];if(existingView){Alpaca.mergeObject(existingView,viewObject);}else{this.views[id]=viewObject;}},defaultView:"VIEW_WEB_EDIT",setDefaultView:function(viewId){if(viewId&&this.views.hasOwnProperty(viewId)){this.defaultView=viewId;}},getNormalizedView:function(viewId){return this.normalizedViews[viewId];},lookupNormalizedView:function(ui,type){var theViewId=null;for(var viewId in this.normalizedViews){var view=this.normalizedViews[viewId];if(view.ui==ui&&view.type==type){theViewId=viewId;break;}}return theViewId;},registerTemplate:function(templateId,template,viewId){if(!viewId){viewId="VIEW_BASE";}if(!this.views[viewId]){this.views[viewId]={};this.views[viewId].id=viewId;}if(!this.views[viewId].templates){this.views[viewId].templates={};}this.views[viewId].templates[templateId]=template;},registerTemplates:function(templates,viewId){for(var templateId in templates){this.registerTemplate(templateId,templates[templateId],viewId);}},registerMessage:function(messageId,message,viewId){if(!viewId){viewId="VIEW_BASE";}if(!this.views[viewId]){this.views[viewId]={};this.views[viewId].id=viewId;}if(!this.views[viewId].messages){this.views[viewId].messages={};}this.views[viewId].messages[messageId]=message;},registerMessages:function(messages,viewId){for(var messageId in messages){if(messages.hasOwnProperty(messageId)){this.registerMessage(messageId,messages[messageId],viewId);}}},fieldTemplatePostfix:{"controlFieldMessageContainer":"-controlfield-message-container","controlFieldLabel":"-controlfield-label","controlFieldContainer":"-controlfield-container","controlFieldHelper":"-controlfield-helper","fieldSetLegend":"-fieldset-legend","fieldSetItemsContainer":"-fieldset-items-container","fieldSetHelper":"-fieldset-helper","fieldSetOuterEl":"-fieldset","formButtonsContainer":"-form-buttons-container","formFieldsContainer":"-form-fields-container"},fieldTemplate:function(object,name,wrap){var _this=this;var field=object.data;var view=object.data.view;var html="";if(!name){name="controlFieldLabel";}var templateDescriptor=this.getTemplateDescriptor(view,name,field);if(wrap){var template=templateDescriptor.template.value;if($(".alpaca"+this.fieldTemplatePostfix[name],Alpaca.safeDomParse(template)).length===0){if(this.fieldTemplatePostfix[name]){template=Alpaca.safeDomParse(template).addClass("alpaca"+this.fieldTemplatePostfix[name]);}}html=Alpaca.safeDomParse(template).outerHTML(true);}else{var label=view.tmpl(templateDescriptor,object.data);if(label){if(this.fieldTemplatePostfix[name]){if($(".alpaca"+this.fieldTemplatePostfix[name],label).length===0){label.addClass("alpaca"+this.fieldTemplatePostfix[name]);}if(!label.attr("id")){label.attr("id",object.data.id+this.fieldTemplatePostfix[name]);}}html=label.outerHTML(true);}else{html="";}}return html;},defaultDateFormat:"mm/dd/yy",regexps:{"email":/^[a-z0-9!\#\$%&'\*\-\/=\?\+\-\^_`\{\|\}~]+(?:\.[a-z0-9!\#\$%&'\*\-\/=\?\+\-\^_`\{\|\}~]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,6}$/i,"url":/^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(\:[0-9]{1,5})?(([0-9]{1,5})?\/.*)?$/i,"password":/^[0-9a-zA-Z\x20-\x7E]*$/,"date":/^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.]\d\d$/,"integer":/^([\+\-]?([1-9]\d*)|0)$/,"number":/^([\+\-]?((([0-9]+(\.)?)|([0-9]*\.[0-9]+))([eE][+-]?[0-9]+)?))$/,"phone":/^(\D?(\d{3})\D?\D?(\d{3})\D?(\d{4}))?$/,"ipv4":/^(?:1\d?\d?|2(?:[0-4]\d?|[6789]|5[0-5]?)?|[3-9]\d?|0)(?:\.(?:1\d?\d?|2(?:[0-4]\d?|[6789]|5[0-5]?)?|[3-9]\d?|0)){3}$/,"zipcode-five":/^(\d{5})?$/,"zipcode-nine":/^(\d{5}(-\d{4})?)?$/},fieldInstances:{},fieldClassRegistry:{},registerFieldClass:function(type,fieldClass){this.fieldClassRegistry[type]=fieldClass;},getFieldClass:function(type){return this.fieldClassRegistry[type];},getFieldClassType:function(fieldClass){for(var type in this.fieldClassRegistry){if(this.fieldClassRegistry.hasOwnProperty(type)){if(this.fieldClassRegistry[type]==fieldClass){return type;}}}return null;},connectorClassRegistry:{},registerConnectorClass:function(type,connectorClass){this.connectorClassRegistry[type]=connectorClass;},getConnectorClass:function(type){return this.connectorClassRegistry[type];},replaceAll:function(text,replace,with_this){return text.replace(new RegExp(replace,"g"),with_this);},element:function(tag,domAttributes,styleAttributes,classNames){var el=$("<"+tag+"/>");if(domAttributes){el.attr(domAttributes);}if(styleAttributes){el.css(styleAttributes);}if(classNames){for(var className in classNames){el.addClass(className);}}},elementFromTemplate:function(template,substitutions){var html=template;if(substitutions){for(var x in substitutions){html=Alpaca.replaceAll(html,"${"+x+"}",substitutions[x]);}}return $(html);},generateId:function(){Alpaca.uniqueIdCounter++;return"alpaca"+Alpaca.uniqueIdCounter;},later:function(when,o,fn,data,periodic){when=when||0;o=o||{};var m=fn,d=$.makeArray(data),f,r;if(typeof fn==="string"){m=o[fn];}if(!m){throw {name:"TypeError",message:"The function is undefined."};}f=function(){m.apply(o,d);};r=(periodic)?setInterval(f,when):setTimeout(f,when);return{id:r,interval:periodic,cancel:function(){if(this.interval){clearInterval(r);}else{clearTimeout(r);}}};},endsWith:function(text,suffix){return text.indexOf(suffix,text.length-suffix.length)!==-1;},startsWith:function(text,prefix){return text.substr(0,prefix.length)===prefix;},isUri:function(obj){return Alpaca.isString(obj)&&(Alpaca.startsWith(obj,"http://")||Alpaca.startsWith(obj,"https://")||Alpaca.startsWith(obj,"/")||Alpaca.startsWith(obj,"./")||Alpaca.startsWith(obj,"../"));},traverseObject:function(object,keys,subprop){if(Alpaca.isString(keys)){keys=keys.split(".");}var element=null;var current=object;var key=null;do{key=keys.shift();if(subprop&&key==subprop){key=keys.shift();}if(!Alpaca.isEmpty(current[key])){current=current[key];if(keys.length===0){element=current;}}else{keys=[];}}while(keys.length>0);return element;},each:function(data,func){if(Alpaca.isArray(data)){for(var i=0;i<data.length;i++){func.apply(data[i]);}}else{if(Alpaca.isObject(data)){for(var key in data){func.apply(data[key]);}}}},merge:function(obj1,obj2,validKeyFunction){if(!obj1){obj1={};}for(var key in obj2){var valid=true;if(validKeyFunction){valid=validKeyFunction(key);}if(valid){if(Alpaca.isEmpty(obj2[key])){obj1[key]=obj2[key];}else{if(Alpaca.isObject(obj2[key])){if(!obj1[key]){obj1[key]={};}obj1[key]=Alpaca.merge(obj1[key],obj2[key]);}else{obj1[key]=obj2[key];}}}}return obj1;},mergeObject:function(target,source){if(!target){target={};}if(!source){source={};}this.mergeObject2(source,target);return target;},mergeObject2:function(source,target){var isArray=Alpaca.isArray;var isObject=Alpaca.isObject;var isUndefined=Alpaca.isUndefined;var copyOf=Alpaca.copyOf;var _merge=function(source,target){if(isArray(source)){if(isArray(target)){$.each(source,function(index){target.push(copyOf(source[index]));});}else{}}else{if(isObject(source)){if(isObject(target)){$.each(source,function(key){if(isUndefined(target[key])){target[key]=copyOf(source[key]);}else{target[key]=_merge(source[key],target[key]);}});}else{}}else{target=copyOf(source);}}return target;};_merge(source,target);return target;},substituteTokens:function(text,args){if(!Alpaca.isEmpty(text)){for(var i=0;i<args.length;i++){var token="{"+i+"}";var x=text.indexOf(token);if(x>-1){var nt=text.substring(0,x)+args[i]+text.substring(x+3);text=nt;}}}return text;},compareObject:function(obj1,obj2){return equiv(obj1,obj2);},compareArrayContent:function(arr_1,arr_2){var equal=arr_1&&arr_2&&(arr_1.length==arr_2.length);if(equal){$.each(arr_1,function(foo,val){if(!equal){return false;}if($.inArray(val,arr_2)==-1){equal=false;}else{equal=true;}});}return equal;},isValEmpty:function(val){var empty=false;if(Alpaca.isEmpty(val)){empty=true;}else{if(Alpaca.isString(val)&&val===""){empty=true;}if(Alpaca.isObject(val)&&$.isEmptyObject(val)){empty=true;}if(Alpaca.isArray(val)&&val.length===0){empty=true;}if(Alpaca.isNumber(val)&&isNaN(val)){empty=true;}}return empty;},init:function(el,data,options,schema,view,initialSettings,callback,renderedCallback,connector,errorCallback,isDynamicCreation){var self=this;if(Alpaca.isObject(view)){var viewId=view.id;if(!viewId){view.id=this.generateViewId();}var parentId=view.parent;if(!parentId){view.parent="VIEW_WEB_EDIT";}this.registerView(view);view=view.id;}this.compile(function(report){if(report.errors&&report.errors.length>0){for(var i=0;i<report.errors.length;i++){var viewId=report.errors[i].viewId;var templateId=report.errors[i].templateId;var err=report.errors[i].err;Alpaca.logError("The template: "+templateId+" for view: "+viewId+" failed to compile");Alpaca.logError(JSON.stringify(err));}return Alpaca.throwErrorWithCallback("View compilation failed, cannot initialize Alpaca.  Please check the error logs.",errorCallback);}self._init(el,data,options,schema,view,initialSettings,callback,renderedCallback,connector,errorCallback,isDynamicCreation);},errorCallback);},_init:function(el,data,options,schema,view,initialSettings,callback,renderedCallback,connector,errorCallback,isDynamicCreation){var fallbackUI=null;var fallbackType=null;var fallbackViewId=null;if($.mobile){fallbackUI="mobile";if(data){fallbackType="edit";fallbackViewId="VIEW_MOBILE_EDIT";}else{fallbackType="create";fallbackViewId="VIEW_MOBILE_CREATE";}}var bootstrapDetected=(typeof $().modal=="function");if(bootstrapDetected){fallbackUI="bootstrap";if(data){fallbackType="edit";fallbackViewId="VIEW_BOOTSTRAP_EDIT";}else{fallbackType="create";fallbackViewId="VIEW_BOOTSTRAP_CREATE";}}if(!view){var ui=initialSettings.ui;var type=initialSettings.type;if(!ui){if(!fallbackUI){fallbackUI=Alpaca.defaultUI;}if(fallbackUI){ui=fallbackUI;}}if(ui){if(!type){type=fallbackType?fallbackType:"edit";}Alpaca.logDebug("No view provided but found request for UI: "+ui+" and type: "+type);view=this.lookupNormalizedView(ui,type);if(view){Alpaca.logDebug("Found view: "+view);}else{Alpaca.logDebug("No view found for UI: "+ui+" and type: "+type);}}}if(!view){Alpaca.logDebug("A view was not specified.");if(fallbackViewId){Alpaca.logDebug("Falling back to detected view: "+fallbackViewId);view=fallbackViewId;}else{Alpaca.logDebug("Falling back to default view: "+this.defaultView);view=this.defaultView;}}if(Alpaca.isString(view)){if(!this.normalizedViews[view]){return Alpaca.throwErrorWithCallback("The desired view: "+view+" could not be loaded.  Please make sure it is loaded and not misspelled.",errorCallback);}}var field=Alpaca.createFieldInstance(el,data,options,schema,view,connector,errorCallback);if(field){$(el).addClass("alpaca-field-rendering");$(el).addClass("alpaca-hidden");field.isDynamicCreation=isDynamicCreation;Alpaca.fieldInstances[field.getId()]=field;field.allFieldInstances=function(){return Alpaca.fieldInstances;};if(Alpaca.isEmpty(callback)){callback=field.view.render;}if(Alpaca.isEmpty(renderedCallback)){renderedCallback=field.view.postRender;}if(Alpaca.collectTiming){var counters=Alpaca.Counters("render");var t1=new Date().getTime();}var fin=function(){if(!field.parent){field.refreshValidationState(true);if(field.view.type!="view"){Alpaca.fieldApplyChildren(field,function(field){field.hideInitValidationError=false;});}}$(el).removeClass("alpaca-field-rendering");$(el).removeClass("alpaca-hidden");if(Alpaca.collectTiming){var t2=new Date().getTime();counters.increment(field.getFieldType(),(t2-t1));}renderedCallback(field);};if(!Alpaca.isEmpty(callback)){callback(field,function(){fin();});}else{field.render(function(){fin();});}field.callback=callback;field.renderedCallback=renderedCallback;}return field;},createFieldInstance:function(el,data,options,schema,view,connector,errorCallback){if(Alpaca.isValEmpty(options)){options={};}if(Alpaca.isValEmpty(schema)){schema={};}if(options&&Alpaca.isString(options)){var fieldType=options;options={};options.type=fieldType;}if(!options.type){if(!schema.type){schema.type=Alpaca.getSchemaType(data);}if(schema&&schema["enum"]){if(schema["enum"].length>3){options.type="select";}else{options.type="radio";}}else{options.type=Alpaca.defaultSchemaFieldMapping[schema.type];}if(schema.format&&Alpaca.defaultFormatFieldMapping[schema.format]){options.type=Alpaca.defaultFormatFieldMapping[schema.format];}}var fieldClass=Alpaca.getFieldClass(options.type);if(!fieldClass){errorCallback({"message":"Unable to find field class for type: "+options.type,"reason":"FIELD_INSTANTIATION_ERROR"});return null;}return new fieldClass(el,data,options,schema,view,connector,errorCallback);},parseJSON:function(text){if(!text){return null;}return $.parseJSON(text);},compile:function(cb,errorCallback){var self=this;var report={"errors":[],"count":0,"successCount":0};var finalCallback=function(normalizedViews){if(report.errors.length===0){for(var k in normalizedViews){self.normalizedViews[k]=normalizedViews[k];}}cb(report);};var viewCompileCallback=function(normalizedViews,err,view,compiledTemplateId,cacheKey,totalCalls){var viewId=view.id;report.count++;if(err){report.errors.push({"view":viewId,"template":compiledTemplateId,"err":err});}else{report.successCount++;view.compiledTemplates[compiledTemplateId]=cacheKey;}if(report.count==totalCalls){finalCallback(normalizedViews);}};var compileViewTemplate=function(normalizedViews,view,compiledTemplateId,template,totalCalls){var viewId=view.id;var mightBeUrl=(template&&template.indexOf("/")>-1);if(mightBeUrl){}else{if(template&&((template.indexOf("#")===0)||(template.indexOf(".")===0))){var x=$(template);type=$(x).attr("type");template=$(x).html();}}var type=null;if(Alpaca.isObject(template)){type=template.type;template=template.template;}if(!type){type="text/x-jquery-tmpl";}var engine=Alpaca.TemplateEngineRegistry.find(type);if(!engine){Alpaca.logError("Cannot find template engine for type: "+type);var err=new Error("Cannot find template engine for type: "+type);viewCompileCallback(normalizedViews,err,view,compiledTemplateId,cacheKey,totalCalls);}var cacheKey=viewId+"_"+compiledTemplateId;if(engine.isCached(cacheKey)){viewCompileCallback(normalizedViews,null,view,compiledTemplateId,cacheKey,totalCalls);}else{var previouslyCompiledTemplateCacheKey=view.compiledTemplates["view-"+template];if(previouslyCompiledTemplateCacheKey){template=Alpaca.TemplateCache[previouslyCompiledTemplateCacheKey];}engine.compile(cacheKey,template,function(err,data){viewCompileCallback(normalizedViews,err,view,compiledTemplateId,cacheKey,totalCalls);});}};var compileTemplates=function(normalizedViews){var functionArray=[];for(var viewId in normalizedViews){var view=normalizedViews[viewId];view.compiledTemplates={};if(view.templates){for(var templateId in view.templates){var template=view.templates[templateId];functionArray.push(function(normalizedViews,view,compiledTemplateId,template){return function(totalCalls){compileViewTemplate(normalizedViews,view,compiledTemplateId,template,totalCalls);};}(normalizedViews,view,"view-"+templateId,template));}}if(view.fields){for(var path in view.fields){if(view.fields[path].templates){for(var templateId in view.fields[path].templates){var template=view.fields[path].templates[templateId];functionArray.push(function(normalizedViews,view,compiledTemplateId,template){return function(totalCalls){compileViewTemplate(normalizedViews,view,compiledTemplateId,template,totalCalls);};}(normalizedViews,view,"field-"+path+"-"+templateId,template));}}}}if(view.layout&&view.layout.template){var template=view.layout.template;functionArray.push(function(normalizedViews,view,compiledTemplateId,template){return function(totalCalls){compileViewTemplate(normalizedViews,view,compiledTemplateId,template,totalCalls);};}(normalizedViews,view,"layoutTemplate",template));}if(view.globalTemplate){var template=view.globalTemplate;functionArray.push(function(normalizedViews,view,compiledTemplateId,template){return function(totalCalls){compileViewTemplate(normalizedViews,view,compiledTemplateId,template,totalCalls);};}(normalizedViews,view,"globalTemplate",template));}}var totalCalls=functionArray.length;for(var i=0;i<functionArray.length;i++){functionArray[i](totalCalls);}};var normalizeViews=function(){var normalizedViews={};var normalizedViewCount=0;if(!Alpaca.normalizedViews){Alpaca.normalizedViews={};}self.normalizedViews=Alpaca.normalizedViews;for(var viewId in self.views){if(!Alpaca.normalizedViews[viewId]){var normalizedView=new Alpaca.NormalizedView(viewId);if(normalizedView.normalize()){normalizedViews[viewId]=normalizedView;normalizedViewCount++;}else{return Alpaca.throwErrorWithCallback("View normalization failed, cannot initialize Alpaca.  Please check the error logs.",errorCallback);}}}if(normalizedViewCount>0){compileTemplates(normalizedViews);}else{finalCallback(normalizedViews);}};normalizeViews();},getTemplateDescriptor:function(view,templateId,field){var descriptor={};var _template;var _templateType;if(view.templates&&view.templates[templateId]){_template=view.templates[templateId];_templateType="view";}if(field&&field.path){var path=field.path;if(view&&view.fields&&view.fields[path]&&view.fields[path].templates&&view.fields[path].templates[templateId]){_template=view.fields[path].templates[templateId];_templateType="field";}}if(templateId=="globalTemplate"){_template="globalTemplate";_templateType="global";}if(templateId=="layoutTemplate"){_template="layoutTemplate";_templateType="layout";}descriptor.template={};descriptor.template.id=templateId;descriptor.template.type=_templateType;descriptor.template.value=_template;var type=null;var template=_template;if(Alpaca.isObject(template)){type=template.type;template=template.template;}if(!type){type="text/x-jquery-tmpl";}var engine=Alpaca.TemplateEngineRegistry.find(type);if(!engine){return Alpaca.throwDefaultError("Cannot find template engine for type: "+type);}descriptor.engine={};descriptor.engine.type=type;descriptor.engine.id=engine.id;var compiledTemplateId=null;if(_templateType=="view"){compiledTemplateId="view-"+templateId;}else{if(_templateType=="field"){compiledTemplateId="field-"+field.path+"-"+templateId;}else{if(_templateType=="layout"){compiledTemplateId="layoutTemplate";}else{if(_templateType=="global"){compiledTemplateId="globalTemplate";}}}}descriptor.compiledTemplateId=compiledTemplateId;var cacheKey=view.compiledTemplates[compiledTemplateId];if(!cacheKey||!engine.isCached(cacheKey)){return null;}descriptor.cache={};descriptor.cache.key=cacheKey;return descriptor;},tmpl:function(templateDescriptor,model){var html=Alpaca.tmplHtml(templateDescriptor,model);return Alpaca.safeDomParse(html);},tmplHtml:function(templateDescriptor,model){if(!model){model={};}var engineType=templateDescriptor.engine.type;var compiledTemplateId=templateDescriptor.compiledTemplateId;var engine=Alpaca.TemplateEngineRegistry.find(engineType);if(!engine){return Alpaca.throwDefaultError("Cannot find template engine for type: "+engineType);}var cacheKey=templateDescriptor.cache.key;var html=engine.execute(cacheKey,model,function(err){return Alpaca.throwDefaultError("The compiled template: "+compiledTemplateId+" failed to execute: "+JSON.stringify(err));});return html;}});Alpaca.DEBUG=0;Alpaca.INFO=1;Alpaca.WARN=2;Alpaca.ERROR=3;Alpaca.logLevel=Alpaca.WARN;Alpaca.logDebug=function(obj){Alpaca.log(Alpaca.DEBUG,obj);};Alpaca.logInfo=function(obj){Alpaca.log(Alpaca.INFO,obj);};Alpaca.logWarn=function(obj){Alpaca.log(Alpaca.WARN,obj);};Alpaca.logError=function(obj){Alpaca.log(Alpaca.ERROR,obj);};Alpaca.LOG_METHOD_MAP={0:"debug",1:"info",2:"warn",3:"error"};Alpaca.log=function(level,obj){if(Alpaca.logLevel<=level){var method=Alpaca.LOG_METHOD_MAP[level];if(typeof console!=="undefined"&&console[method]){if("debug"==method){console.debug(obj);}else{if("info"==method){console.info(obj);}else{if("warn"==method){console.warn(obj);}else{if("error"==method){console.error(obj);}else{console.log(obj);}}}}}}};Alpaca.checked=function(el,value){return Alpaca.attrProp(el,"checked",value);};Alpaca.attrProp=function(el,name,value){if(!(typeof(value)==="undefined")){if($(el).prop){$(el).prop(name,value);}else{if(value){$(el).attr(name,value);}else{$(el).removeAttr(name);}}}if($(el).prop){return $(el).prop(name);}return $(el).attr(name);};Alpaca.loadRefSchemaOptions=function(topField,referenceId,callback){if(!referenceId){callback();}else{if(referenceId=="#"){callback(topField.schema,topField.options);}else{if(referenceId.indexOf("#/")==0){var defId=referenceId.substring(2);var tokens=defId.split("/");var defSchema=topField.schema;for(var i=0;i<tokens.length;i++){var token=tokens[i];if(defSchema[token]){defSchema=defSchema[token];}else{if(defSchema.properties&&defSchema.properties[token]){defSchema=defSchema.properties[token];}else{if(defSchema.definitions&&defSchema.definitions[token]){defSchema=defSchema.definitions[token];}else{defSchema=null;break;}}}}var defOptions=topField.options;for(var i=0;i<tokens.length;i++){var token=tokens[i];if(defOptions[token]){defOptions=defOptions[token];}else{if(defOptions.fields&&defOptions.fields[token]){defOptions=defOptions.fields[token];}else{if(defOptions.definitions&&defOptions.definitions[token]){defOptions=defOptions.definitions[token];}else{defOptions=null;break;}}}}callback(defSchema,defOptions);}else{if(referenceId.indexOf("#")==0){var resolution=Alpaca.resolveReference(topField.schema,topField.options,referenceId);if(resolution){callback(resolution.schema,resolution.options);}else{callback();}}else{var referenceParts=Alpaca.pathParts(referenceId);topField.connector.loadReferenceSchema(referenceParts.path,function(schema){topField.connector.loadReferenceOptions(referenceParts.path,function(options){if(referenceParts.id){var resolution=Alpaca.resolveReference(schema,options,referenceParts.id);if(resolution){schema=resolution.schema;options=resolution.options;}}callback(schema,options);},function(){callback(schema);});},function(){callback();});}}}}};Alpaca.DEFAULT_ERROR_CALLBACK=function(error){if(error&&error.message){Alpaca.logError(error.message);throw new Error("Alpaca caught an error with the default error handler: "+error.message);}};Alpaca.defaultErrorCallback=Alpaca.DEFAULT_ERROR_CALLBACK;Alpaca.throwDefaultError=function(message){if(message&&Alpaca.isObject(message)){message=JSON.stringify(message);}var err={"message":message};Alpaca.defaultErrorCallback(err);};Alpaca.throwErrorWithCallback=function(message,errorCallback){if(message&&Alpaca.isObject(message)){message=JSON.stringify(message);}var err={"message":message};if(errorCallback){errorCallback(err);}else{Alpaca.defaultErrorCallback(err);}};Alpaca.resolveReference=function(schema,options,referenceId){if(schema.id==referenceId){var result={};if(schema){result.schema=schema;}if(options){result.options=options;}return result;}else{if(schema&&schema.properties){for(var propertyId in schema.properties){var subSchema=schema.properties[propertyId];var subOptions=null;if(options&&options.fields&&options.fields[propertyId]){subOptions=options.fields[propertyId];}var x=Alpaca.resolveReference(subSchema,subOptions,referenceId);if(x){return x;}}}}return null;};$.alpaca=window.Alpaca=Alpaca;$.fn.alpaca=function(){var args=Alpaca.makeArray(arguments);var newArgs=[].concat(this,args);return Alpaca.apply(this,newArgs);};$.fn.outerHTML=function(nocloning){if(nocloning){return $("<div></div>").append(this).html();}else{return $("<div></div>").append(this.clone()).html();}};$.fn.swapWith=function(to){return this.each(function(){var copy_to=$(to).clone();var copy_from=$(this).clone();$(to).replaceWith(copy_from);$(this).replaceWith(copy_to);});};$.fn.attrProp=function(name,value){return Alpaca.attrProp($(this),name,value);};$.event.special.destroyed={remove:function(o){if(o.handler){o.handler();}}};Alpaca.CountersMap={};Alpaca.Counters=function(name){if(Alpaca.Counters[name]){return Alpaca.Counters[name];}var types={};var all={count:0,total:0,avg:0,touches:0};var counters={increment:function(type,amount){if(!types[type]){types[type]={count:0,total:0,avg:0,touches:0};}types[type].count++;types[type].total+=amount;types[type].avg=types[type].total/types[type].count;types[type].touches++;all.count++;all.total+=amount;all.avg=all.total/all.count;all.touches++;},read:function(type){return types[type];},each:function(f){for(var type in types){f(type,types[type]);}},all:function(){return all;}};Alpaca.Counters[name]=counters;return counters;};Alpaca.collectTiming=false;Alpaca.pathParts=function(resource){if(typeof(resource)!="string"){return resource;}var resourcePath=resource;var resourceId=null;var i=resourcePath.indexOf("#");if(i>-1){resourceId=resourcePath.substring(i+1);resourcePath=resourcePath.substring(0,i);}if(Alpaca.endsWith(resourcePath,"/")){resourcePath=resourcePath.substring(0,resourcePath.length-1);}var parts={};parts.path=resourcePath;if(resourceId){parts.id=resourceId;}return parts;};Alpaca.resolveField=function(containerField,propertyIdOrReferenceId){var resolvedField=null;if(typeof(propertyIdOrReferenceId)=="string"){if(propertyIdOrReferenceId.indexOf("#/")==0&&propertyId.length>2){}else{if(propertyIdOrReferenceId=="#"||propertyIdOrReferenceId=="#/"){resolvedField=containerField;}else{if(propertyIdOrReferenceId.indexOf("#")==0){var topField=containerField;while(topField.parent){topField=topField.parent;}var referenceId=propertyIdOrReferenceId.substring(1);resolvedField=Alpaca.resolveFieldByReference(topField,referenceId);}else{resolvedField=containerField.childrenByPropertyId[propertyIdOrReferenceId];}}}}return resolvedField;};Alpaca.resolveFieldByReference=function(field,referenceId){if(field.schema&&field.schema.id==referenceId){return field;}else{if(field.children&&field.children.length>0){for(var i=0;i<field.children.length;i++){var child=field.children[i];var resolved=Alpaca.resolveFieldByReference(child,referenceId);if(resolved){return resolved;}}}}return null;};Alpaca.anyEquality=function(first,second){var values={};if(typeof(first)=="object"||typeof(first)=="array"){for(var k in first){values[first[k]]=true;}}else{values[first]=true;}var result=false;if(typeof(second)=="object"||typeof(second)=="array"){for(var k in second){var v=second[k];if(values[v]){result=true;break;}}}else{result=values[second];}return result;};Alpaca.series=function(funcs,callback){async.series(funcs,function(){callback();});};Alpaca.parallel=function(funcs,callback){async.parallel(funcs,function(){callback();});};Alpaca.nextTick=function(f){async.nextTick(function(){f();});};Alpaca.compileValidationContext=function(field){var chain=[];var parent=field;do{if(!parent.isValidationParticipant()){parent=null;}if(parent){chain.push(parent);}if(parent){parent=parent.parent;}}while(parent);chain.reverse();var context=[];var f=function(chain,context){if(!chain||chain.length==0){return;}var current=chain[0];var entry={};entry.id=current.getId();entry.field=current;entry.path=current.path;var beforeStatus=current.isValid();if(current.isContainer()){beforeStatus=current.isValid(true);}entry.before=beforeStatus;if(chain.length>1){var childChain=chain.slice(0);childChain.shift();f(childChain,context);}var previouslyValidated=current._previouslyValidated;current.validate();current._validateCustomValidator(function(){var afterStatus=current.isValid();if(current.isContainer()){afterStatus=current.isValid(true);}entry.after=afterStatus;entry.validated=false;entry.invalidated=false;if(!beforeStatus&&afterStatus){entry.validated=true;}else{if(beforeStatus&&!afterStatus){entry.invalidated=true;}else{if(!previouslyValidated&&!afterStatus){entry.invalidated=true;}}}entry.container=current.isContainer();entry.valid=entry.after;context.push(entry);});};f(chain,context);return context;};Alpaca.updateValidationStateForContext=function(context){for(var i=0;i<context.length;i++){var entry=context[i];var field=entry.field;field.getStyleInjection("removeError",field.getEl());field.getEl().removeClass("alpaca-field-invalid alpaca-field-invalid-hidden alpaca-field-valid");var showMessages=false;if(entry.valid){field.getEl().addClass("alpaca-field-valid");}else{if(!field.options.readonly){if(!field.hideInitValidationError){field.getStyleInjection("error",field.getEl());field.getEl().addClass("alpaca-field-invalid");showMessages=true;}else{field.getEl().addClass("alpaca-field-invalid-hidden");}}else{Alpaca.logWarn("The field (id="+field.getId()+", title="+field.getTitle()+", path="+field.path+") is invalid and also read-only");}}if(entry.validated){Alpaca.later(25,this,function(){field.trigger("validated");});}else{if(entry.invalidated){Alpaca.later(25,this,function(){field.trigger("invalidated");});}}if(field.options.showMessages){if(!field.initializing){if(!field.options.readonly){var messages=[];for(var messageId in field.validation){if(!field.validation[messageId]["status"]){messages.push(field.validation[messageId]["message"]);}}field.displayMessage(messages,field.valid);}}}if(showMessages){field.showHiddenMessages();}}};Alpaca.fieldApplyChildren=function(field,fn){var f=function(field,fn){if(field.children&&field.children.length>0){for(var i=0;i<field.children.length;i++){fn(field.children[i]);}}};f(field,fn);};(function(){var async={};var root,previous_async;root=this;if(root!=null){previous_async=root.async;}async.noConflict=function(){root.async=previous_async;return async;};function only_once(fn){var called=false;return function(){if(called){throw new Error("Callback was already called.");}called=true;fn.apply(root,arguments);};}var _each=function(arr,iterator){if(arr.forEach){return arr.forEach(iterator);}for(var i=0;i<arr.length;i+=1){iterator(arr[i],i,arr);}};var _map=function(arr,iterator){if(arr.map){return arr.map(iterator);}var results=[];_each(arr,function(x,i,a){results.push(iterator(x,i,a));});return results;};var _reduce=function(arr,iterator,memo){if(arr.reduce){return arr.reduce(iterator,memo);}_each(arr,function(x,i,a){memo=iterator(memo,x,i,a);});return memo;};var _keys=function(obj){if(Object.keys){return Object.keys(obj);}var keys=[];for(var k in obj){if(obj.hasOwnProperty(k)){keys.push(k);}}return keys;};if(typeof process==="undefined"||!(process.nextTick)){if(typeof setImmediate==="function"){async.nextTick=function(fn){setImmediate(fn);};async.setImmediate=async.nextTick;}else{async.nextTick=function(fn){setTimeout(fn,0);};async.setImmediate=async.nextTick;}}else{async.nextTick=process.nextTick;if(typeof setImmediate!=="undefined"){async.setImmediate=function(fn){setImmediate(fn);};}else{async.setImmediate=async.nextTick;}}async.each=function(arr,iterator,callback){callback=callback||function(){};if(!arr.length){return callback();}var completed=0;_each(arr,function(x){iterator(x,only_once(function(err){if(err){callback(err);callback=function(){};}else{completed+=1;if(completed>=arr.length){callback(null);}}}));});};async.forEach=async.each;async.eachSeries=function(arr,iterator,callback){callback=callback||function(){};if(!arr.length){return callback();}var completed=0;var iterate=function(){iterator(arr[completed],function(err){if(err){callback(err);callback=function(){};}else{completed+=1;if(completed>=arr.length){callback(null);}else{iterate();}}});};iterate();};async.forEachSeries=async.eachSeries;async.eachLimit=function(arr,limit,iterator,callback){var fn=_eachLimit(limit);fn.apply(null,[arr,iterator,callback]);};async.forEachLimit=async.eachLimit;var _eachLimit=function(limit){return function(arr,iterator,callback){callback=callback||function(){};if(!arr.length||limit<=0){return callback();}var completed=0;var started=0;var running=0;(function replenish(){if(completed>=arr.length){return callback();}while(running<limit&&started<arr.length){started+=1;running+=1;iterator(arr[started-1],function(err){if(err){callback(err);callback=function(){};}else{completed+=1;running-=1;if(completed>=arr.length){callback();}else{replenish();}}});}})();};};var doParallel=function(fn){return function(){var args=Array.prototype.slice.call(arguments);return fn.apply(null,[async.each].concat(args));};};var doParallelLimit=function(limit,fn){return function(){var args=Array.prototype.slice.call(arguments);return fn.apply(null,[_eachLimit(limit)].concat(args));};};var doSeries=function(fn){return function(){var args=Array.prototype.slice.call(arguments);return fn.apply(null,[async.eachSeries].concat(args));};};var _asyncMap=function(eachfn,arr,iterator,callback){var results=[];arr=_map(arr,function(x,i){return{index:i,value:x};});eachfn(arr,function(x,callback){iterator(x.value,function(err,v){results[x.index]=v;callback(err);});},function(err){callback(err,results);});};async.map=doParallel(_asyncMap);async.mapSeries=doSeries(_asyncMap);async.mapLimit=function(arr,limit,iterator,callback){return _mapLimit(limit)(arr,iterator,callback);};var _mapLimit=function(limit){return doParallelLimit(limit,_asyncMap);};async.reduce=function(arr,memo,iterator,callback){async.eachSeries(arr,function(x,callback){iterator(memo,x,function(err,v){memo=v;callback(err);});},function(err){callback(err,memo);});};async.inject=async.reduce;async.foldl=async.reduce;async.reduceRight=function(arr,memo,iterator,callback){var reversed=_map(arr,function(x){return x;}).reverse();async.reduce(reversed,memo,iterator,callback);};async.foldr=async.reduceRight;var _filter=function(eachfn,arr,iterator,callback){var results=[];arr=_map(arr,function(x,i){return{index:i,value:x};});eachfn(arr,function(x,callback){iterator(x.value,function(v){if(v){results.push(x);}callback();});},function(err){callback(_map(results.sort(function(a,b){return a.index-b.index;}),function(x){return x.value;}));});};async.filter=doParallel(_filter);async.filterSeries=doSeries(_filter);async.select=async.filter;async.selectSeries=async.filterSeries;var _reject=function(eachfn,arr,iterator,callback){var results=[];arr=_map(arr,function(x,i){return{index:i,value:x};});eachfn(arr,function(x,callback){iterator(x.value,function(v){if(!v){results.push(x);}callback();});},function(err){callback(_map(results.sort(function(a,b){return a.index-b.index;}),function(x){return x.value;}));});};async.reject=doParallel(_reject);async.rejectSeries=doSeries(_reject);var _detect=function(eachfn,arr,iterator,main_callback){eachfn(arr,function(x,callback){iterator(x,function(result){if(result){main_callback(x);main_callback=function(){};}else{callback();}});},function(err){main_callback();});};async.detect=doParallel(_detect);async.detectSeries=doSeries(_detect);async.some=function(arr,iterator,main_callback){async.each(arr,function(x,callback){iterator(x,function(v){if(v){main_callback(true);main_callback=function(){};}callback();});},function(err){main_callback(false);});};async.any=async.some;async.every=function(arr,iterator,main_callback){async.each(arr,function(x,callback){iterator(x,function(v){if(!v){main_callback(false);main_callback=function(){};}callback();});},function(err){main_callback(true);});};async.all=async.every;async.sortBy=function(arr,iterator,callback){async.map(arr,function(x,callback){iterator(x,function(err,criteria){if(err){callback(err);}else{callback(null,{value:x,criteria:criteria});}});},function(err,results){if(err){return callback(err);}else{var fn=function(left,right){var a=left.criteria,b=right.criteria;return a<b?-1:a>b?1:0;};callback(null,_map(results.sort(fn),function(x){return x.value;}));}});};async.auto=function(tasks,callback){callback=callback||function(){};var keys=_keys(tasks);if(!keys.length){return callback(null);}var results={};var listeners=[];var addListener=function(fn){listeners.unshift(fn);};var removeListener=function(fn){for(var i=0;i<listeners.length;i+=1){if(listeners[i]===fn){listeners.splice(i,1);return;}}};var taskComplete=function(){_each(listeners.slice(0),function(fn){fn();});};addListener(function(){if(_keys(results).length===keys.length){callback(null,results);callback=function(){};}});_each(keys,function(k){var task=(tasks[k] instanceof Function)?[tasks[k]]:tasks[k];var taskCallback=function(err){var args=Array.prototype.slice.call(arguments,1);if(args.length<=1){args=args[0];}if(err){var safeResults={};_each(_keys(results),function(rkey){safeResults[rkey]=results[rkey];});safeResults[k]=args;callback(err,safeResults);callback=function(){};}else{results[k]=args;async.setImmediate(taskComplete);}};var requires=task.slice(0,Math.abs(task.length-1))||[];var ready=function(){return _reduce(requires,function(a,x){return(a&&results.hasOwnProperty(x));},true)&&!results.hasOwnProperty(k);};if(ready()){task[task.length-1](taskCallback,results);}else{var listener=function(){if(ready()){removeListener(listener);task[task.length-1](taskCallback,results);}};addListener(listener);}});};async.waterfall=function(tasks,callback){callback=callback||function(){};if(tasks.constructor!==Array){var err=new Error("First argument to waterfall must be an array of functions");return callback(err);}if(!tasks.length){return callback();}var wrapIterator=function(iterator){return function(err){if(err){callback.apply(null,arguments);callback=function(){};}else{var args=Array.prototype.slice.call(arguments,1);var next=iterator.next();if(next){args.push(wrapIterator(next));}else{args.push(callback);}async.setImmediate(function(){iterator.apply(null,args);});}};};wrapIterator(async.iterator(tasks))();};var _parallel=function(eachfn,tasks,callback){callback=callback||function(){};if(tasks.constructor===Array){eachfn.map(tasks,function(fn,callback){if(fn){fn(function(err){var args=Array.prototype.slice.call(arguments,1);if(args.length<=1){args=args[0];}callback.call(null,err,args);});}},callback);}else{var results={};eachfn.each(_keys(tasks),function(k,callback){tasks[k](function(err){var args=Array.prototype.slice.call(arguments,1);if(args.length<=1){args=args[0];}results[k]=args;callback(err);});},function(err){callback(err,results);});}};async.parallel=function(tasks,callback){_parallel({map:async.map,each:async.each},tasks,callback);};async.parallelLimit=function(tasks,limit,callback){_parallel({map:_mapLimit(limit),each:_eachLimit(limit)},tasks,callback);};async.series=function(tasks,callback){callback=callback||function(){};if(tasks.constructor===Array){async.mapSeries(tasks,function(fn,callback){if(fn){fn(function(err){var args=Array.prototype.slice.call(arguments,1);if(args.length<=1){args=args[0];}callback.call(null,err,args);});}},callback);}else{var results={};async.eachSeries(_keys(tasks),function(k,callback){tasks[k](function(err){var args=Array.prototype.slice.call(arguments,1);if(args.length<=1){args=args[0];}results[k]=args;callback(err);});},function(err){callback(err,results);});}};async.iterator=function(tasks){var makeCallback=function(index){var fn=function(){if(tasks.length){tasks[index].apply(null,arguments);}return fn.next();};fn.next=function(){return(index<tasks.length-1)?makeCallback(index+1):null;};return fn;};return makeCallback(0);};async.apply=function(fn){var args=Array.prototype.slice.call(arguments,1);return function(){return fn.apply(null,args.concat(Array.prototype.slice.call(arguments)));};};var _concat=function(eachfn,arr,fn,callback){var r=[];eachfn(arr,function(x,cb){fn(x,function(err,y){r=r.concat(y||[]);cb(err);});},function(err){callback(err,r);});};async.concat=doParallel(_concat);async.concatSeries=doSeries(_concat);async.whilst=function(test,iterator,callback){if(test()){iterator(function(err){if(err){return callback(err);}async.whilst(test,iterator,callback);});}else{callback();}};async.doWhilst=function(iterator,test,callback){iterator(function(err){if(err){return callback(err);}if(test()){async.doWhilst(iterator,test,callback);}else{callback();}});};async.until=function(test,iterator,callback){if(!test()){iterator(function(err){if(err){return callback(err);}async.until(test,iterator,callback);});}else{callback();}};async.doUntil=function(iterator,test,callback){iterator(function(err){if(err){return callback(err);}if(!test()){async.doUntil(iterator,test,callback);}else{callback();}});};async.queue=function(worker,concurrency){if(concurrency===undefined){concurrency=1;}function _insert(q,data,pos,callback){if(data.constructor!==Array){data=[data];}_each(data,function(task){var item={data:task,callback:typeof callback==="function"?callback:null};if(pos){q.tasks.unshift(item);}else{q.tasks.push(item);}if(q.saturated&&q.tasks.length===concurrency){q.saturated();}async.setImmediate(q.process);});}var workers=0;var q={tasks:[],concurrency:concurrency,saturated:null,empty:null,drain:null,push:function(data,callback){_insert(q,data,false,callback);},unshift:function(data,callback){_insert(q,data,true,callback);},process:function(){if(workers<q.concurrency&&q.tasks.length){var task=q.tasks.shift();if(q.empty&&q.tasks.length===0){q.empty();}workers+=1;var next=function(){workers-=1;if(task.callback){task.callback.apply(task,arguments);}if(q.drain&&q.tasks.length+workers===0){q.drain();}q.process();};var cb=only_once(next);worker(task.data,cb);}},length:function(){return q.tasks.length;},running:function(){return workers;}};return q;};async.cargo=function(worker,payload){var working=false,tasks=[];var cargo={tasks:tasks,payload:payload,saturated:null,empty:null,drain:null,push:function(data,callback){if(data.constructor!==Array){data=[data];}_each(data,function(task){tasks.push({data:task,callback:typeof callback==="function"?callback:null});if(cargo.saturated&&tasks.length===payload){cargo.saturated();}});async.setImmediate(cargo.process);},process:function process(){if(working){return;}if(tasks.length===0){if(cargo.drain){cargo.drain();}return;}var ts=typeof payload==="number"?tasks.splice(0,payload):tasks.splice(0);var ds=_map(ts,function(task){return task.data;});if(cargo.empty){cargo.empty();}working=true;worker(ds,function(){working=false;var args=arguments;_each(ts,function(data){if(data.callback){data.callback.apply(null,args);}});process();});},length:function(){return tasks.length;},running:function(){return working;}};return cargo;};var _console_fn=function(name){return function(fn){var args=Array.prototype.slice.call(arguments,1);fn.apply(null,args.concat([function(err){var args=Array.prototype.slice.call(arguments,1);if(typeof console!=="undefined"){if(err){if(console.error){console.error(err);}}else{if(console[name]){_each(args,function(x){console[name](x);});}}}}]));};};async.log=_console_fn("log");async.dir=_console_fn("dir");async.memoize=function(fn,hasher){var memo={};var queues={};hasher=hasher||function(x){return x;};var memoized=function(){var args=Array.prototype.slice.call(arguments);var callback=args.pop();var key=hasher.apply(null,args);if(key in memo){callback.apply(null,memo[key]);}else{if(key in queues){queues[key].push(callback);}else{queues[key]=[callback];fn.apply(null,args.concat([function(){memo[key]=arguments;var q=queues[key];delete queues[key];for(var i=0,l=q.length;i<l;i++){q[i].apply(null,arguments);}}]));}}};memoized.memo=memo;memoized.unmemoized=fn;return memoized;};async.unmemoize=function(fn){return function(){return(fn.unmemoized||fn).apply(null,arguments);};};async.times=function(count,iterator,callback){var counter=[];for(var i=0;i<count;i++){counter.push(i);}return async.map(counter,iterator,callback);};async.timesSeries=function(count,iterator,callback){var counter=[];for(var i=0;i<count;i++){counter.push(i);}return async.mapSeries(counter,iterator,callback);};async.compose=function(){var fns=Array.prototype.reverse.call(arguments);return function(){var that=this;var args=Array.prototype.slice.call(arguments);var callback=args.pop();async.reduce(fns,args,function(newargs,fn,cb){fn.apply(that,newargs.concat([function(){var err=arguments[0];var nextargs=Array.prototype.slice.call(arguments,1);cb(err,nextargs);}]));},function(err,results){callback.apply(that,[err].concat(results));});};};var _applyEach=function(eachfn,fns){var go=function(){var that=this;var args=Array.prototype.slice.call(arguments);var callback=args.pop();return eachfn(fns,function(fn,cb){fn.apply(that,args.concat([cb]));},callback);};if(arguments.length>2){var args=Array.prototype.slice.call(arguments,2);return go.apply(this,args);}else{return go;}};async.applyEach=doParallel(_applyEach);async.applyEachSeries=doSeries(_applyEach);async.forever=function(fn,callback){function next(err){if(err){if(callback){return callback(err);}throw err;}fn(next);}next();};root.async=async;}());})(jQuery);(function(){Alpaca.TemplateEngineRegistry=function(){var registry={};return{register:function(id,engine){registry[id]=engine;},find:function(idOrType){var engine=null;if(registry[idOrType]){engine=registry[idOrType];}else{for(var id in registry){var supportedMimetypes=registry[id].supportedMimetypes();for(var i=0;i<supportedMimetypes.length;i++){if(idOrType.toLowerCase()==supportedMimetypes[i].toLowerCase()){engine=registry[id];break;}}}}return engine;},ids:function(){var ids=[];for(var id in registry){ids.push(id);}return ids;}};}();})();(function($){if(typeof(Alpaca.TemplateCache)=="undefined"){Alpaca.TemplateCache={};}Alpaca.AbstractTemplateEngine=Base.extend({constructor:function(id){this.base();this.id=id;this.cleanMarkup=function(html){var dom=Alpaca.safeDomParse(html);if($(dom).length==1){if($(dom)[0].nodeName.toLowerCase()=="script"){html=$(dom).html();}}return html;};},compile:function(cacheKey,template,callback){var self=this;var type="html";if(Alpaca.isString(template)){if(template.indexOf("./")===0||template.indexOf("/")===0||template.indexOf("../")===0){type="uri";}else{if(template.indexOf("#")===0||template.indexOf(".")===0||template.indexOf("[")===0){type="selector";}}}else{}if(type=="selector"){self._compile(cacheKey,template,callback);}else{if(type=="uri"){var fileExtension=self.fileExtension();var url=template;if(url.indexOf("."+fileExtension)===-1){url+="."+fileExtension;}$.ajax({"url":url,"dataType":"html","success":function(html){html=self.cleanMarkup(html);self._compile(cacheKey,html,callback);},"failure":function(http){callback(http,null);}});}else{if(type=="html"){var html=template;if(html instanceof jQuery){html=Alpaca.safeDomParse(template).outerHTML();}self._compile(cacheKey,html,callback);}else{callback(new Error("Template engine cannot determine how to handle type: "+type));}}}},_compile:function(cacheKey,html,callback){if(Alpaca.isEmpty(html)){html="";}html=Alpaca.trim(html);if(html.toLowerCase().indexOf("<script")===0){}else{html="<script type='"+this.supportedMimetypes()[0]+"'>"+html+"<\/script>";}Alpaca.logDebug("Compiling template: "+this.id+", cacheKey: "+cacheKey+", template: "+html);this.doCompile(cacheKey,html,callback);},doCompile:function(cacheKey,html,callback){},execute:function(cacheKey,model,callback){Alpaca.logDebug("Executing template for cache key: "+cacheKey);var dom=this.doExecute(cacheKey,model,callback);var strip_script=function(dom){if($(dom).length==1){if($(dom)[0].nodeName.toLowerCase()=="script"){return $(dom).html();}}return html;};dom=strip_script(dom);return dom;},doExecute:function(cacheKey,model,callback){},fileExtension:function(){return"html";},supportedMimetypes:function(){return[];},isCached:function(cacheKey){}});})(jQuery);(function($){Alpaca.JQueryTemplateEngine=Alpaca.AbstractTemplateEngine.extend({fileExtension:function(){return"html";},supportedMimetypes:function(){return["text/x-jquery-template","text/x-jquery-tmpl"];},doCompile:function(cacheKey,html,callback){try{$.template(cacheKey,html);}catch(e){callback(e);return;}Alpaca.TemplateCache[cacheKey]=html;callback();},doExecute:function(cacheKey,model,callback){var self=this;var html=null;try{var dom=$.tmpl(cacheKey,model);var _html=dom.outerHTML();var i=-1;do{i=_html.indexOf("_tmplitem=");if(i>-1){var j=_html.indexOf(" ",i);if(j==-1){j=_html.indexOf(">",i);}if(j==-1){callback({"message":"Should have found closing whitespace or '>' for _tmplitem attribute"});return;}_html=_html.substring(0,i)+_html.substring(j);}}while(i>-1);dom=Alpaca.safeDomParse(_html);html=dom;}catch(e){callback({"message":e.message});return null;}return html;},isCached:function(cacheKey){return(Alpaca.TemplateCache[cacheKey]?true:false);}});Alpaca.TemplateEngineRegistry.register("tmpl",new Alpaca.JQueryTemplateEngine("tmpl"));})(jQuery);(function($){Alpaca.EJSTemplateEngine=Alpaca.AbstractTemplateEngine.extend({fileExtension:function(){return"ejs";},supportedMimetypes:function(){return["text/x-ejs-template","text/x-ejs-tmpl"];},doCompile:function(cacheKey,html,callback){var ejs=null;try{ejs=new EJS({name:cacheKey,text:html});}catch(e){callback(e);return;}Alpaca.TemplateCache[cacheKey]=ejs;callback();},doExecute:function(cacheKey,model,callback){var ejs=Alpaca.TemplateCache[cacheKey];var html=null;try{html=ejs.render(model);}catch(e){callback(e);return null;}return html;},isCached:function(cacheKey){return(Alpaca.TemplateCache[cacheKey]?true:false);}});Alpaca.TemplateEngineRegistry.register("ejs",new Alpaca.EJSTemplateEngine("ejs"));})(jQuery);(function($){Alpaca.HandlebarsTemplateEngine=Alpaca.AbstractTemplateEngine.extend({fileExtension:function(){return"html";},supportedMimetypes:function(){return["text/x-handlebars-template","text/x-handlebars-tmpl"];},doCompile:function(cacheKey,html,callback){var template=null;try{template=Handlebars.compile(html);}catch(e){callback(e);return;}Alpaca.TemplateCache[cacheKey]=template;callback();},doExecute:function(cacheKey,model,callback){var template=Alpaca.TemplateCache[cacheKey];var html=null;try{html=template(model);}catch(e){callback(e);return null;}return html;},isCached:function(cacheKey){return(Alpaca.TemplateCache[cacheKey]?true:false);}});Alpaca.TemplateEngineRegistry.register("handlebars",new Alpaca.HandlebarsTemplateEngine("handlebars"));})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.styleInjections={};Alpaca.registerView({"id":"VIEW_BASE","title":"Abstract base view","description":"Foundation view which provides an abstract view from which all other views extend.","messages":{"countries":{"afg":"Afghanistan","ala":"Aland Islands","alb":"Albania","dza":"Algeria","asm":"American Samoa","and":"Andorra","ago":"Angola","aia":"Anguilla","ata":"Antarctica","atg":"Antigua and Barbuda","arg":"Argentina","arm":"Armenia","abw":"Aruba","aus":"Australia","aut":"Austria","aze":"Azerbaijan","bhs":"Bahamas","bhr":"Bahrain","bgd":"Bangladesh","brb":"Barbados","blr":"Belarus","bel":"Belgium","blz":"Belize","ben":"Benin","bmu":"Bermuda","btn":"Bhutan","bol":"Bolivia","bih":"Bosnia and Herzegovina","bwa":"Botswana","bvt":"Bouvet Island","bra":"Brazil","iot":"British Indian Ocean Territory","brn":"Brunei Darussalam","bgr":"Bulgaria","bfa":"Burkina Faso","bdi":"Burundi","khm":"Cambodia","cmr":"Cameroon","can":"Canada","cpv":"Cape Verde","cym":"Cayman Islands","caf":"Central African Republic","tcd":"Chad","chl":"Chile","chn":"China","cxr":"Christmas Island","cck":"Cocos (Keeling), Islands","col":"Colombia","com":"Comoros","cog":"Congo","cod":"Congo, the Democratic Republic of the","cok":"Cook Islands","cri":"Costa Rica","hrv":"Croatia","cub":"Cuba","cyp":"Cyprus","cze":"Czech Republic","civ":"Cote d'Ivoire","dnk":"Denmark","dji":"Djibouti","dma":"Dominica","dom":"Dominican Republic","ecu":"Ecuador","egy":"Egypt","slv":"El Salvador","gnq":"Equatorial Guinea","eri":"Eritrea","est":"Estonia","eth":"Ethiopia","flk":"Falkland Islands (Malvinas),","fro":"Faroe Islands","fji":"Fiji","fin":"Finland","fra":"France","guf":"French Guiana","pyf":"French Polynesia","atf":"French Southern Territories","gab":"Gabon","gmb":"Gambia","geo":"Georgia","deu":"Germany","gha":"Ghana","gib":"Gibraltar","grc":"Greece","grl":"Greenland","grd":"Grenada","glp":"Guadeloupe","gum":"Guam","gtm":"Guatemala","ggy":"Guernsey","gin":"Guinea","gnb":"Guinea-Bissau","guy":"Guyana","hti":"Haiti","hmd":"Heard Island and McDonald Islands","vat":"Holy See (Vatican City State),","hnd":"Honduras","hkg":"Hong Kong","hun":"Hungary","isl":"Iceland","ind":"India","idn":"Indonesia","irn":"Iran, Islamic Republic of","irq":"Iraq","irl":"Ireland","imn":"Isle of Man","isr":"Israel","ita":"Italy","jam":"Jamaica","jpn":"Japan","jey":"Jersey","jor":"Jordan","kaz":"Kazakhstan","ken":"Kenya","kir":"Kiribati","prk":"Korea, Democratic People's Republic of","kor":"Korea, Republic of","kwt":"Kuwait","kgz":"Kyrgyzstan","lao":"Lao People's Democratic Republic","lva":"Latvia","lbn":"Lebanon","lso":"Lesotho","lbr":"Liberia","lby":"Libyan Arab Jamahiriya","lie":"Liechtenstein","ltu":"Lithuania","lux":"Luxembourg","mac":"Macao","mkd":"Macedonia, the former Yugoslav Republic of","mdg":"Madagascar","mwi":"Malawi","mys":"Malaysia","mdv":"Maldives","mli":"Mali","mlt":"Malta","mhl":"Marshall Islands","mtq":"Martinique","mrt":"Mauritania","mus":"Mauritius","myt":"Mayotte","mex":"Mexico","fsm":"Micronesia, Federated States of","mda":"Moldova, Republic of","mco":"Monaco","mng":"Mongolia","mne":"Montenegro","msr":"Montserrat","mar":"Morocco","moz":"Mozambique","mmr":"Myanmar","nam":"Namibia","nru":"Nauru","npl":"Nepal","nld":"Netherlands","ant":"Netherlands Antilles","ncl":"New Caledonia","nzl":"New Zealand","nic":"Nicaragua","ner":"Niger","nga":"Nigeria","niu":"Niue","nfk":"Norfolk Island","mnp":"Northern Mariana Islands","nor":"Norway","omn":"Oman","pak":"Pakistan","plw":"Palau","pse":"Palestinian Territory, Occupied","pan":"Panama","png":"Papua New Guinea","pry":"Paraguay","per":"Peru","phl":"Philippines","pcn":"Pitcairn","pol":"Poland","prt":"Portugal","pri":"Puerto Rico","qat":"Qatar","rou":"Romania","rus":"Russian Federation","rwa":"Rwanda","reu":"Reunion","blm":"Saint Barthelemy","shn":"Saint Helena","kna":"Saint Kitts and Nevis","lca":"Saint Lucia","maf":"Saint Martin (French part)","spm":"Saint Pierre and Miquelon","vct":"Saint Vincent and the Grenadines","wsm":"Samoa","smr":"San Marino","stp":"Sao Tome and Principe","sau":"Saudi Arabia","sen":"Senegal","srb":"Serbia","syc":"Seychelles","sle":"Sierra Leone","sgp":"Singapore","svk":"Slovakia","svn":"Slovenia","slb":"Solomon Islands","som":"Somalia","zaf":"South Africa","sgs":"South Georgia and the South Sandwich Islands","esp":"Spain","lka":"Sri Lanka","sdn":"Sudan","sur":"Suriname","sjm":"Svalbard and Jan Mayen","swz":"Swaziland","swe":"Sweden","che":"Switzerland","syr":"Syrian Arab Republic","twn":"Taiwan, Province of China","tjk":"Tajikistan","tza":"Tanzania, United Republic of","tha":"Thailand","tls":"Timor-Leste","tgo":"Togo","tkl":"Tokelau","ton":"Tonga","tto":"Trinidad and Tobago","tun":"Tunisia","tur":"Turkey","tkm":"Turkmenistan","tca":"Turks and Caicos Islands","tuv":"Tuvalu","uga":"Uganda","ukr":"Ukraine","are":"United Arab Emirates","gbr":"United Kingdom","usa":"United States","umi":"United States Minor Outlying Islands","ury":"Uruguay","uzb":"Uzbekistan","vut":"Vanuatu","ven":"Venezuela","vnm":"Viet Nam","vgb":"Virgin Islands, British","vir":"Virgin Islands, U.S.","wlf":"Wallis and Futuna","esh":"Western Sahara","yem":"Yemen","zmb":"Zambia","zwe":"Zimbabwe"},"empty":"","required":"This field is required","valid":"","invalid":"This field is invalid","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"timeUnits":{SECOND:"seconds",MINUTE:"minutes",HOUR:"hours",DAY:"days",MONTH:"months",YEAR:"years"}}});Alpaca.EmptyViewTemplates={};})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.styleInjections={};var displayTemplates=Alpaca.Create(Alpaca.EmptyViewTemplates,{"controlField":'<div class="alpaca-data-container">{{if options.label}}<div class="alpaca-data-label">${options.label}</div>{{/if}}<div class="alpaca-data">&nbsp;${data}</div></div>',"fieldSetOuterEl":'<div class="ui-widget ui-widget-content">{{html this.html}}</div>',"fieldSetLegend":'{{if options.label}}<div class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</div>{{/if}}',"fieldSetItemsContainer":"<div>{{html this.html}}</div>","fieldSet":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',"controlFieldContainer":"<div>{{html this.html}}</div>"});var editTemplates=Alpaca.Create(Alpaca.EmptyViewTemplates,{"controlFieldOuterEl":"<span>{{html this.html}}</span>","controlFieldMessage":'<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',"controlFieldLabel":'{{if options.label}}<div class="{{if options.labelClass}}${options.labelClass}{{/if}}"><div>${options.label}</div></div>{{/if}}',"controlFieldHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}"><span class="ui-icon ui-icon-info"></span><span class="alpaca-controlfield-helper-text">${options.helper}</span></div>{{/if}}',"controlFieldContainer":"<div>{{html this.html}}</div>","controlField":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}{{/wrap}}',"fieldSetOuterEl":"<fieldset>{{html this.html}}</fieldset>","fieldSetMessage":'<div><span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span><span>${message}</span></div>',"fieldSetLegend":'{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',"fieldSetHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',"fieldSetItemsContainer":"<div>{{html this.html}}</div>","fieldSet":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',"fieldSetItemContainer":"<div></div>","formFieldsContainer":"<div>{{html this.html}}</div>","formButtonsContainer":'<div>{{if options.buttons}}{{each(k,v) options.buttons}}<button data-key="${k}" class="alpaca-form-button alpaca-form-button-${k}" {{each(k1,v1) v}}${k1}="${v1}"{{/each}}>${v.value}</button>{{/each}}{{/if}}</div>',"form":'<form>{{html Alpaca.fieldTemplate(this,"formFieldsContainer")}}{{html Alpaca.fieldTemplate(this,"formButtonsContainer")}}</form>',"wizardStep":'<div class="alpaca-clear"></div>',"wizardNavBar":"<div></div>","wizardPreButton":"<button>Back</button>","wizardNextButton":"<button>Next</button>","wizardDoneButton":"<button>Done</button>","wizardStatusBar":'<ol id="${id}">{{each(i,v) titles}}<li id="stepDesc${i}"><div><strong><span>${v.title}</span>${v.description}</strong></div></li>{{/each}}</ol>'});Alpaca.registerView({"id":"VIEW_WEB_DISPLAY","parent":"VIEW_BASE","title":"Default Web Display View","description":"Default web edit view which goes though field hierarchy.","type":"view","platform":"web","displayReadonly":true,"templates":displayTemplates});Alpaca.registerView({"id":"VIEW_WEB_EDIT","parent":"VIEW_BASE","title":"Default Web Edit View","description":"Default web edit view which goes though field hierarchy.","type":"edit","platform":"web","displayReadonly":true,"templates":editTemplates});Alpaca.registerView({"id":"VIEW_WEB_CREATE","parent":"VIEW_WEB_EDIT","title":"Default Web Create View","description":"Default web create view which doesn't bind initial data.","type":"create","displayReadonly":false});})(jQuery);(function($){var Alpaca=$.alpaca;var displayTemplates=Alpaca.Create(Alpaca.EmptyViewTemplates,{"controlFieldOuterEl":'<span class="alpaca-view-web-list">{{html this.html}}</span>',"controlFieldMessage":'<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',"controlFieldLabel":'{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</label>{{/if}}',"controlFieldHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}"><span class="ui-icon ui-icon-info"></span><span class="alpaca-controlfield-helper-text">${options.helper}</span></div>{{/if}}',"controlFieldContainer":"<div>{{html this.html}}</div>","controlField":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}{{/wrap}}',"fieldSetOuterEl":'<fieldset class="alpaca-view-web-list">{{html this.html}}</fieldset>',"fieldSetMessage":'<div><span class="ui-icon ui-icon-alert alpaca-fieldset-message-list-view"></span><span>${message}</span></div>',"fieldSetLegend":'{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',"fieldSetHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',"fieldSetItemsContainer":"<ol>{{html this.html}}</ol>","fieldSet":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',"fieldSetItemContainer":'<li style="list-style:none;"></li>',"itemLabel":'{{if options.itemLabel}}<label for="${id}" class="alpaca-controlfield-label alpaca-controlfield-label-list-view"><span class="alpaca-controlfield-item-label-list-view">${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span></span>{{/if}}</label>{{/if}}'});var editTemplates=Alpaca.Create(Alpaca.EmptyViewTemplates,{"controlFieldOuterEl":'<span class="alpaca-view-web-list">{{html this.html}}</span>',"controlFieldMessage":'<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',"controlFieldLabel":'{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</label>{{/if}}',"controlFieldHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}"><span class="ui-icon ui-icon-info"></span><span class="alpaca-controlfield-helper-text">${options.helper}</span></div>{{/if}}',"controlFieldContainer":"<div>{{html this.html}}</div>","controlField":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}{{/wrap}}',"fieldSetOuterEl":'<fieldset class="alpaca-view-web-list">{{html this.html}}</fieldset>',"fieldSetMessage":'<div><span class="ui-icon ui-icon-alert alpaca-fieldset-message-list-view"></span><span>${message}</span></div>',"fieldSetLegend":'{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',"fieldSetHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',"fieldSetItemsContainer":"<ol>{{html this.html}}</ol>","fieldSet":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',"fieldSetItemContainer":'<li style="list-style:none;"></li>',"itemLabel":'{{if options.itemLabel}}<label for="${id}" class="alpaca-controlfield-label alpaca-controlfield-label-list-view"><span class="alpaca-controlfield-item-label-list-view">${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span></span>{{/if}}</label>{{/if}}'});Alpaca.registerView({"id":"VIEW_WEB_DISPLAY_LIST","parent":"VIEW_WEB_DISPLAY","title":"Web Display View List Style","description":"Web display view based on list styles.","legendStyle":"link","templates":displayTemplates,"styles":{},"fields":{"/":{"templates":{"fieldSetItemsContainer":'<ol class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</ol>',"fieldSetItemContainer":'<li class="alpaca-fieldset-itemcontainer-list-view-top"></li>'}}}});Alpaca.registerView({"id":"VIEW_WEB_EDIT_LIST","parent":"VIEW_WEB_EDIT","title":"Web Edit View List Style","description":"Web edit view based on list styles.","legendStyle":"link","templates":editTemplates,"styles":{},"fields":{"/":{"templates":{"fieldSetItemsContainer":'<ol class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</ol>',"fieldSetItemContainer":'<li class="alpaca-fieldset-itemcontainer-list-view-top"></li>'}}}});Alpaca.registerView({"id":"VIEW_WEB_CREATE_LIST","parent":"VIEW_WEB_CREATE","title":"Web Create View List Style","description":"Web create view based on list styles.","legendStyle":"link","templates":editTemplates,"styles":{},"fields":{"/":{"templates":{"fieldSetItemsContainer":'<ol class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</ol>',"fieldSetItemContainer":'<li class="alpaca-fieldset-itemcontainer-list-view-top"></li>'}}}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.styleInjections["jquery-ui"]={"field":function(targetDiv){targetDiv.addClass("ui-widget");},"required":function(targetDiv){$('<span class="ui-icon ui-icon-star"></span>').prependTo(targetDiv);},"error":function(targetDiv){targetDiv.addClass("ui-state-error");},"errorMessage":function(targetDiv){targetDiv.addClass("ui-state-error-text");},"removeError":function(targetDiv){targetDiv.removeClass("ui-state-error");},"container":function(targetDiv){targetDiv.addClass("ui-widget-content");},"wizardStatusBar":function(targetDiv){targetDiv.addClass("ui-widget-header ui-corner-all");},"wizardCurrentStep":function(targetDiv){targetDiv.addClass("ui-state-highlight ui-corner-all");},"wizardUnCurrentStep":function(targetDiv){targetDiv.removeClass("ui-state-highlight ui-corner-all");},"containerExpandedIcon":"ui-icon-circle-arrow-s","containerCollapsedIcon":"ui-icon-circle-arrow-e","commonIcon":"ui-icon","addIcon":"ui-icon-circle-plus","removeIcon":"ui-icon-circle-minus","upIcon":"ui-icon-circle-arrow-n","downIcon":"ui-icon-circle-arrow-s","wizardPreIcon":"ui-icon-triangle-1-w","wizardNextIcon":"ui-icon-triangle-1-e","wizardDoneIcon":"ui-icon-triangle-1-e","buttonBeautifier":function(button,iconClass,withText){button.addClass("ui-button ui-widget ui-state-default ui-corner-all");if(withText){button.addClass("ui-button-text-icon-primary");}else{button.addClass("ui-button-icon-only");}var buttonText=button.html();button.attr("title",buttonText);button.empty().append('<span class="ui-button-icon-primary ui-icon alpaca-fieldset-legend-button '+iconClass+'"></span><span class="ui-button-text">'+buttonText+"</span>");button.hover(function(){if(!button.hasClass("alpaca-fieldset-array-item-toolbar-disabled")){$(this).addClass("ui-state-hover");}},function(){if(!button.hasClass("alpaca-fieldset-array-item-toolbar-disabled")){$(this).removeClass("ui-state-hover");}});}};Alpaca.registerView({"id":"VIEW_JQUERYUI_DISPLAY","parent":"VIEW_WEB_DISPLAY","title":"Web Display View for jQuery UI","description":"Web Display View for jQuery UI","style":"jquery-ui","ui":"jquery-ui"});Alpaca.registerView({"id":"VIEW_JQUERYUI_EDIT","parent":"VIEW_WEB_EDIT","title":"Web Edit View for jQuery UI","description":"Web Edit View for jQuery UI","style":"jquery-ui","ui":"jquery-ui"});Alpaca.registerView({"id":"VIEW_JQUERYUI_CREATE","parent":"VIEW_WEB_CREATE","title":"Web Create View for jQuery UI","description":"Web Create View for jQuery UI","style":"jquery-ui","ui":"jquery-ui"});Alpaca.registerView({"id":"VIEW_JQUERYUI_EDIT_LIST","parent":"VIEW_WEB_EDIT_LIST","title":"JQuery UI Edit View List Style","description":"JQuery UI edit view based on list styles.","style":"jquery-ui","ui":"jquery-ui"});Alpaca.registerView({"id":"VIEW_JQUERYUI_CREATE_LIST","parent":"VIEW_WEB_CREATE_LIST","title":"JQuery UI Create View List Style","description":"JQuery UI create view based on list styles.","style":"jquery-ui","ui":"jquery-ui"});})(jQuery);(function($){var Alpaca=$.alpaca;var displayTemplates=Alpaca.Create(Alpaca.EmptyViewTemplates,{controlField:'<ul data-role="listview"><li>{{if options.label}}<h4>${options.label}</h4>{{/if}}<p><strong>${data}</strong></p></li></ul>',fieldSetOuterEl:'<fieldset data-role="collapsible" id="${id}" data-collapsed="{{if options.collapsed}}true{{else}}false{{/if}}">{{html this.html}}</fieldset>',fieldSetMessage:"<div>* ${message}</div>",fieldSetLegend:'{{if options.label}}<legend for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',fieldSetHelper:'{{if options.helper}}<h3 class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</h3>{{/if}}',fieldSetItemsContainer:'<div data-role="controlgroup">{{html this.html}}</div>',fieldSet:'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',fieldSetItemContainer:"<div></div>"});var editTemplates=Alpaca.Create(Alpaca.EmptyViewTemplates,{controlFieldOuterEl:'<div data-role="fieldcontain">{{html this.html}}</div>',controlFieldMessage:"<div>* ${message}</div>",controlFieldLabel:'{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</label>{{/if}}',controlFieldHelper:'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',controlFieldContainer:'<div data-replace="true">{{html this.html}}</div>',controlField:'{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{/wrap}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}',fieldSetOuterEl:'<fieldset id="${id}" data-collapsed="{{if options.collapsed}}true{{else}}false{{/if}}">{{html this.html}}</fieldset>',fieldSetMessage:"<div>* ${message}</div>",fieldSetLegend:'{{if options.label}}<legend for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',fieldSetHelper:'{{if options.helper}}<h3 class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</h3>{{/if}}',fieldSetItemsContainer:'<div data-role="controlgroup">{{html this.html}}</div>',fieldSet:'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',fieldSetItemContainer:"<div></div>",formFieldsContainer:'<div data-role="content">{{html this.html}}</div>',form:'<form>{{html Alpaca.fieldTemplate(this,"formFieldsContainer")}}{{html Alpaca.fieldTemplate(this,"formButtonsContainer")}}</form>',controlFieldRadio:'<fieldset data-role="controlgroup" class="alpaca-radio-fieldset" id="${id}">{{each selectOptions}}<input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" id="${id}-${$index}" value="${value}" {{if value == data}}checked="checked"{{/if}}/><label for="${id}-${$index}">${text}</label>{{/each}}</fieldset>',controlFieldCheckbox:'<fieldset data-role="controlgroup" class="alpaca-radio-fieldset" id="${id}-0"><input type="checkbox" id="${id}-1" name="${id}-1" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each options.data}}data-${fieldId}="${value}"{{/each}}/>{{if options.rightLabel}}<label for="${id}-1">${options.rightLabel}</label>{{else}}{{if options.label}}<label for="${id}-1">${options.label}?</label>{{/if}}{{/if}}</fieldset>',arrayItemToolbar:'<div class="alpaca-fieldset-array-item-toolbar" data-role="controlgroup" data-type="horizontal" data-mini="true"><span class="alpaca-fieldset-array-item-toolbar-add" data-role="button" data-icon="add" data-iconpos="notext">Add</span><span class="alpaca-fieldset-array-item-toolbar-remove" data-role="button" data-icon="delete" data-iconpos="notext">Delete</span><span class="alpaca-fieldset-array-item-toolbar-up" data-role="button" data-icon="arrow-u" data-iconpos="notext">Up</span><span class="alpaca-fieldset-array-item-toolbar-down" data-role="button" data-icon="arrow-d" data-iconpos="notext">Down</span></div>',arrayToolbar:'<div class="alpaca-fieldset-array-toolbar" data-role="controlgroup"  data-mini="true"><span class="alpaca-fieldset-array-toolbar-icon alpaca-fieldset-array-toolbar-add" data-role="button" data-icon="add" data-inline="true" title="Add">Add</span></div>'});Alpaca.styleInjections["jquery-mobile"]={"array":function(containerElem){if(containerElem){if(containerElem.find('[data-role="fieldcontain"]').fieldcontain){containerElem.find('[data-role="fieldcontain"]').fieldcontain();containerElem.find('[data-role="fieldcontain"]').find("[type='radio'], [type='checkbox']").checkboxradio();containerElem.find('[data-role="fieldcontain"]').find("button, [data-role='button'], [type='button'], [type='submit'], [type='reset'], [type='image']").not(".ui-nojs").button();containerElem.find('[data-role="fieldcontain"]').find("input, textarea").not("[type='radio'], [type='checkbox'], button, [type='button'], [type='submit'], [type='reset'], [type='image']").textinput();containerElem.find('[data-role="fieldcontain"]').find("input, select").filter("[data-role='slider'], [data-type='range']").slider();containerElem.find('[data-role="fieldcontain"]').find("select:not([data-role='slider'])").selectmenu();containerElem.find('[data-role="button"]').buttonMarkup();containerElem.find('[data-role="controlgroup"]').controlgroup();}}}};Alpaca.registerView({"id":"VIEW_MOBILE_DISPLAY","parent":"VIEW_WEB_DISPLAY","title":"Mobile DISPLAY View","description":"Mobile display view using JQuery Mobile Library","type":"view","platform":"mobile","style":"jquery-mobile","ui":"mobile","legendStyle":"link","toolbarStyle":"link","buttonType":"link","templates":displayTemplates,"messages":{required:"Required Field",invalid:"Invalid Field"},"render":function(field,renderedCallback){var self=this;field.render(field.view,function(field){refreshPageForField(field.getEl());if(renderedCallback){renderedCallback.call(self,field);}});}});Alpaca.registerView({"id":"VIEW_MOBILE_EDIT","parent":"VIEW_WEB_EDIT","title":"Mobile Edit View","description":"Mobile edit view using JQuery Mobile Library","type":"edit","platform":"mobile","style":"jquery-mobile","ui":"mobile","legendStyle":"link","toolbarStyle":"link","buttonType":"link","toolbarSticky":true,"templates":editTemplates,"messages":{required:"Required Field",invalid:"Invalid Field"},"render":function(field,renderedCallback){var self=this;field.render(function(field){refreshPageForField(field.getEl());if(renderedCallback){renderedCallback.call(self,field);}});}});var refreshPageForField=function(fieldEl){var el=fieldEl;while(!Alpaca.isEmpty(el)&&el.attr("data-role")!=="page"){el=el.parent();}if(!Alpaca.isEmpty(el)){$(el).trigger("pagecreate");}};Alpaca.registerView({"id":"VIEW_MOBILE_CREATE","parent":"VIEW_MOBILE_EDIT","title":"Default Mobile Create View","description":"Default mobile create view which doesn't bind initial data.","type":"create","displayReadonly":false});})(jQuery);(function($){var Alpaca=$.alpaca;var editTemplates=Alpaca.Create(Alpaca.EmptyViewTemplates,{"controlFieldOuterEl":'<div class="form-group">{{html this.html}}</div>',"controlFieldMessage":'<span class="glyphicon glyphicon-exclamation-sign"></span><span class="help-block alpaca-controlfield-message-text">${message}</span>',"controlFieldLabel":'{{if options.label}}<label class="{{if options.labelClass}}${options.labelClass}{{/if}} control-label" for="${id}">${options.label}</label>{{/if}}',"controlFieldHelper":'<p class="{{if options.helperClass}}${options.helperClass}{{/if}}">{{if options.helper}}<i class="glyphicon glyphicon-info-sign alpaca-helper-icon"></i>${options.helper}</p>{{/if}}',"controlFieldContainer":"<div>{{html this.html}}</div>","controlField":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}{{/wrap}}',"fieldSetOuterEl":"<fieldset>{{html this.html}}</fieldset>","fieldSetMessage":'<span class="glyphicon glyphicon-exclamation-sign"></span><span class="help-block alpaca-controlfield-message-text">${message}</span>',"fieldSetLegend":'{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',"fieldSetHelper":'{{if options.helper}}<p class="{{if options.helperClass}}${options.helperClass}{{/if}}"><i class="glyphicon glyphicon-info-sign alpaca-helper-icon"></i>${options.helper}</p>{{/if}}',"fieldSetItemsContainer":"<div>{{html this.html}}</div>","fieldSet":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',"fieldSetItemContainer":"<div></div>","formFieldsContainer":"<div>{{html this.html}}</div>","formButtonsContainer":'<div>{{if options.buttons}}{{each(k,v) options.buttons}}<button data-key="${k}" class="alpaca-form-button alpaca-form-button-${k} btn btn-default" {{each(k1,v1) v}}${k1}="${v1}"{{/each}}>${v.value}</button>{{/each}}{{/if}}</div>',"form":'<form role="form">{{html Alpaca.fieldTemplate(this,"formFieldsContainer")}}{{html Alpaca.fieldTemplate(this,"formButtonsContainer")}}</form>',"wizardStep":'<div class="alpaca-clear"></div>',"wizardNavBar":"<div></div>","wizardPreButton":"<button>Back</button>","wizardNextButton":"<button>Next</button>","wizardDoneButton":"<button>Done</button>","wizardStatusBar":'<ol id="${id}">{{each(i,v) titles}}<li id="stepDesc${i}"><div><strong><span>${v.title}</span>${v.description}</strong></div></li>{{/each}}</ol>',"controlFieldCheckbox":'<div class="checkbox" id="${id}">{{if options.rightLabel}}<label for="${id}_checkbox">{{/if}}<input id="${id}_checkbox" type="checkbox" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>{{if options.rightLabel}}${options.rightLabel}</label>{{/if}}</div>',"controlFieldCheckboxMultiple":'<div id="${id}">{{each(i,o) checkboxOptions}}<div class="checkbox"><label for="${id}_checkbox_${i}"><input type="checkbox" id="${id}_checkbox_${i}" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} data-checkbox-value="${o.value}" data-checkbox-index="${i}"/>${o.text}</label></div>{{/each}}</div>',"controlFieldRadio":'{{if !required && !removeDefaultNone}}<div class="radio"><input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" id="${id}_radio_nonevalue" value=""/><label for="${id}_radio_nonevalue">None</label></div>{{/if}}{{each selectOptions}}<div class="radio"><input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" value="${value}" id="${id}_radio_${$index}" {{if value == data}}checked="checked"{{/if}}/><label for="${id}_radio_${$index}">${text}</label></div>{{/each}}',"itemLabel":'{{if options.itemLabel}}<div class="alpaca-controlfield-label"><div>${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span>{{/if}}</div></div>{{/if}}',"arrayToolbar":'<div class="alpaca-fieldset-array-toolbar btn-group"><button class="alpaca-fieldset-array-toolbar-icon alpaca-fieldset-array-toolbar-add btn btn-default">${addItemLabel}</button></span>',"arrayItemToolbar":'<div class="alpaca-fieldset-array-item-toolbar btn-group btn-group-sm">{{each(k,v) buttons}}<button class="alpaca-fieldset-array-item-toolbar-icon alpaca-fieldset-array-item-toolbar-${v.feature} btn btn-default btn-sm">${v.label}</button>{{/each}}</div>'});var displayTemplates=Alpaca.Create(editTemplates,{"fieldSetOuterEl":"<fieldset disabled>{{html this.html}}</fieldset>"});Alpaca.styleInjections["bootstrap"]={"field":function(targetDiv){$(targetDiv).find("input").addClass("form-control");$(targetDiv).find("textarea").addClass("form-control");$(targetDiv).find("select").addClass("form-control");$(targetDiv).find("input[type=checkbox]").removeClass("form-control");$(targetDiv).find("input[type=file]").removeClass("form-control");$(targetDiv).find("input[type=radio]").removeClass("form-control");$(targetDiv).find("input[type=radio]").parent().parent().addClass("radio");if($(targetDiv).parents("form").hasClass("form-inline")){$(targetDiv).find("input[type=checkbox]").parent().addClass("checkbox-inline");$(targetDiv).find("input[type=radio]").parent().addClass("radio-inline");}},"commonIcon":"","addIcon":"glyphicon glyphicon-plus-sign","removeIcon":"glyphicon glyphicon-minus-sign","upIcon":"glyphicon glyphicon-chevron-up","downIcon":"glyphicon glyphicon-chevron-down","containerExpandedIcon":"glyphicon glyphicon-circle-arrow-down","containerCollapsedIcon":"glyphicon glyphicon-circle-arrow-right","wizardPreIcon":"glyphicon glyphicon-chevron-left","wizardNextIcon":"glyphicon glyphicon-chevron-right","wizardDoneIcon":"glyphicon glyphicon-ok","required":function(targetDiv){$('<span class="glyphicon glyphicon-star"></span>&nbsp;').prependTo(targetDiv);},"error":function(targetDiv){targetDiv.addClass("has-error");},"removeError":function(targetDiv){targetDiv.removeClass("has-error");},"wizardStatusBar":function(targetDiv){targetDiv.addClass("ui-widget-header ui-corner-all");},"wizardCurrentStep":function(targetDiv){targetDiv.addClass("ui-state-highlight ui-corner-all");},"wizardUnCurrentStep":function(targetDiv){targetDiv.removeClass("ui-state-highlight ui-corner-all");},"buttonBeautifier":function(button,iconClass,withText){var buttonText=button.html();button.attr("title",buttonText);button.empty().append('<b class="alpaca-fieldset-legend-button '+iconClass+'"></b>');var addedButtonText=withText?buttonText:null;if(addedButtonText){button.append('<span class="alpaca-fieldset-legend-button-text">'+addedButtonText+"</span>");}}};var renderFunction=function(field,renderedCallback){var self=this;field.render(function(field){if(renderedCallback){renderedCallback.call(self,field);}});};Alpaca.registerView({"id":"VIEW_BOOTSTRAP_DISPLAY","parent":"VIEW_WEB_DISPLAY","title":"Display View for Bootstrap","description":"Display View for Bootstrap","style":"bootstrap","ui":"bootstrap","templates":displayTemplates,"render":renderFunction,"type":"view"});Alpaca.registerView({"id":"VIEW_BOOTSTRAP_EDIT","parent":"VIEW_WEB_EDIT","title":"Edit View for Bootstrap","description":"Edit View for Bootstrap","style":"bootstrap","ui":"bootstrap","templates":editTemplates,"render":renderFunction,"type":"edit"});Alpaca.registerView({"id":"VIEW_BOOTSTRAP_CREATE","parent":"VIEW_WEB_CREATE","title":"Create View for Bootstrap","description":"Create View for Bootstrap","style":"bootstrap","ui":"bootstrap","templates":editTemplates,"render":renderFunction,"type":"create"});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_WEB_EDIT_TABLE","parent":"VIEW_WEB_EDIT","title":"Web Edit View Table Style","description":"Web edit view based on table styles.","type":"edit","displayReadonly":true,"collapsible":false,"legendStyle":"link","templates":{"controlFieldOuterEl":null,"controlFieldLabel":'<td>{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</label>{{/if}}</td>',"controlFieldContainer":'<td data-control="append">{{html this.html}}</td>',"controlFieldMessage":'<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',"controlFieldHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}"><span class="ui-icon ui-icon-info"></span><span class="alpaca-controlfield-helper-text">${options.helper}</span></div>{{/if}}',"controlField":'{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}'+'{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}'+'{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}'+"{{/wrap}}","fieldSetOuterEl":'<fieldset class="alpaca-view-web-edit-table">{{html this.html}}</fieldset>',"fieldSetMessage":'<div><span class="ui-icon ui-icon-alert alpaca-fieldset-message-table-view"></span><span>${message}</span></div>',"fieldSetLegend":'{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',"fieldSetHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',"fieldSetItemsContainer":"<table><tbody>{{html this.html}}</tbody></table>","fieldSet":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',"fieldSetItemContainer":"<tr></tr>","itemLabel":'{{if options.itemLabel}}<label for="${id}" class="alpaca-controlfield-label alpaca-controlfield-label-list-view"><span class="alpaca-controlfield-item-label-list-view">${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span></span>{{/if}}</label>{{/if}}'},"styles":{},"fields":{"/":{"templates":{"fieldSetItemsContainer":'<table class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</table>',"fieldSetItemContainer":'<tr class="alpaca-fieldset-itemscontainer-list-view-top"></tr>'}}}});Alpaca.registerView({"id":"VIEW_WEB_CREATE_TABLE","parent":"VIEW_WEB_EDIT_TABLE","title":"Default Web Create View Table Stle","description":"Default web create view (Table Style) which doesn't bind initial data.","type":"create","displayReadonly":false});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_WEB_EDIT_YAML","parent":"VIEW_WEB_EDIT","title":"Web Edit View List Style","description":"Web edit list styled to look like a YAML editor.","type":"edit","displayReadonly":true,"collapsible":true,"legendStyle":"link","templates":{"controlFieldOuterEl":'<span class="alpaca-view-web-edit-yaml" title="${options.helper}">{{html this.html}}</span>',"controlFieldMessage":'<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',"controlFieldLabel":'{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}:</label>{{/if}}',"controlFieldHelper":'<span style="display:none" />',"controlFieldContainer":"<div>{{html this.html}}</div>","controlField":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}{{/wrap}}',"fieldSetOuterEl":'<fieldset class="alpaca-view-web-edit-yaml">{{html this.html}}</fieldset>',"fieldSetMessage":'<div><span class="ui-icon ui-icon-alert alpaca-fieldset-message-list-view"></span><span>${message}</span></div>',"fieldSetLegend":'{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',"fieldSetHelper":'{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',"fieldSetItemsContainer":"<ol>{{html this.html}}</ol>","fieldSet":'{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',"fieldSetItemContainer":'<li style="list-style:none;"></li>',"itemLabel":'{{if options.itemLabel}}<label for="${id}" class="alpaca-controlfield-label alpaca-controlfield-label-list-view"><span class="alpaca-controlfield-item-label-list-view">${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span></span>{{/if}}</label>{{/if}}'},"styles":{},"fields":{"/":{"templates":{"fieldSetItemsContainer":'<ol class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</ol>',"fieldSetItemContainer":'<li class="alpaca-fieldset-itemcontainer-list-view-top"></li>'}}}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_WEB_EDIT_INLINE","parent":"VIEW_WEB_EDIT","title":"Default Web Edit with fields inlining capabilities","description":"Edit template with form fields inlining capabilities, via options.inline level to display some forms parts inline. Useful to display for example an ArrayField containing ObjectField items in a compact manner.","type":"edit","platform":"web","style":"jquery-ui","displayReadonly":true,"templates":{"fieldSetOuterEl":'<fieldset class="{{if options.inline}}alpaca-inline{{/if}}">{{html this.html}}</fieldset>',"fieldSetItemContainer":'<div class="alpaca-inline-item-container"></div>',"arrayItemToolbar":'<div class="alpaca-fieldset-array-item-toolbar" data-role="controlgroup" data-type="horizontal" data-mini="true">'+'<span class="alpaca-fieldset-array-item-toolbar-add" data-role="button" data-icon="add" data-iconpos="notext">Add</span>'+'<span class="alpaca-fieldset-array-item-toolbar-remove" data-role="button" data-icon="delete" data-iconpos="notext">Delete</span>'+'<span class="alpaca-fieldset-array-item-toolbar-up" data-role="button" data-icon="arrow-u" data-iconpos="notext">Up</span>'+'<span class="alpaca-fieldset-array-item-toolbar-down" data-role="button" data-icon="arrow-d" data-iconpos="notext">Down</span></div>'}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_WEB_EDIT","templates":{"twoColumnLayout":'<div class="alpaca-layout-two-column-mask">'+"{{if options.label}}<h3>${options.label}</h3>{{/if}}"+"{{if options.helper}}<h4>${options.helper}</h4>{{/if}}"+'<div class="alpaca-layout-two-column-left alpaca-layout-region"  id="leftcolumn"></div>'+'<div class="alpaca-layout-two-column-right alpaca-layout-region" id="rightcolumn"></div>'+"</div>"}});Alpaca.registerView({"id":"VIEW_WEB_EDIT_LAYOUT_TWO_COLUMN","parent":"VIEW_WEB_EDIT","title":"Web Edit View with Two-Column Layout","description":"Web edit default view with two-column layout.","layout":{"template":"twoColumnLayout"}});Alpaca.registerView({"id":"VIEW_WEB_EDIT_LIST_LAYOUT_TWO_COLUMN","parent":"VIEW_WEB_EDIT_LIST","title":"Web List Edit View with Two-Column Layout","description":"Web edit list view with two-column layout.","layout":{"template":"twoColumnLayout"}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.NormalizedView=Base.extend({constructor:function(viewId){this.id=viewId;},normalize:function(){var viewObject=Alpaca.views[this.id];if(!viewObject){Alpaca.logError("View compilation failed - view not found: "+this.id);return false;}var chain=[];var current=viewObject;while(current){chain.push(current);var parentId=current.parent;if(parentId){var parent=Alpaca.views[current.parent];if(!parent){Alpaca.logError("View compilation failed - cannot find parent view: "+parentId+" for view: "+current.id);return false;}current=parent;}else{current=null;}}chain=chain.reverse();var setScalar=function(target,source,propertyId){var value=source[propertyId];var currentValue=target[propertyId];if(!Alpaca.isUndefined(currentValue)&&!Alpaca.isUndefined(value)){Alpaca.logDebug("View property: "+propertyId+" already has value: "+currentValue+" and overwriting to: "+value);}if(!Alpaca.isUndefined(value)){target[propertyId]=value;}};var setFunction=function(target,source,propertyId){var value=source[propertyId];var currentValue=target[propertyId];if(!Alpaca.isUndefined(currentValue)&&!Alpaca.isUndefined(value)){Alpaca.logDebug("View property: "+propertyId+" already has function, overwriting");}if(!Alpaca.isUndefined(value)){target[propertyId]=value;}};var mergeMap=function(target,source,propertyId){var sourceMap=source[propertyId];if(sourceMap){if(!target[propertyId]){target[propertyId]={};}Alpaca.mergeObject2(sourceMap,target[propertyId]);}};for(var i=0;i<chain.length;i++){var element=chain[i];setScalar(this,element,"type");setScalar(this,element,"displayReadonly");setScalar(this,element,"platform");setScalar(this,element,"device");setScalar(this,element,"style");setScalar(this,element,"ui");setScalar(this,element,"collapsible");setScalar(this,element,"legendStyle");setScalar(this,element,"toolbarStyle");setScalar(this,element,"buttonStyle");setScalar(this,element,"toolbarSticky");setScalar(this,element,"globalTemplate");setFunction(this,element,"render");setFunction(this,element,"postRender");mergeMap(this,element,"styles");mergeMap(this,element,"templates");mergeMap(this,element,"messages");mergeMap(this,element,"wizard");mergeMap(this,element,"fields");mergeMap(this,element,"layout");mergeMap(this,element,"compiledTemplates");}Alpaca.logDebug("View compilation complete for view: "+this.id);Alpaca.logDebug("Final view: ");Alpaca.logDebug(JSON.stringify(this,null,"   "));return true;}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.RuntimeView=Base.extend({constructor:function(viewId,field){this.field=field;this.setView(viewId);},setView:function(viewId){if(!viewId){this.id="VIEW_WEB_EDIT";return;}var normalizedView=Alpaca.getNormalizedView(viewId);if(!normalizedView){throw new Error("Runtime view for view id: "+viewId+" could not find a normalized view");}for(var k in normalizedView){if(normalizedView.hasOwnProperty(k)){this[k]=normalizedView[k];}}},getWizard:function(){return this.getViewParam("wizard");},getGlobalTemplateDescriptor:function(){return this.getTemplateDescriptor("globalTemplate");},getLayout:function(){var templateDescriptor=this.getTemplateDescriptor("layoutTemplate");return{"templateDescriptor":templateDescriptor,"bindings":this.getViewParam(["layout","bindings"],true)};},getStyles:function(){return this.styles;},getTemplateDescriptor:function(templateId){return Alpaca.getTemplateDescriptor(this,templateId);},getMessage:function(messageId){var messageForLocale=this.getViewParam(["messages",Alpaca.defaultLocale,messageId]);return Alpaca.isEmpty(messageForLocale)?this.getViewParam(["messages",messageId]):messageForLocale;},getViewParam:function(configId,topLevelOnly){var fieldPath=this.field.path;if(this.fields&&this.fields[fieldPath]){var configVal=this._getConfigVal(this.fields[fieldPath],configId);if(!Alpaca.isEmpty(configVal)){return configVal;}}if(fieldPath&&fieldPath.indexOf("[")!=-1&&fieldPath.indexOf("]")!=-1){fieldPath=fieldPath.replace(/\[\d+\]/g,"[*]");if(this.fields&&this.fields[fieldPath]){var configVal=this._getConfigVal(this.fields[fieldPath],configId);if(!Alpaca.isEmpty(configVal)){return configVal;}}}if(!Alpaca.isEmpty(topLevelOnly)&&topLevelOnly&&this.field.path!="/"){return null;}return this._getConfigVal(this,configId);},_getConfigVal:function(configVal,configId){if(Alpaca.isArray(configId)){for(var i=0;i<configId.length&&!Alpaca.isEmpty(configVal);i++){configVal=configVal[configId[i]];}}else{if(!Alpaca.isEmpty(configVal)){configVal=configVal[configId];}}return configVal;},getInjectedStyle:function(id){var injectedStyle=null;var injections={};if(this.style){var _injections=Alpaca.styleInjections[this.style];if(_injections){Alpaca.mergeObject(_injections,injections);}}return injectedStyle[id];},tmpl:function(templateDescriptor,model){return Alpaca.tmpl(templateDescriptor,model);}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Field=Base.extend({constructor:function(container,data,options,schema,viewId,connector,errorCallback){var self=this;this.initializing=true;this.container=container;this.parent=null;this.data=data;this.options=options;this.schema=schema;this.connector=connector;this.errorCallback=function(err){if(errorCallback){errorCallback(err);}else{Alpaca.defaultErrorCallback.call(self,err);}};this.singleLevelRendering=false;this.view=new Alpaca.RuntimeView(viewId,this);var noOptions=false;if(!this.options){this.options={};noOptions=true;}this.id=this.options.id;this.type=this.options.type;if(!this.id){this.id=Alpaca.generateId();}var noSchema=false;if(!this.schema){this.schema={};noSchema=true;}if(!this.options.label&&this.schema.title!==null){this.options.label=this.schema.title;}if(!this.options.helper&&this.schema.description!==null){this.options.helper=this.schema.description;}if(Alpaca.isEmpty(this.options.readonly)&&!Alpaca.isEmpty(this.schema.readonly)){this.options.readonly=this.schema.readonly;}if(Alpaca.isValEmpty(this.data)&&!Alpaca.isEmpty(this.schema["default"])){this.data=this.schema["default"];this.showingDefaultData=true;}this.path="/";this.validation={};this._events={};this.isDisplayOnly=function(){return(self.view.type=="view");};if(this.schema&&this.schema.id&&this.schema.id.indexOf("#")==0){this.schema.id=this.schema.id.substring(1);}this._previouslyValidated=false;},getDefaultFieldTemplateId:function(){return"controlField";},setDefaultTemplateDescriptor:function(){var viewTemplateDescriptor=this.view.getTemplateDescriptor(this.getDefaultFieldTemplateId());var globalTemplateDescriptor=this.view.getGlobalTemplateDescriptor();var layout=this.view.getLayout();var trip=false;if(!this.parent){if(globalTemplateDescriptor){this.setTemplateDescriptor(globalTemplateDescriptor);this.singleLevelRendering=true;trip=true;}else{if(layout&&layout.templateDescriptor){this.setTemplateDescriptor(layout.templateDescriptor);trip=true;}}}if(!trip&&viewTemplateDescriptor){this.setTemplateDescriptor(viewTemplateDescriptor);}},setup:function(){if(!this.initializing){this.data=this.getValue();}this.setDefaultTemplateDescriptor();if(Alpaca.isUndefined(this.schema.required)){this.schema.required=false;}if(Alpaca.isUndefined(this.options.validate)){this.options.validate=true;}if(Alpaca.isUndefined(this.options.disabled)){this.options.disabled=false;}if(Alpaca.isUndefined(this.options.showMessages)){this.options.showMessages=true;}},on:function(name,fn){Alpaca.logDebug("Adding listener for event: "+name);this._events[name]=fn;return this;},triggerWithPropagation:function(name,event){this.trigger.call(this,name,event);if(this.parent){this.parent.triggerWithPropagation.call(this.parent,name,event);}},trigger:function(name,event){var handler=this._events[name];var ret=null;if(typeof(handler)=="function"){Alpaca.logDebug("Firing event: "+name);try{ret=handler.call(this,event);}catch(e){Alpaca.logDebug("The event handler caught an exception: "+name);}}return ret;},bindData:function(){if(!Alpaca.isEmpty(this.data)){this.setValue(this.data);}},render:function(view,callback){if(view&&(Alpaca.isString(view)||Alpaca.isObject(view))){this.view.setView(view);}else{if(Alpaca.isEmpty(callback)&&Alpaca.isFunction(view)){callback=view;}}if(this.options.label===null&&this.propertyId){this.options.label=this.propertyId;}if(this.options.name){this.name=this.options.name;}if(!this.name){if(this.parent&&this.parent.name&&this.path){var lastSegment=this.path.substring(this.path.lastIndexOf("/")+1);if(lastSegment.indexOf("[")!=-1&&lastSegment.indexOf("]")!=-1){lastSegment=lastSegment.substring(lastSegment.indexOf("[")+1,lastSegment.indexOf("]"));}if(lastSegment){this.name=this.parent.name+"_"+lastSegment;this.nameCalculated=true;}}else{if(this.path){this.name=this.path.replace(/\//g,"").replace(/\[/g,"_").replace(/\]/g,"");this.nameCalculated=true;}}}this.setup();this._render(callback);},_render:function(callback){var _this=this;if(this.getEl()){this.getEl().remove();}if(this.options.renderForm){if(!this.options.form){this.options.form={};}this.options.form.viewType=this.view.type;var form=this.form;if(!form){form=new Alpaca.Form(this.container,this.options.form,this.view.id,this.connector,this.errorCallback);}form.render(function(form){_this._processRender(form.formFieldsContainer,function(){_this.getEl().appendTo(form.formFieldsContainer);form.topControl=_this;if(_this.view.type&&_this.view.type!="view"){form.initEvents();}_this.form=form;_this.postRender(function(){if(callback&&Alpaca.isFunction(callback)){callback(_this);}});});});}else{this._processRender(this.container,function(){_this.getEl().appendTo(_this.container);_this.postRender(function(){if(callback&&Alpaca.isFunction(callback)){callback(_this);}});});}},_processRender:function(parentEl,onSuccess){var _this=this;var templateDescriptor=this.getTemplateDescriptor();var theData=this.data;if(this.isDisplayOnly()&&typeof(theData)=="object"){theData=JSON.stringify(theData);}if(Alpaca.collectTiming){var t1=new Date().getTime();}var renderedDomElement=_this.view.tmpl(templateDescriptor,{"id":this.getId(),"options":this.options,"schema":this.schema,"data":theData,"view":this.view,"path":this.path,"name":this.name});if(Alpaca.collectTiming){var t2=new Date().getTime();var counters=Alpaca.Counters("tmpl");counters.increment(this.type,(t2-t1));}renderedDomElement.appendTo(parentEl);var newEl=renderedDomElement;if(renderedDomElement.size()>1){renderedDomElement.each(function(k,v){if($(this).attr("data-control")=="append"){newEl=$(this);}});}this.setEl(newEl);if(!this.singleLevelRendering){if(!this.isDisplayOnly()||(!this.isControlField)){this.renderField(function(){if(onSuccess){onSuccess(this);}});}else{if(onSuccess){onSuccess(this);}}}else{if(onSuccess){onSuccess(this);}}},renderField:function(onSuccess){},getStyleInjection:function(key,targetDiv,arg1,arg2){if(this.view.style&&Alpaca.styleInjections[this.view.style]&&Alpaca.styleInjections[this.view.style][key]){Alpaca.styleInjections[this.view.style][key].call(this,targetDiv,arg1,arg2);}},postRender:function(callback){if(this.view.type!="view"){this.getStyleInjection("field",this.getEl());this.getEl().addClass("alpaca-field");if(this.getEl().attr("id")===null){this.getEl().attr("id",this.getId()+"-field-outer");}if(Alpaca.isEmpty(this.getEl().attr("alpaca-field-id"))){this.getEl().attr("alpaca-field-id",this.getId());}if(this.schema.required){this.getEl().addClass("alpaca-field-required");}else{this.getEl().addClass("alpaca-field-optional");}if(this.options.readonly){this.getEl().addClass("alpaca-field-readonly");$(":input",this.getEl()).attr("readonly","readonly");$("select",this.getEl()).attr("disabled","disabled");$(":radio",this.getEl()).attr("disabled","disabled");$(":checkbox",this.getEl()).attr("disabled","disabled");}var applyFieldClass=function(el,thing){if(thing){var i=0;var tokens=null;if(Alpaca.isArray(thing)){for(i=0;i<thing.length;i++){el.addClass(thing[i]);}}else{if(thing.indexOf(",")>-1){tokens=thing.split(",");for(i=0;i<tokens.length;i++){el.addClass(tokens[i]);}}else{if(thing.indexOf(" ")>-1){tokens=thing.split(" ");for(i=0;i<tokens.length;i++){el.addClass(tokens[i]);}}else{el.addClass(thing);}}}}};applyFieldClass(this.getEl(),this.options["fieldClass"]);var customStyles=this.view.getStyles();if(customStyles){for(var styleClass in customStyles){$(styleClass,this.container).css(customStyles[styleClass]);}}if(this.labelDiv&&this.schema.required){this.getStyleInjection("required",this.labelDiv);}if(this.options.disabled){this.disable();}if(this.view.type&&this.view.type=="edit"){this.bindData();}else{if(this.showingDefaultData){this.bindData();}}if(this.view.type=="create"){Alpaca.logDebug("Skipping data binding for field: "+this.id+" since view mode is 'create'");}if(this.view.type&&this.view.type!="view"){this.initEvents();}}if(this.options.hidden){this.getEl().hide();}this.initializing=false;var defaultHideInitValidationError=(this.view.type=="create");this.hideInitValidationError=Alpaca.isValEmpty(this.options.hideInitValidationError)?defaultHideInitValidationError:this.options.hideInitValidationError;if(!this.view.displayReadonly){$(".alpaca-field-readonly",this.getEl()).hide();}if(this.options.postRender){this.options.postRender.call(this,function(){callback();});}else{callback();}},getEl:function(){return this.outerEl;},setEl:function(outerEl){this.outerEl=outerEl;},getId:function(){return this.id;},getParent:function(){return this.parent;},isTopLevel:function(){return Alpaca.isEmpty(this.parent);},getValue:function(){return this.data;},setValue:function(value){this.data=value;this.triggerUpdate();},setDefault:function(){},getTemplateDescriptor:function(){return this.templateDescriptor;},setTemplateDescriptor:function(templateDescriptor){this.templateDescriptor=templateDescriptor;},displayMessage:function(messages,beforeStatus){var _this=this;_this.getEl().children(".alpaca-controlfield-message-element").remove();if(messages&&messages.length>0){$.each(messages,function(index,message){if(message.length>0){var messageTemplateDescriptor=_this.view.getTemplateDescriptor("controlFieldMessage");if(messageTemplateDescriptor){_this.messageElement=_this.view.tmpl(messageTemplateDescriptor,{"message":message});_this.getStyleInjection("errorMessage",_this.messageElement);if(_this.hideInitValidationError){_this.messageElement.addClass("alpaca-controlfield-message-hidden");}else{_this.messageElement.addClass("alpaca-controlfield-message");}_this.messageElement.addClass("alpaca-controlfield-message-element");_this.messageElement.attr("id",_this.getId()+"-field-message-"+index);if($(".alpaca-controlfield-message-container",_this.getEl()).length){_this.messageElement.appendTo($(".alpaca-controlfield-message-container",_this.getEl()));}else{_this.messageElement.appendTo(_this.getEl());}}_this.getStyleInjection("addErrorMessage",_this.getEl(),message);}});}},refreshValidationState:function(children){if(children){var f=function(field,contexts){if(field.children&&field.children.length>0){for(var i=0;i<field.children.length;i++){if(field.children[i].isValidationParticipant()){f(field.children[i],contexts);}}}if(typeof(contexts)=="object"){var context=Alpaca.compileValidationContext(field);contexts.push(context);}return contexts;};var contexts=f(this,[]);var mergedMap={};var mergedContext=[];for(var i=0;i<contexts.length;i++){var context=contexts[i];var mIndex=mergedContext.length;for(var j=0;j<context.length;j++){var entry=context[j];var existing=mergedMap[entry.id];if(!existing){var newEntry={};newEntry.id=entry.id;newEntry.path=entry.path;newEntry.container=entry.container;newEntry.field=entry.field;newEntry.validated=entry.validated;newEntry.invalidated=entry.invalidated;newEntry.valid=entry.valid;mergedContext.splice(mIndex,0,newEntry);mergedMap[newEntry.id]=newEntry;}else{if(entry.validated&&!existing.invalidated){existing.validated=true;existing.invalidated=false;existing.valid=entry.valid;}if(entry.invalidated){existing.invalidated=true;existing.validated=false;existing.valid=entry.valid;}}}}mergedContext.reverse();Alpaca.updateValidationStateForContext(mergedContext);}else{var context=Alpaca.compileValidationContext(this);Alpaca.updateValidationStateForContext(context);}},showHiddenMessages:function(){var hiddenDiv=$(".alpaca-field-invalid-hidden",this.outerEl);hiddenDiv.removeClass("alpaca-field-invalid-hidden");this.getStyleInjection("error",hiddenDiv);hiddenDiv.addClass("alpaca-field-invalid");$(".alpaca-controlfield-message-hidden",this.outerEl).removeClass("alpaca-controlfield-message-hidden").addClass("alpaca-controlfield-message");},validate:function(validateChildren){var status=true;if(!this.initializing&&this.options.validate){if(this.children&&validateChildren){for(var i=0;i<this.children.length;i++){var child=this.children[i];if(child.isValidationParticipant()){child.validate(validateChildren);}}}status=this.handleValidate();if(!status&&Alpaca.logLevel==Alpaca.DEBUG){var messages=[];for(var messageId in this.validation){if(!this.validation[messageId]["status"]){messages.push(this.validation[messageId]["message"]);}}Alpaca.logDebug("Validation failure for field (id="+this.getId()+", path="+this.path+"), messages: "+JSON.stringify(messages));}}this._previouslyValidated=true;return status;},handleValidate:function(){var valInfo=this.validation;var status=this._validateOptional();valInfo["notOptional"]={"message":status?"":this.view.getMessage("notOptional"),"status":status};status=this._validateDisallow();valInfo["disallowValue"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("disallowValue"),[this.schema["disallow"].join(",")]),"status":status};return valInfo["notOptional"]["status"]&&valInfo["disallowValue"]["status"];},_validateCustomValidator:function(callback){var _this=this;if(this.options.validator&&Alpaca.isFunction(this.options.validator)){this.options.validator(this,function(valInfo){_this.validation["custom"]=valInfo;callback();});}else{callback();}},_validateOptional:function(){if(this.schema.required&&this.isEmpty()){return false;}return true;},_validateDisallow:function(){if(!Alpaca.isValEmpty(this.schema.disallow)){var val=this.getValue();var disallow=this.schema.disallow;if(Alpaca.isArray(disallow)){var isAllowed=true;$.each(disallow,function(index,value){if((Alpaca.isObject(val)||Alpaca.isArray(val))&&Alpaca.isString(value)){value=Alpaca.parseJSON(value);}if(Alpaca.compareObject(val,value)){isAllowed=false;}});return isAllowed;}else{if((Alpaca.isObject(val)||Alpaca.isArray(val))&&Alpaca.isString(disallow)){disallow=Alpaca.parseJSON(disallow);}return !Alpaca.compareObject(val,disallow);}}return true;},triggerUpdate:function(){this.getEl().trigger("fieldupdate");},disable:function(){},enable:function(){},focus:function(){},destroy:function(){if(Alpaca&&Alpaca.fieldInstances){if(Alpaca.fieldInstances[this.getId()]){delete Alpaca.fieldInstances[this.getId()];}}this.getEl().remove();},show:function(){if(this.options&&this.options.hidden){return;}else{this.getEl().css({"display":""});this.onShow();}},onShow:function(){},hide:function(){this.getEl().css({"display":"none"});this.onHide();},onHide:function(){},isValidationParticipant:function(){return this.isShown();},isShown:function(){return this.isVisible();},isVisible:function(){return !this.isHidden();},isHidden:function(){return"none"==this.getEl().css("display");},print:function(){if(this.container.printArea){this.container.printArea();}},onDependentReveal:function(){},onDependentConceal:function(){},reload:function(){this.initializing=true;if(!Alpaca.isEmpty(this.callback)){this.callback(this,this.renderedCallback);}else{this.render(this.renderedCallback);}},clear:function(){var newValue=null;if(this.data){newValue=this.data;}this.setValue(newValue);},isEmpty:function(){return Alpaca.isValEmpty(this.getValue());},isValid:function(checkChildren){if(checkChildren&&this.children){for(var i=0;i<this.children.length;i++){var child=this.children[i];if(child.isValidationParticipant()){if(!child.isValid(checkChildren)){return false;}}}}if($.isEmptyObject(this.validation)){return true;}else{for(var key in this.validation){if(!this.validation[key].status){return false;}}return true;}},initEvents:function(){var _this=this;if(this.field){this.field.change(function(e){_this.onChange.call(_this,e);_this.trigger("change",e);});this.field.focus(function(e){_this.onFocus.call(_this,e);_this.trigger("focus",e);});this.field.blur(function(e){_this.onBlur.call(_this,e);_this.trigger("blur",e);});this.field.mouseover(function(e){_this.onMouseOver.call(_this,e);_this.trigger("mouseover",e);});this.field.mouseout(function(e){_this.onMouseOut.call(_this,e);_this.trigger("mouseout",e);});$.each(this.options,function(key,func){if(Alpaca.startsWith(key,"onField")&&Alpaca.isFunction(func)){var event=key.substring(7).toLowerCase();_this.field.on(event,function(e){func.call(_this,e);});}});}},onFocus:function(e){this.getEl().removeClass("alpaca-field-empty");this.getEl().addClass("alpaca-field-focused");},onBlur:function(e){this.getEl().removeClass("alpaca-field-focused");this.refreshValidationState();},onChange:function(e){this.data=this.getValue();this.triggerUpdate();},onMouseOver:function(e){},onMouseOut:function(e){},getControlByPath:function(path){var parentControl=this;if(path){var pathArray=path.split("/");for(var i=0;i<pathArray.length;i++){if(!Alpaca.isValEmpty(pathArray[i])){if(parentControl&&parentControl.childrenByPropertyId){if(parentControl.childrenByPropertyId[pathArray[i]]){parentControl=parentControl.childrenByPropertyId[pathArray[i]];}else{return null;}}else{return null;}}else{return null;}}return parentControl;}},getFieldType:function(){},getType:function(){},isContainer:function(){return false;},getTitle:function(){},getDescription:function(){},getSchemaOfSchema:function(){var schemaOfSchema={"title":this.getTitle(),"description":this.getDescription(),"type":"object","properties":{"title":{"title":"Title","description":"Short description of the property.","type":"string"},"description":{"title":"Description","description":"Detailed description of the property.","type":"string"},"readonly":{"title":"Readonly","description":"Property will be readonly if true.","type":"boolean","default":false},"required":{"title":"Required","description":"Property value must be set if true.","type":"boolean","default":false},"default":{"title":"Default","description":"Default value of the property.","type":"any"},"type":{"title":"Type","description":"Data type of the property.","type":"string","readonly":true},"format":{"title":"Format","description":"Data format of the property.","type":"string"},"disallow":{"title":"Disallowed Values","description":"List of disallowed values for the property.","type":"array"},"dependencies":{"title":"Dependencies","description":"List of property dependencies.","type":"array"}}};if(this.getType&&!Alpaca.isValEmpty(this.getType())){schemaOfSchema.properties.type["default"]=this.getType();schemaOfSchema.properties.type["enum"]=[this.getType()];}return schemaOfSchema;},getOptionsForSchema:function(){return{"fields":{"title":{"helper":"Field short description","type":"text"},"description":{"helper":"Field detailed description","type":"textarea"},"readonly":{"helper":"Field will be read only if checked","rightLabel":"This field is read-only","type":"checkbox"},"required":{"helper":"Field value must be set if checked","rightLabel":"This field is required","type":"checkbox"},"default":{"helper":"Field default value","type":"textarea"},"type":{"helper":"Field data type","type":"text"},"format":{"type":"select","dataSource":function(field,callback){for(var key in Alpaca.defaultFormatFieldMapping){field.selectOptions.push({"value":key,"text":key});}if(callback){callback();}}},"disallow":{"helper":"Disallowed values for the field","itemLabel":"Value","type":"array"},"dependencies":{"helper":"Field Dependencies","multiple":true,"size":3,"type":"select","dataSource":function(field,callback){if(field.parent&&field.parent.schemaParent&&field.parent.schemaParent.parent){for(var key in field.parent.schemaParent.parent.childrenByPropertyId){if(key!=field.parent.schemaParent.propertyId){field.selectOptions.push({"value":key,"text":key});}}}if(callback){callback();}}}}};},getSchemaOfOptions:function(){var schemaOfOptions={"title":"Options for "+this.getTitle(),"description":this.getDescription()+" (Options)","type":"object","properties":{"renderForm":{},"form":{},"id":{"title":"Field Id","description":"Unique field id. Auto-generated if not provided.","type":"string"},"type":{"title":"Field Type","description":"Field type.","type":"string","default":this.getFieldType(),"readonly":true},"validate":{"title":"Validation","description":"Field validation is required if true.","type":"boolean","default":true},"showMessages":{"title":"Show Messages","description":"Display validation messages if true.","type":"boolean","default":true},"disabled":{"title":"Disabled","description":"Field will be disabled if true.","type":"boolean","default":false},"readonly":{"title":"Readonly","description":"Field will be readonly if true.","type":"boolean","default":false},"hidden":{"title":"Hidden","description":"Field will be hidden if true.","type":"boolean","default":false},"label":{"title":"Label","description":"Field label.","type":"string"},"helper":{"title":"Helper","description":"Field help message.","type":"string"},"fieldClass":{"title":"CSS class","description":"Specifies one or more CSS classes that should be applied to the dom element for this field once it is rendered.  Supports a single value, comma-delimited values, space-delimited values or values passed in as an array.","type":"string"},"hideInitValidationError":{"title":"Hide Initial Validation Errors","description":"Hide initial validation errors if true.","type":"boolean","default":false},"focus":{"title":"Focus","description":"If true, the initial focus for the form will be set to the first child element (usually the first field in the form).  If a field name or path is provided, then the specified child field will receive focus.  For example, you might set focus to 'name' (selecting the 'name' field) or you might set it to 'client/name' which picks the 'name' field on the 'client' object.","type":"checkbox","default":true},"optionLabels":{"title":"Enumerated Value Labels","description":"An array of string labels for items in the enum array","type":"array"}}};if(this.isTopLevel()){schemaOfOptions.properties.renderForm={"title":"Render Form","description":"Render a FORM tag as the container for the rest of fields if true.","type":"boolean","default":false};schemaOfOptions.properties.form={"title":"Form","description":"Options for rendering the FORM tag.","type":"object","dependencies":"renderForm","properties":{"attributes":{"title":"Form Attributes","description":"List of attributes for the FORM tag.","type":"object","properties":{"id":{"title":"Id","description":"Unique form id. Auto-generated if not provided.","type":"string"},"action":{"title":"Action","description":"Form submission endpoint","type":"string"},"method":{"title":"Method","description":"Form submission method","enum":["post","get"],"type":"string"},"rubyrails":{"title":"Ruby On Rails","description":"Ruby on Rails Name Standard","enum":["true","false"],"type":"string"},"name":{"title":"Name","description":"Form name","type":"string"},"focus":{"title":"Focus","description":"Focus Setting","type":"any"}}},"buttons":{"title":"Form Buttons","description":"Configuration for form-bound buttons","type":"object","properties":{"submit":{"type":"object","title":"Submit Button","required":false},"reset":{"type":"object","title":"Reset button","required":false}}},"toggleSubmitValidState":{"title":"Toggle Submit Valid State","description":"Toggle the validity state of the Submit button","type":"boolean","default":true}}};}else{delete schemaOfOptions.properties.renderForm;delete schemaOfOptions.properties.form;}return schemaOfOptions;},getOptionsForOptions:function(){var optionsForOptions={"type":"object","fields":{"id":{"type":"text","readonly":true},"type":{"type":"text"},"validate":{"rightLabel":"Enforce validation","type":"checkbox"},"showMessages":{"rightLabel":"Show validation messages","type":"checkbox"},"disabled":{"rightLabel":"Disable this field","type":"checkbox"},"hidden":{"type":"checkbox","rightLabel":"Hide this field"},"label":{"type":"text"},"helper":{"type":"textarea"},"fieldClass":{"type":"text"},"hideInitValidationError":{"rightLabel":"Hide initial validation errors","type":"checkbox"},"focus":{"type":"checkbox","rightLabel":"Auto-focus first child field"},"optionLabels":{"type":"array","items":{"type":"string"}}}};if(this.isTopLevel()){optionsForOptions.fields.renderForm={"type":"checkbox","rightLabel":"Yes"};optionsForOptions.fields.form={"type":"object","dependencies":{"renderForm":true},"fields":{"attributes":{"type":"object","fields":{"id":{"type":"text","readonly":true},"action":{"type":"text"},"method":{"type":"select"},"name":{"type":"text"}}}}};}return optionsForOptions;}});Alpaca.registerMessages({"disallowValue":"{0} are disallowed values.","notOptional":"This field is not optional."});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.ControlField=Alpaca.Field.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);this.isControlField=true;},setDefault:function(){var defaultData=Alpaca.isEmpty(this.schema["default"])?"":this.schema["default"];this.setValue(defaultData);},renderField:function(onSuccess){if(onSuccess){onSuccess();}},injectField:function(element){var containerElem=$(".alpaca-controlfield-container",this.outerEl);if(containerElem.length){this.fieldContainer=containerElem;}else{this.fieldContainer=this.outerEl;}var parentNode=$(".alpaca-field-container-field",this.fieldContainer);if(parentNode.length>0){if(parentNode.attr("data-replace")=="true"){parentNode.replaceWith(element);}else{element.appendTo(parentNode);}}else{if(this.fieldContainer.attr("data-replace")=="true"){this.fieldContainer.replaceWith(element);}else{element.prependTo(this.fieldContainer);}}},postRender:function(callback){var self=this;var labelDiv=$(".alpaca-controlfield-label",this.outerEl);if(labelDiv.length){this.labelDiv=labelDiv;}var helperDiv=$(".alpaca-controlfield-helper",this.outerEl);if(helperDiv.length){this.helperDiv=helperDiv;}this.base(function(){self.outerEl.addClass("alpaca-controlfield");callback();});},_validateEnum:function(){if(this.schema["enum"]){var val=this.data;if(!this.schema.required&&Alpaca.isValEmpty(val)){return true;}if($.inArray(val,this.schema["enum"])>-1){return true;}else{return false;}}else{return true;}},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateEnum();valInfo["invalidValueOfEnum"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("invalidValueOfEnum"),[this.schema["enum"].join(",")]),"status":status};return baseStatus&&valInfo["invalidValueOfEnum"]["status"];},initEvents:function(){this.base();var _this=this;if(this.field){this.field.keypress(function(e){_this.onKeyPress.call(_this,e);_this.trigger("keypress",e);});this.field.keyup(function(e){_this.onKeyUp.call(_this,e);_this.trigger("keyup",e);});this.field.keydown(function(e){_this.onKeyDown.call(_this,e);_this.trigger("keydown",e);});this.field.click(function(e){_this.onClick.call(_this,e);_this.trigger("click",e);});}},onKeyPress:function(e){var self=this;var wasValid=this.isValid();if(!wasValid){window.setTimeout(function(){self.refreshValidationState();},50);}},onKeyDown:function(e){},onKeyUp:function(e){},onClick:function(e){},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{"enum":{"title":"Enumerated Values","description":"List of specific values for this property","type":"array"}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"enum":{"itemLabel":"Value","type":"array"}}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"name":{"title":"Field Name","description":"Field Name.","type":"string"}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"name":{"type":"text"}}});}});Alpaca.registerMessages({"invalidValueOfEnum":"This field should have one of the values in {0}."});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.ContainerField=Alpaca.Field.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();var collapsible=true;if(!Alpaca.isEmpty(this.view.collapsible)){collapsible=this.view.collapsible;}if(!Alpaca.isEmpty(this.options.collapsible)){collapsible=this.options.collapsible;}this.options.collapsible=collapsible;var legendStyle="button";if(!Alpaca.isEmpty(this.view.legendStyle)){legendStyle=this.view.legendStyle;}if(!Alpaca.isEmpty(this.options.legendStyle)){legendStyle=this.options.legendStyle;}this.options.legendStyle=legendStyle;this.lazyLoading=false;if(!Alpaca.isEmpty(this.options.lazyLoading)){this.lazyLoading=this.options.lazyLoading;if(this.lazyLoading){this.options.collapsed=true;}}this.children=[];this.childrenById=[];this.childrenByPropertyId=[];this.expandedIcon="";this.collapsedIcon="";this.commonIcon="";this.addIcon="";this.removeIcon="";this.upIcon="";this.downIcon="";if(this.view.style&&Alpaca.styleInjections[this.view.style]){if(Alpaca.styleInjections[this.view.style]["commonIcon"]){this.commonIcon=Alpaca.styleInjections[this.view.style]["commonIcon"];}if(Alpaca.styleInjections[this.view.style]["containerExpandedIcon"]){this.expandedIcon=Alpaca.styleInjections[this.view.style]["containerExpandedIcon"];}if(Alpaca.styleInjections[this.view.style]["containerCollapsedIcon"]){this.collapsedIcon=Alpaca.styleInjections[this.view.style]["containerCollapsedIcon"];}if(Alpaca.styleInjections[this.view.style]["buttonBeautifier"]){this.buttonBeautifier=Alpaca.styleInjections[this.view.style]["buttonBeautifier"];}if(Alpaca.styleInjections[this.view.style]["addIcon"]){this.addIcon=Alpaca.styleInjections[this.view.style]["addIcon"];}if(Alpaca.styleInjections[this.view.style]["removeIcon"]){this.removeIcon=Alpaca.styleInjections[this.view.style]["removeIcon"];}if(Alpaca.styleInjections[this.view.style]["upIcon"]){this.upIcon=Alpaca.styleInjections[this.view.style]["upIcon"];}if(Alpaca.styleInjections[this.view.style]["downIcon"]){this.downIcon=Alpaca.styleInjections[this.view.style]["downIcon"];}}},getDefaultFieldTemplateId:function(){return"fieldSet";},setDefaultTemplateDescriptor:function(){this.base();},addChild:function(child,index){if(!Alpaca.isEmpty(index)){this.children.splice(index,0,child);}else{this.children.push(child);}this.childrenById[child.getId()]=child;if(child.propertyId){this.childrenByPropertyId[child.propertyId]=child;}child.parent=this;},initEvents:function(){var _this=this;if(this.labelDiv){if(this.options.collapsible){this.labelDiv.addClass("legend-expanded");this.fieldSetDiv.addClass("fieldset-expanded");var initIcon=this.expandedIcon;if(!Alpaca.isEmpty(this.options.collapsed)&&this.options.collapsed){initIcon=this.collapsedIcon;this.labelDiv.nextAll(".alpaca-fieldset-helper").slideToggle(500);this.labelDiv.nextAll(".alpaca-fieldset-items-container").slideToggle(500);this.labelDiv.nextAll(".alpaca-fieldset-array-toolbar").slideToggle(500);this.fieldSetDiv.toggleClass("fieldset-expanded");this.fieldSetDiv.toggleClass("fieldset-collapsed");this.labelDiv.toggleClass("legend-expanded");this.labelDiv.toggleClass("legend-collapsed");}if(this.options.legendStyle=="link"){$('<span class="'+this.commonIcon+" "+initIcon+' alpaca-fieldset-legend-link"></span>').prependTo(this.labelDiv);this.labelDiv.click(function(){_this.fieldSetDiv.toggleClass("fieldset-collapsed");_this.fieldSetDiv.toggleClass("fieldset-expanded");$(this).toggleClass("legend-collapsed");$(this).toggleClass("legend-expanded");$(".alpaca-fieldset-legend-link",this).toggleClass(_this.collapsedIcon).toggleClass(_this.expandedIcon);$(this).nextAll(".alpaca-fieldset-helper").slideToggle(500);$(this).nextAll(".alpaca-fieldset-items-container").slideToggle(500);$(this).nextAll(".alpaca-fieldset-array-toolbar").slideToggle(500);});}if(this.options.legendStyle=="button"){if(this.buttonBeautifier){this.buttonBeautifier.call(this,this.labelDiv,initIcon,true);}this.labelDiv.click(function(){_this.fieldSetDiv.toggleClass("fieldset-collapsed");_this.fieldSetDiv.toggleClass("fieldset-expanded");$(this).toggleClass("legend-collapsed");$(this).toggleClass("legend-expanded");$(".alpaca-fieldset-legend-button",this).toggleClass(_this.collapsedIcon).toggleClass(_this.expandedIcon);$(this).nextAll(".alpaca-fieldset-helper").slideToggle(500);$(this).nextAll(".alpaca-fieldset-items-container").slideToggle(500);$(this).nextAll(".alpaca-fieldset-array-toolbar").slideToggle(500);});}}}},clear:function(stopUpdateTrigger){Alpaca.each(this.children,function(){this.clear(false);});if(!stopUpdateTrigger){this.triggerUpdate();}},setDefault:function(){if(Alpaca.isEmpty(this.schema["default"])){Alpaca.each(this.children,function(){this.setDefault();});}else{this.setValue(this.schema["default"]);}},destroy:function(){if(this.form){this.form.destroy(true);delete this.form;}Alpaca.each(this.children,function(){this.destroy();});this.base();},renderItemContainer:function(insertAfterId,parent,propertyId){var _this=this;var itemContainerTemplateDescriptor=this.view.getTemplateDescriptor("fieldSetItemContainer");if(itemContainerTemplateDescriptor){var containerElem=_this.view.tmpl(itemContainerTemplateDescriptor,{});if(containerElem.attr("data-replace")=="true"){return this.fieldContainer;}else{if(insertAfterId){$("#"+insertAfterId+"-item-container",this.outerEl).after(containerElem);}else{var appendToContainer=this.fieldContainer;var bindings=this.view.getLayout().bindings;if(bindings){var binding=bindings[propertyId];if(binding&&$("#"+binding,appendToContainer).length>0){appendToContainer=$("#"+binding,appendToContainer);}}containerElem.appendTo(appendToContainer);}}return containerElem;}else{return this.fieldContainer;}},renderField:function(onSuccess){var _this=this;this.getStyleInjection("container",this.outerEl);var labelDiv=$(".alpaca-fieldset-legend",this.outerEl);if(labelDiv.length){this.labelDiv=labelDiv;}else{this.outerEl.addClass("alpaca-fieldset-no-legend");}var fieldSetDiv=$(".alpaca-fieldset",this.outerEl);if(fieldSetDiv.length){this.fieldSetDiv=fieldSetDiv;}else{this.fieldSetDiv=this.outerEl;}var fieldContainer=$(".alpaca-fieldset-items-container",this.outerEl);if(fieldContainer.length){this.fieldContainer=fieldContainer;}else{this.fieldContainer=this.outerEl;}var asyncHandler=false;if(!this.singleLevelRendering&&!this.lazyLoading){asyncHandler=true;this.renderItems(function(){if(onSuccess){onSuccess();}});}if(this.lazyLoading){if(this.labelDiv){asyncHandler=true;$(this.labelDiv).click(function(){if(_this.lazyLoading){_this.renderItems(function(){_this.lazyLoading=false;if(onSuccess){onSuccess();}});}});}}if(!asyncHandler){if(onSuccess){onSuccess();}}},onDependentReveal:function(){for(var i=0;i<this.children.length;i++){this.children[i].onDependentReveal();}},onDependentConceal:function(){for(var i=0;i<this.children.length;i++){this.children[i].onDependentConceal();}},renderItems:function(onSuccess){},isContainer:function(){return true;},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"lazyLoading":{"title":"Lazy Loading","description":"Child fields will only be rendered when the fieldset is expanded if this option is set true.","type":"boolean","default":false},"collapsible":{"title":"Collapsible","description":"Field set is collapsible if true.","type":"boolean","default":true},"collapsed":{"title":"Collapsed","description":"Field set is initially collapsed if true.","type":"boolean","default":false},"legendStyle":{"title":"Legend Style","description":"Field set legend style.","type":"string","enum":["button","link"],"default":"button"}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"lazyLoading":{"rightLabel":"Lazy loading child fields ?","helper":"Lazy loading will be enabled if checked.","type":"checkbox"},"collapsible":{"rightLabel":"Field set collapsible ?","helper":"Field set is collapsible if checked.","type":"checkbox"},"collapsed":{"rightLabel":"Field set initially collapsed ?","description":"Field set is initially collapsed if checked.","type":"checkbox"},"legendStyle":{"type":"select"}}});}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Connector=Base.extend({constructor:function(id){this.id=id;this.isUri=function(resource){return !Alpaca.isEmpty(resource)&&Alpaca.isUri(resource);};var ONE_HOUR=3600000;this.cache=new ajaxCache("URL",true,ONE_HOUR);},connect:function(onSuccess,onError){if(onSuccess&&Alpaca.isFunction(onSuccess)){onSuccess();}},loadTemplate:function(source,onSuccess,onError){if(!Alpaca.isEmpty(source)){if(Alpaca.isUri(source)){this.loadUri(source,false,function(loadedData){if(onSuccess&&Alpaca.isFunction(onSuccess)){onSuccess(loadedData);}},function(loadError){if(onError&&Alpaca.isFunction(onError)){onError(loadError);}});}else{onSuccess(source);}}else{onError({"message":"Empty data source.","reason":"TEMPLATE_LOADING_ERROR"});}},loadData:function(resource,successCallback,errorCallback){return this._handleLoadJsonResource(resource,successCallback,errorCallback);},loadSchema:function(resource,successCallback,errorCallback){return this._handleLoadJsonResource(resource,successCallback,errorCallback);},loadOptions:function(resource,successCallback,errorCallback){return this._handleLoadJsonResource(resource,successCallback,errorCallback);},loadView:function(resource,successCallback,errorCallback){return this._handleLoadJsonResource(resource,successCallback,errorCallback);},loadAll:function(resources,onSuccess,onError){var dataSource=resources.dataSource;var schemaSource=resources.schemaSource;var optionsSource=resources.optionsSource;var viewSource=resources.viewSource;if(!schemaSource){schemaSource=resources.schema;}if(!optionsSource){optionsSource=resources.options;}if(!viewSource){viewSource=resources.view;}var loaded={};var loadCounter=0;var invocationCount=0;var successCallback=function(){if(loadCounter===invocationCount){if(onSuccess&&Alpaca.isFunction(onSuccess)){onSuccess(loaded.data,loaded.options,loaded.schema,loaded.view);}}};var errorCallback=function(loadError){if(onError&&Alpaca.isFunction(onError)){onError(loadError);}};if(dataSource){invocationCount++;}if(schemaSource){invocationCount++;}if(optionsSource){invocationCount++;}if(viewSource){invocationCount++;}if(invocationCount===0){successCallback();return;}if(dataSource){this.loadData(dataSource,function(data){loaded.data=data;loadCounter++;successCallback();},errorCallback);}if(schemaSource){this.loadSchema(schemaSource,function(schema){loaded.schema=schema;loadCounter++;successCallback();},errorCallback);}if(optionsSource){this.loadOptions(optionsSource,function(options){loaded.options=options;loadCounter++;successCallback();},errorCallback);}if(viewSource){this.loadView(viewSource,function(view){loaded.view=view;loadCounter++;successCallback();},errorCallback);}},loadJson:function(uri,onSuccess,onError){this.loadUri(uri,true,onSuccess,onError);},loadUri:function(uri,isJson,onSuccess,onError){var self=this;var ajaxConfigs={"url":uri,"type":"get","success":function(jsonDocument){self.cache.put(uri,jsonDocument);if(onSuccess&&Alpaca.isFunction(onSuccess)){onSuccess(jsonDocument);}},"error":function(jqXHR,textStatus,errorThrown){if(onError&&Alpaca.isFunction(onError)){onError({"message":"Unable to load data from uri : "+uri,"stage":"DATA_LOADING_ERROR","details":{"jqXHR":jqXHR,"textStatus":textStatus,"errorThrown":errorThrown}});}}};if(isJson){ajaxConfigs.dataType="json";}else{ajaxConfigs.dataType="text";}var cachedDocument=self.cache.get(uri);if(cachedDocument!==false&&onSuccess&&Alpaca.isFunction(onSuccess)){onSuccess(cachedDocument);}else{$.ajax(ajaxConfigs);}},loadReferenceSchema:function(resource,successCallback,errorCallback){return this._handleLoadJsonResource(resource,successCallback,errorCallback);},loadReferenceOptions:function(resource,successCallback,errorCallback){return this._handleLoadJsonResource(resource,successCallback,errorCallback);},_handleLoadJsonResource:function(resource,successCallback,errorCallback){if(this.isUri(resource)){this.loadJson(resource,function(loadedResource){successCallback(loadedResource);},errorCallback);}else{successCallback(resource);}}});Alpaca.registerConnectorClass("default",Alpaca.Connector);
/*!
     * ajax-cache JavaScript Library v0.2.1
     * http://code.google.com/p/ajax-cache/
     *
     * Includes few JSON methods (open source)
     * http://www.json.org/js.html
     *
     * Date: 2010-08-03
     */
function ajaxCache(type,on,lifetime){if(on){this.on=true;}else{this.on=false;}if(lifetime!=null){this.defaultLifetime=lifetime;}this.type=type;switch(this.type){case"URL":this.put=this.put_url;break;case"GET":this.put=this.put_GET;break;}}ajaxCache.prototype.on=false;ajaxCache.prototype.type;ajaxCache.prototype.defaultLifetime=1800000;ajaxCache.prototype.items=Object();ajaxCache.prototype.put_url=function(url,response,lifetime){if(lifetime==null){lifetime=this.defaultLifetime;}var key=this.make_key(url);this.items[key]=Object();this.items[key].key=key;this.items[key].url=url;this.items[key].response=response;this.items[key].expire=(new Date().getTime())+lifetime;return true;};ajaxCache.prototype.put_GET=function(url,data,response,lifetime){if(lifetime==null){lifetime=this.defaultLifetime;}var key=this.make_key(url,[data]);this.items[key]=Object();this.items[key].key=key;this.items[key].url=url;this.items[key].data=data;this.items[key].response=response;this.items[key].expire=(new Date().getTime())+lifetime;return true;};ajaxCache.prototype.get=function(url,params){var key=this.make_key(url,params);if(this.items[key]==null){return false;}if(this.items[key].expire<(new Date().getTime())){return false;}return this.items[key].response;};ajaxCache.prototype.make_key=function(url,params){var key=url;switch(this.type){case"URL":break;case"GET":key+=this.stringify(params[0]);break;}return key;};ajaxCache.prototype.flush=function(){cache.items=Object();return true;};ajaxCache.prototype.stringify=function(value,replacer,space){var i;gap="";indent="";if(typeof space==="number"){for(i=0;i<space;i+=1){indent+=" ";}}else{if(typeof space==="string"){indent=space;}}rep=replacer;if(replacer&&typeof replacer!=="function"&&(typeof replacer!=="object"||typeof replacer.length!=="number")){throw new Error("JSON.stringify");}return this.str("",{"":value});};ajaxCache.prototype.quote=function(string){var escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==="string"?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4);})+'"':'"'+string+'"';};ajaxCache.prototype.str=function(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==="object"&&typeof value.toJSON==="function"){value=value.toJSON(key);}if(typeof rep==="function"){value=rep.call(holder,key,value);}switch(typeof value){case"string":return this.quote(value);case"number":return isFinite(value)?String(value):"null";case"boolean":case"null":return String(value);case"object":if(!value){return"null";}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==="[object Array]"){length=value.length;for(i=0;i<length;i+=1){partial[i]=this.str(i,value)||"null";}v=partial.length===0?"[]":gap?"[\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"]":"["+partial.join(",")+"]";gap=mind;return v;}if(rep&&typeof rep==="object"){length=rep.length;for(i=0;i<length;i+=1){k=rep[i];if(typeof k==="string"){v=this.str(k,value);if(v){partial.push(this.quote(k)+(gap?": ":":")+v);}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=this.str(k,value);if(v){partial.push(this.quote(k)+(gap?": ":":")+v);}}}}v=partial.length===0?"{}":gap?"{\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"}":"{"+partial.join(",")+"}";gap=mind;return v;}};})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Form=Base.extend({constructor:function(container,options,viewId,connector,errorCallback){var _this=this;this.container=container;this.parent=null;this.connector=connector;this.errorCallback=errorCallback;this.options=options;if(this.options.attributes){this.attributes=this.options.attributes;}else{this.attributes={};}if(this.options.buttons){if(this.options.buttons.submit){if(!this.options.buttons.submit.type){this.options.buttons.submit.type="submit";}if(!this.options.buttons.submit.name){this.options.buttons.submit.name="submit";}if(!this.options.buttons.submit.value){this.options.buttons.submit.value="Submit";}}if(this.options.buttons.reset){if(!this.options.buttons.reset.type){this.options.buttons.reset.type="reset";}if(!this.options.buttons.reset.name){this.options.buttons.reset.name="reset";}if(!this.options.buttons.reset.value){this.options.buttons.reset.value="Reset";}}}if(this.attributes.id){this.id=this.attributes.id;}else{this.id=Alpaca.generateId();this.attributes.id=this.id;}if(this.options.buttons&&this.options.buttons.submit&&Alpaca.isUndefined(this.options.toggleSubmitValidState)){this.options.toggleSubmitValidState=true;}this.viewType=options.viewType;this.view=new Alpaca.RuntimeView(viewId,this);},render:function(onSuccess){var _this=this;this.templateDescriptor=this.view.getTemplateDescriptor("form");if(this.outerEl){this.outerEl.remove();}this.processRender(this.container,function(){_this.outerEl.appendTo(_this.container);_this.outerEl.addClass("alpaca-form");if(onSuccess){onSuccess(_this);}});},isFormValid:function(){this.topControl.validate(true);var valid=this.topControl.isValid(true);this.refreshValidationState(true);return valid;},validate:function(children){return this.topControl.validate(children);},enableSubmitButton:function(){$(".alpaca-form-button-submit").attrProp("disabled",false);if($.mobile){try{$(".alpaca-form-button-submit").button("refresh");}catch(e){}}},disableSubmitButton:function(){$(".alpaca-form-button-submit").attrProp("disabled",true);if($.mobile){try{$(".alpaca-form-button-submit").button("refresh");}catch(e){}}},adjustSubmitButtonState:function(){this.disableSubmitButton();var x=this.isFormValid();if(this.isFormValid()){this.enableSubmitButton();}},processRender:function(parentEl,onSuccess){var _this=this;var templateDescriptor=this.getTemplateDescriptor();var context={id:this.getId(),options:this.options,view:this.view};var renderedDomElement=_this.view.tmpl(templateDescriptor,context,{});renderedDomElement.appendTo(parentEl);this.outerEl=renderedDomElement;if(Alpaca.isEmpty(this.outerEl.attr("id"))){this.outerEl.attr("id",this.getId()+"-form-outer");}if(Alpaca.isEmpty(this.outerEl.attr("alpaca-field-id"))){this.outerEl.attr("alpaca-field-id",this.getId());}if($(".alpaca-form-fields-container",this.outerEl)){this.formFieldsContainer=$(".alpaca-form-fields-container",this.outerEl);}else{this.formFieldsContainer=this.outerEl;}this.field=$("form",this.container);if(this.field){this.field.attr(this.attributes);}this.buttons={};$.each($(".alpaca-form-button",this.container),function(k,v){$(v).mousedown(function(){var _this=$(this);_this.attr("button-pushed","true");setTimeout(function(){if(_this.attr("button-pushed")&&_this.attr("button-pushed")=="true"){_this.click();}},150);});$(v).click(function(){$(this).removeAttr("button-pushed");});_this.buttons[$(v).attr("data-key")]=$(v);});onSuccess();},getEl:function(){return this.outerEl;},getId:function(){return this.id;},getType:function(){return this.type;},getParent:function(){return this.parent;},getValue:function(){return this.topControl.getValue();},setValue:function(value){this.topControl.setValue(value);},initEvents:function(){var _this=this;if(this.field){var v=this.getValue();$(this.field).submit(v,function(e){return _this.onSubmit(e,_this);});}if(this.options.toggleSubmitValidState){$(_this.topControl.getEl()).bind("fieldupdate",function(){_this.adjustSubmitButtonState();});this.adjustSubmitButtonState();}},onSubmit:function(e,form){if(this.submitHandler){e.stopPropagation();var v=this.submitHandler(e,form);if(Alpaca.isUndefined(v)){v=false;}return v;}},registerSubmitHandler:function(func){if(Alpaca.isFunction(func)){this.submitHandler=func;}},refreshValidationState:function(children){this.topControl.refreshValidationState(children);},disable:function(){this.topControl.disable();},enable:function(){this.topControl.enable();},focus:function(){this.topControl.focus();},destroy:function(skipParent){this.getEl().remove();if(!skipParent&&this.parent){this.parent.destroy();}},show:function(){this.getEl().css({"display":""});},hide:function(){this.getEl().css({"display":"none"});},clear:function(stopUpdateTrigger){this.topControl.clear(stopUpdateTrigger);},isEmpty:function(){return this.topControl.isEmpty();},getTemplateDescriptor:function(){return this.templateDescriptor;},setTemplateDescriptor:function(templateDescriptor){this.templateDescriptor=templateDescriptor;}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.TextField=Alpaca.ControlField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.options.size){this.options.size=40;}this.controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldText");},destroy:function(){this.base();if(this.field&&this.field.typeahead&&this.options.typeahead){$(this.field).typeahead("destroy");}},renderField:function(onSuccess){var _this=this;if(this.controlFieldTemplateDescriptor){this.field=_this.view.tmpl(this.controlFieldTemplateDescriptor,{"id":this.getId(),"name":this.name,"options":this.options});this.injectField(this.field);}if(onSuccess){onSuccess();}},postRender:function(callback){var self=this;this.base(function(){if(self.field){if(self.field&&self.field.mask&&self.options.maskString){self.field.mask(self.options.maskString);}if(self.field&&self.field.typeahead&&self.options.typeahead){var tConfig=self.options.typeahead.config;if(!tConfig){tConfig={};}var tDatasets=self.options.typeahead.datasets;if(!tDatasets){tDatasets={};}if(!tDatasets.name){tDatasets.name=self.getId();}var tEvents=self.options.typeahead.events;if(!tEvents){tEvents={};}if(tDatasets.type=="local"||tDatasets.type=="remote"||tDatasets.type=="prefetch"){var bloodHoundConfig={datumTokenizer:function(d){return Bloodhound.tokenizers.whitespace(d.value);},queryTokenizer:Bloodhound.tokenizers.whitespace};if(tDatasets.type=="local"){var local=[];for(var i=0;i<tDatasets.source.length;i++){var localElement=tDatasets.source[i];if(typeof(localElement)=="string"){localElement={"value":localElement};}local.push(localElement);}bloodHoundConfig.local=local;}if(tDatasets.type=="prefetch"){bloodHoundConfig.prefetch={url:tDatasets.source};if(tDatasets.filter){bloodHoundConfig.prefetch.filter=tDatasets.filter;}}if(tDatasets.type=="remote"){bloodHoundConfig.remote={url:tDatasets.source};if(tDatasets.filter){bloodHoundConfig.remote.filter=tDatasets.filter;}if(tDatasets.replace){bloodHoundConfig.remote.replace=tDatasets.replace;}}var engine=new Bloodhound(bloodHoundConfig);engine.initialize();tDatasets.source=engine.ttAdapter();}if(tDatasets.templates){for(var k in tDatasets.templates){var template=tDatasets.templates[k];if(typeof(template)=="string"){tDatasets.templates[k]=Handlebars.compile(template);}}}$(self.field).typeahead(tConfig,tDatasets);$(self.field).on("typeahead:autocompleted",function(event,datum){self.setValue(datum.value);});$(self.field).on("typeahead:selected",function(event,datum){self.setValue(datum.value);});if(tEvents){if(tEvents.autocompleted){$(self.field).on("typeahead:autocompleted",function(event,datum){tEvents.autocompleted(event,datum);});}if(tEvents.selected){$(self.field).on("typeahead:selected",function(event,datum){tEvents.selected(event,datum);});}}var fi=$(self.field);$(self.field).change(function(){var value=$(this).val();var newValue=$(fi).typeahead("val");if(newValue!=value){$(fi).typeahead("val",newValue);}});}if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-text");}}callback();});},getValue:function(){var value=null;if(this.field){value=this.field.val();}else{value=this.base();}return value;},setValue:function(value){if(this.field){if(Alpaca.isEmpty(value)){this.field.val("");if(this.field&&this.field.typeahead&&this.options.typeahead){$(this.field).typeahead("val","");}}else{this.field.val(value);if(this.field&&this.field.typeahead&&this.options.typeahead){$(this.field).typeahead("val",value);}}}this.base(value);},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validatePattern();valInfo["invalidPattern"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("invalidPattern"),[this.schema.pattern]),"status":status};status=this._validateMaxLength();valInfo["stringTooLong"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("stringTooLong"),[this.schema.maxLength]),"status":status};status=this._validateMinLength();valInfo["stringTooShort"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("stringTooShort"),[this.schema.minLength]),"status":status};return baseStatus&&valInfo["invalidPattern"]["status"]&&valInfo["stringTooLong"]["status"]&&valInfo["stringTooShort"]["status"];},_validatePattern:function(){if(this.schema.pattern){var val=this.getValue();if(val===""&&this.options.allowOptionalEmpty&&!this.schema.required){return true;}if(Alpaca.isEmpty(val)){val="";}if(!val.match(this.schema.pattern)){return false;}}return true;},_validateMinLength:function(){if(!Alpaca.isEmpty(this.schema.minLength)){var val=this.getValue();if(val===""&&this.options.allowOptionalEmpty&&!this.schema.required){return true;}if(Alpaca.isEmpty(val)){val="";}if(val.length<this.schema.minLength){return false;}}return true;},_validateMaxLength:function(){if(!Alpaca.isEmpty(this.schema.maxLength)){var val=this.getValue();if(val===""&&this.options.allowOptionalEmpty&&!this.schema.required){return true;}if(Alpaca.isEmpty(val)){val="";}if(val.length>this.schema.maxLength){return false;}}return true;},disable:function(){if(this.field){this.field.disabled=true;}},enable:function(){if(this.field){this.field.disabled=false;}},focus:function(){if(this.field){this.field.focus();}},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{"minLength":{"title":"Minimal Length","description":"Minimal length of the property value.","type":"number"},"maxLength":{"title":"Maximum Length","description":"Maximum length of the property value.","type":"number"},"pattern":{"title":"Pattern","description":"Regular expression for the property value.","type":"string"}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"default":{"helper":"Field default value","type":"text"},"minLength":{"type":"integer"},"maxLength":{"type":"integer"},"pattern":{"type":"text"}}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"size":{"title":"Field Size","description":"Field size.","type":"number","default":40},"maskString":{"title":"Mask Expression","description":"Expression for the field mask. Field masking will be enabled if not empty.","type":"string"},"placeholder":{"title":"Field Placeholder","description":"Field placeholder.","type":"string"},"typeahead":{"title":"Type Ahead","description":"Provides configuration for the $.typeahead plugin if it is available.  For full configuration options, see: https://github.com/twitter/typeahead.js"},"allowOptionalEmpty":{"title":"Allow Optional Empty","description":"Allows this non-required field to validate when the value is empty"}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"size":{"type":"integer"},"maskString":{"helper":"a - an alpha character;9 - a numeric character;* - an alphanumeric character","type":"text"},"typeahead":{"type":"object"},"allowOptionalEmpty":{"type":"checkbox"}}});},getTitle:function(){return"Single-Line Text";},getDescription:function(){return"Text field for single-line text.";},getType:function(){return"string";},getFieldType:function(){return"text";}});Alpaca.registerTemplate("controlFieldText",'<input type="text" id="${id}" {{if options.placeholder}}placeholder="${options.placeholder}"{{/if}} {{if options.size}}size="${options.size}"{{/if}} {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');Alpaca.registerMessages({"invalidPattern":"This field should have pattern {0}","stringTooShort":"This field should contain at least {0} numbers or characters","stringTooLong":"This field should contain at most {0} numbers or characters"});Alpaca.registerFieldClass("text",Alpaca.Fields.TextField);Alpaca.registerDefaultSchemaFieldMapping("string","text");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.TextAreaField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.options.rows){this.options.rows=5;}if(!this.options.cols){this.options.cols=40;}this.controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldTextarea");},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-textarea");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateWordCount();valInfo["wordLimitExceeded"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("wordLimitExceeded"),[this.options.wordlimit]),"status":status};return baseStatus&&valInfo["wordLimitExceeded"]["status"];},_validateWordCount:function(){if(this.options.wordlimit&&this.options.wordlimit>-1){var val=this.data;if(val){var wordcount=val.split(" ").length;if(wordcount>this.options.wordlimit){return false;}}}return true;},setValue:function(value){$(this.field).val(value);this.base(value);},getValue:function(){return $(this.field).val();},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"rows":{"title":"Rows","description":"Number of rows","type":"number","default":5},"cols":{"title":"Columns","description":"Number of columns","type":"number","default":40},"wordlimit":{"title":"Word Limit","description":"Limits the number of words allowed in the text area.","type":"number","default":-1}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"rows":{"type":"integer"},"cols":{"type":"integer"},"wordlimit":{"type":"integer"}}});},getTitle:function(){return"Multi-Line Text";},getDescription:function(){return"Textarea field for multiple line text.";},getFieldType:function(){return"textarea";}});Alpaca.registerMessages({"wordLimitExceeded":"The maximum word limit of {0} has been exceeded."});Alpaca.registerTemplate("controlFieldTextarea",'<textarea id="${id}" {{if options.placeholder}}placeholder="${options.placeholder}"{{/if}} {{if options.rows}}rows="${options.rows}"{{/if}} {{if options.cols}}cols="${options.cols}"{{/if}} {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each options.data}}data-${fieldId}="${value}"{{/each}}/>');Alpaca.registerFieldClass("textarea",Alpaca.Fields.TextAreaField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.CheckBoxField=Alpaca.ControlField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){var _this=this;_this.base();if(!this.options.rightLabel){this.options.rightLabel="";}if(typeof(_this.options.multiple)=="undefined"){if(_this.schema.type=="array"){_this.options.multiple=true;}else{if(typeof(_this.schema["enum"])!="undefined"){_this.options.multiple=true;}}}_this.checkboxOptions=[];if(_this.options.multiple){$.each(_this.getEnum(),function(index,value){var text=value;if(_this.options.optionLabels){if(!Alpaca.isEmpty(_this.options.optionLabels[index])){text=_this.options.optionLabels[index];}else{if(!Alpaca.isEmpty(_this.options.optionLabels[value])){text=_this.options.optionLabels[value];}}}_this.checkboxOptions.push({"value":value,"text":text});});}},getEnum:function(){var array=[];if(this.schema&&this.schema["enum"]){array=this.schema["enum"];}return array;},onClick:function(e){this.refreshValidationState();},renderField:function(onSuccess){var _this=this;var controlFieldTemplateDescriptor=null;if(this.options.multiple){controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldCheckboxMultiple");}else{controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldCheckbox");}if(controlFieldTemplateDescriptor){this.field=_this.view.tmpl(controlFieldTemplateDescriptor,{"id":this.getId(),"name":this.name,"options":this.options,"checkboxOptions":_this.checkboxOptions});this.injectField(this.field);if(this.data&&typeof(this.data)!="undefined"){this.setValue(this.data);}}if(onSuccess){onSuccess();}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-checkbox");}$(self.field).find("input:checkbox").change(function(evt){$(self.field).trigger("change");});callback();});},getValue:function(){var self=this;var value=null;if(!self.options.multiple){var input=$(self.field).find("input");if(input.length>0){value=Alpaca.checked($(input[0]));}}else{var values=[];for(var i=0;i<self.checkboxOptions.length;i++){var input=$(self.field).find("input[data-checkbox-index='"+i+"']");if(Alpaca.checked(input)){var v=$(input).attr("data-checkbox-value");values.push(v);}}if(self.schema.type=="array"){value=values;}else{if(self.schema.type=="string"){value=values.join(",");}}}return value;},setValue:function(value){var self=this;var applyScalarValue=function(value){if(Alpaca.isString(value)){value=(value==="true");}var input=$(self.field).find("input");if(input.length>0){Alpaca.checked($(input[0]),value);}};var applyMultiValue=function(values){if(typeof(values)=="string"){values=values.split(",");}for(var i=0;i<values.length;i++){values[i]=Alpaca.trim(values[i]);}for(var i=0;i<values.length;i++){var input=$(self.field).find("input[data-checkbox-value='"+values[i]+"']");if(input.length>0){Alpaca.checked($(input[0]),value);}}};var applied=false;if(!self.options.multiple){if(typeof(value)=="boolean"){applyScalarValue(value);applied=true;}else{if(typeof(value)=="string"){applyScalarValue(value);applied=true;}}}else{if(typeof(value)=="string"){applyMultiValue(value);applied=true;}else{if(Alpaca.isArray(value)){applyMultiValue(value);applied=true;}}}if(!applied){Alpaca.logError("CheckboxField cannot set value for schema.type="+self.schema.type+" and value="+value);}this.base(value);},_validateEnum:function(){var self=this;if(!self.options.multiple){return true;}var val=self.getValue();if(!self.schema.required&&Alpaca.isValEmpty(val)){return true;}if(typeof(val)=="string"){val=val.split(",");}return Alpaca.anyEquality(val,self.schema["enum"]);},disable:function(){$(this.field).find("input").each(function(){$(this).disabled=true;});},enable:function(){$(this.field).find("input").each(function(){$(this).disabled=false;});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"rightLabel":{"title":"Option Label","description":"Optional right-hand side label for single checkbox field.","type":"string"},"multiple":{"title":"Multiple","description":"Whether to render multiple checkboxes for multi-valued type (such as an array or a comma-delimited string)","type":"boolean"}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"rightLabel":{"type":"text"},"multiple":{"type":"checkbox"}}});},getTitle:function(){return"Checkbox Field";},getDescription:function(){return"Checkbox Field for boolean (true/false), string ('true', 'false' or comma-delimited string of values) or data array.";},getType:function(){return"boolean";},getFieldType:function(){return"checkbox";}});Alpaca.registerTemplate("controlFieldCheckbox",'<span id="${id}">{{if options.rightLabel}}<label class="alpaca-controlfield-label" for="${id}_checkbox">{{/if}}<input id="${id}_checkbox" type="checkbox" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>{{if options.rightLabel}}${options.rightLabel}</label>{{/if}}</span>');Alpaca.registerTemplate("controlFieldCheckboxMultiple",'<span id="${id}">{{each(i,o) checkboxOptions}}<span><label class="alpaca-controlfield-label" for="${id}_checkbox_${i}"><input type="checkbox" id="${id}_checkbox_${i}" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} data-checkbox-value="${o.value}" data-checkbox-index="${i}" />${text}</label></span>{{/each}}</span>');Alpaca.registerFieldClass("checkbox",Alpaca.Fields.CheckBoxField);Alpaca.registerDefaultSchemaFieldMapping("boolean","checkbox");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.FileField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();this.controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldFile");},setValue:function(value){var tmp=this.field;this.field=$(".alpaca-filefield-control",this.fieldContainer);this.base(value);this.field=tmp;},onChange:function(e){this.base(e);if(this.options.selectionHandler){this.processSelectionHandler(e.target.files);}},processSelectionHandler:function(files){if(files&&files.length>0){if(typeof(FileReader)!=="undefined"){var loadedData=[];var loadCount=0;var fileReader=new FileReader();fileReader.onload=(function(){var field=this;return function(event){var dataUri=event.target.result;loadedData.push(dataUri);loadCount++;if(loadCount===files.length){field.options.selectionHandler.call(field,files,loadedData);}};}).call(this);for(var i=0;i<files.length;i++){fileReader.readAsDataURL(files[i]);}}}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-file");}callback();});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"selectionHandler":{"title":"Selection Handler","description":"Function that should be called when files are selected.  Requires HTML5.","type":"boolean","default":false}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"selectionHandler":{"type":"checkbox"}}});},getTitle:function(){return"File Field";},getDescription:function(){return"Field for uploading files.";},getFieldType:function(){return"file";}});Alpaca.registerTemplate("controlFieldFile",'<input type="file" id="${id}" {{if options.size}}size="${options.size}"{{/if}} {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');Alpaca.registerFieldClass("file",Alpaca.Fields.FileField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.ListField=Alpaca.ControlField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){var _this=this;_this.base();_this.selectOptions=[];if(_this.getEnum()){$.each(_this.getEnum(),function(index,value){var text=value;if(_this.options.optionLabels){if(!Alpaca.isEmpty(_this.options.optionLabels[index])){text=_this.options.optionLabels[index];}else{if(!Alpaca.isEmpty(_this.options.optionLabels[value])){text=_this.options.optionLabels[value];}}}_this.selectOptions.push({"value":value,"text":text});});}},getEnum:function(){if(this.schema&&this.schema["enum"]){return this.schema["enum"];}},getValue:function(val){var _this=this;if(Alpaca.isArray(val)){$.each(val,function(index,itemVal){$.each(_this.selectOptions,function(index2,selectOption){if(selectOption.value==itemVal){val[index]=selectOption.value;}});});}else{$.each(this.selectOptions,function(index,selectOption){if(selectOption.value==val){val=selectOption.value;}});}return val;},renderField:function(onSuccess){var _this=this;if(this.options.dataSource){if(Alpaca.isFunction(this.options.dataSource)){this.options.dataSource(this,function(values){if(Alpaca.isArray(values)){for(var i=0;i<values.length;i++){if(typeof(values[i])=="string"){_this.selectOptions.push({"text":values[i],"value":values[i]});}else{if(Alpaca.isObject(values[i])){_this.selectOptions.push(values[i]);}}}}else{if(Alpaca.isObject(values)){for(var k in values){_this.selectOptions.push({"text":k,"value":values[k]});}}}_this._renderField(onSuccess);});}else{if(Alpaca.isUri(this.options.dataSource)){$.ajax({url:this.options.dataSource,type:"get",dataType:"json",success:function(jsonDocument){var ds=jsonDocument;if(_this.options.dsTransformer&&Alpaca.isFunction(_this.options.dsTransformer)){ds=_this.options.dsTransformer(ds);}if(ds){if(Alpaca.isObject(ds)){$.each(ds,function(key,value){_this.selectOptions.push({"value":key,"text":value});});}else{if(Alpaca.isArray(ds)){$.each(ds,function(index,value){_this.selectOptions.push({"value":value.value,"text":value.text});});}}}_this._renderField(onSuccess);},"error":function(jqXHR,textStatus,errorThrown){_this.errorCallback({"message":"Unable to load data from uri : "+_this.options.dataSource,"stage":"DATASOURCE_LOADING_ERROR","details":{"jqXHR":jqXHR,"textStatus":textStatus,"errorThrown":errorThrown}});}});}else{var ds=this.options.dataSource;if(_this.options.dsTransformer&&Alpaca.isFunction(_this.options.dsTransformer)){ds=_this.options.dsTransformer(ds);}if(ds){if(Alpaca.isArray(ds)){$.each(ds,function(index,value){_this.selectOptions.push({"value":value,"text":value});});}if(Alpaca.isObject(ds)){for(var index in ds){_this.selectOptions.push({"value":index,"text":ds[index]});}}_this._renderField(onSuccess);}}}}else{this._renderField(onSuccess);}},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{"enum":{"title":"Enumeration","description":"List of field value options","type":"array","required":true}}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"optionLabels":{"title":"Option Labels","description":"Labels for options. It can either be a map object or an array field that maps labels to items defined by enum schema property one by one.","type":"array"},"dataSource":{"title":"Option Datasource","description":"Datasource for generating list of options.  This can be a string or a function.  If a string, it is considered to be a URI to a service that produces a object containing key/value pairs or an array of elements of structure {'text': '', 'value': ''}.  This can also be a function that is called to produce the same list.","type":"string"},"removeDefaultNone":{"title":"Remove Default None","description":"If true, the default 'None' option will not be shown.","type":"boolean","default":false}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"optionLabels":{"itemLabel":"Label","type":"array"},"dataSource":{"type":"text"},"removeDefaultNone":{"type":"checkbox","rightLabel":"Remove Default None"}}});}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.RadioField=Alpaca.Fields.ListField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(this.options.name){this.name=this.options.name;}else{if(!this.name){this.name=this.getId()+"-name";}}if(Alpaca.isUndefined(this.options.emptySelectFirst)){this.options.emptySelectFirst=false;}},getValue:function(){var val=this.base($("input:radio[name="+this.name+"]:checked",this.field).val());$.each(this.selectOptions,function(){if(String(this["value"])==val){val=this["value"];}});return val;},setValue:function(val){if(val!=this.getValue()){$.each($("input:radio[name="+this.name+"]",this.field),function(){if($(this).val()==val){$(this).attr("checked","checked");}else{$(this).removeAttr("checked");}});if(this.options.emptySelectFirst){if($("input:radio:checked",this.field).length===0){$("input:radio:first",this.field).attr("checked","checked");}}this.base(val);}},_renderField:function(onSuccess){var _this=this;var controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldRadio");if(controlFieldTemplateDescriptor){this.field=_this.view.tmpl(controlFieldTemplateDescriptor,{"id":this.getId(),"options":this.options,"selectOptions":this.selectOptions,"required":this.schema.required,"name":this.name,"data":this.data,"removeDefaultNone":this.options.removeDefaultNone});if(this.options.emptySelectFirst&&this.selectOptions&&this.selectOptions.length>0){this.data=this.selectOptions[0].value;if($("input:radio:checked",this.field).length===0){$("input:radio:first",this.field).attr("checked","checked");}}if(this.options.vertical){$(".alpaca-controlfield-radio-item",this.field).css("display","block");}this.injectField(this.field);}if(onSuccess){onSuccess();}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-radio");}callback();});},onClick:function(e){this.base(e);var _this=this;Alpaca.later(25,this,function(){var v=_this.getValue();_this.setValue(v);_this.refreshValidationState();});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"name":{"title":"Field name","description":"Field name.","type":"string"},"emptySelectFirst":{"title":"Empty Select First","description":"If the data is empty, then automatically select the first item in the list.","type":"boolean","default":false},"vertical":{"title":"Position the radio selector items vertically","description":"When true, the radio selector items will be stacked vertically and not horizontally","type":"boolean","default":false}}});},getTitle:function(){return"Radio Group Field";},getDescription:function(){return"Radio Group Field with list of options.";},getFieldType:function(){return"radio";}});Alpaca.registerTemplate("controlFieldRadio",'<div id="${id}" class="alpaca-controlfield-radio">{{if !required && !removeDefaultNone}}<span class="alpaca-controlfield-radio-item"><input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" id="${id}_radio_nonevalue" value=""/><label class="alpaca-controlfield-radio-label" for="${id}_radio_nonevalue">None</label></span>{{/if}}{{each selectOptions}}<span class="alpaca-controlfield-radio-item"><input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" value="${value}" id="${id}_radio_${$index}" {{if value == data}}checked="checked"{{/if}}/><label class="alpaca-controlfield-radio-label" for="${id}_radio_${$index}">${text}</label></span>{{/each}}</div>');Alpaca.registerFieldClass("radio",Alpaca.Fields.RadioField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.SelectField=Alpaca.Fields.ListField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(Alpaca.isUndefined(this.options.emptySelectFirst)){this.options.emptySelectFirst=false;}},getValue:function(){if(this.field){var val=this.field.val();if(!val){val=this.data;}return this.base(val);}},setValue:function(val){if(Alpaca.isArray(val)){if(!Alpaca.compareArrayContent(val,this.getValue())){if(!Alpaca.isEmpty(val)&&this.field){this.field.val(val);}this.base(val);}}else{if(val!=this.getValue()){if(!Alpaca.isEmpty(val)&&this.field){this.field.val(val);}this.base(val);}}},getEnum:function(){if(this.schema){if(this.schema["enum"]){return this.schema["enum"];}else{if(this.schema["type"]&&this.schema["type"]=="array"&&this.schema["items"]&&this.schema["items"]["enum"]){return this.schema["items"]["enum"];}}}},_renderField:function(onSuccess){var _this=this;if(this.schema["type"]&&this.schema["type"]=="array"){this.options.multiple=true;}var controlFieldTemplateDescriptor;if(this.options.multiple&&Alpaca.isArray(this.data)){controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldSelectMultiple");}else{controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldSelect");}if(controlFieldTemplateDescriptor){this.field=_this.view.tmpl(controlFieldTemplateDescriptor,{"id":this.getId(),"options":this.options,"required":this.schema.required,"selectOptions":this.selectOptions,"name":this.name,"data":this.data,"removeDefaultNone":this.options.removeDefaultNone});if(Alpaca.isUndefined(this.data)&&this.options.emptySelectFirst&&this.selectOptions&&this.selectOptions.length>0){this.data=this.selectOptions[0].value;}this.injectField(this.field);if(this.data){this.setValue(this.data);}}if(onSuccess){onSuccess();}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-select");}callback();});},_validateEnum:function(){if(this.schema["enum"]){var val=this.data;if(!this.schema.required&&Alpaca.isValEmpty(val)){return true;}if(this.options.multiple){var isValid=true;var _this=this;if(!val){val=[];}$.each(val,function(i,v){if($.inArray(v,_this.schema["enum"])<=-1){isValid=false;return false;}});return isValid;}else{return($.inArray(val,this.schema["enum"])>-1);}}else{return true;}},onChange:function(e){this.base(e);var _this=this;Alpaca.later(25,this,function(){var v=_this.getValue();_this.setValue(v);_this.refreshValidationState();});},_validateMinItems:function(){if(this.schema.items&&this.schema.items.minItems){if($(":selected",this.field).length<this.schema.items.minItems){return false;}}return true;},_validateMaxItems:function(){if(this.schema.items&&this.schema.items.maxItems){if($(":selected",this.field).length>this.schema.items.maxItems){return false;}}return true;},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateMaxItems();valInfo["tooManyItems"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("tooManyItems"),[this.schema.items.maxItems]),"status":status};status=this._validateMinItems();valInfo["notEnoughItems"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("notEnoughItems"),[this.schema.items.minItems]),"status":status};return baseStatus&&valInfo["tooManyItems"]["status"]&&valInfo["notEnoughItems"]["status"];},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"multiple":{"title":"Mulitple Selection","description":"Allow multiple selection if true.","type":"boolean","default":false},"size":{"title":"Displayed Options","description":"Number of options to be shown.","type":"number"},"emptySelectFirst":{"title":"Empty Select First","description":"If the data is empty, then automatically select the first item in the list.","type":"boolean","default":false}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"multiple":{"rightLabel":"Allow multiple selection ?","helper":"Allow multiple selection if checked","type":"checkbox"},"size":{"type":"integer"}}});},getTitle:function(){return"Dropdown Select";},getDescription:function(){return"Dropdown select field.";},getFieldType:function(){return"select";}});Alpaca.registerTemplate("controlFieldSelect",'<select id="${id}" {{if options.readonly}}readonly="readonly"{{/if}} {{if options.multiple}}multiple{{/if}} {{if options.size}}size="${options.size}"{{/if}} {{if name}}name="${name}"{{/if}}>{{if !required && !removeDefaultNone}}<option value="">None</option>{{/if}}{{each(i,value) selectOptions}}<option value="${value}" {{if value == data}}selected="selected"{{/if}}>${text}</option>{{/each}}</select>');Alpaca.registerTemplate("controlFieldSelectMultiple",'<select id="${id}" {{if options.readonly}}readonly="readonly"{{/if}} {{if options.multiple}}multiple="multiple"{{/if}} {{if options.size}}size="${options.size}"{{/if}} {{if name}}name="${name}"{{/if}}>{{if !required && !removeDefaultNone}}<option value="">None</option>{{/if}}{{each(i,value) selectOptions}}<option value="${value}" {{each(j,val) data}}{{if value == val}}selected="selected"{{/if}}{{/each}}>${text}</option>{{/each}}</select>');Alpaca.registerFieldClass("select",Alpaca.Fields.SelectField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.NumberField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},getValue:function(){var textValue=this.field.val();if(Alpaca.isValEmpty(textValue)){return -1;}else{return parseFloat(textValue);}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-number");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateNumber();valInfo["stringNotANumber"]={"message":status?"":this.view.getMessage("stringNotANumber"),"status":status};status=this._validateDivisibleBy();valInfo["stringDivisibleBy"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("stringDivisibleBy"),[this.schema.divisibleBy]),"status":status};status=this._validateMaximum();valInfo["stringValueTooLarge"]={"message":"","status":status};if(!status){if(this.schema.exclusiveMaximum){valInfo["stringValueTooLarge"]["message"]=Alpaca.substituteTokens(this.view.getMessage("stringValueTooLargeExclusive"),[this.schema.maximum]);}else{valInfo["stringValueTooLarge"]["message"]=Alpaca.substituteTokens(this.view.getMessage("stringValueTooLarge"),[this.schema.maximum]);}}status=this._validateMinimum();valInfo["stringValueTooSmall"]={"message":"","status":status};if(!status){if(this.schema.exclusiveMinimum){valInfo["stringValueTooSmall"]["message"]=Alpaca.substituteTokens(this.view.getMessage("stringValueTooSmallExclusive"),[this.schema.minimum]);}else{valInfo["stringValueTooSmall"]["message"]=Alpaca.substituteTokens(this.view.getMessage("stringValueTooSmall"),[this.schema.minimum]);}}status=this._validateMultipleOf();valInfo["stringValueNotMultipleOf"]={"message":"","status":status};if(!status){valInfo["stringValueNotMultipleOf"]["message"]=Alpaca.substituteTokens(this.view.getMessage("stringValueNotMultipleOf"),[this.schema.multipleOf]);}return baseStatus&&valInfo["stringNotANumber"]["status"]&&valInfo["stringDivisibleBy"]["status"]&&valInfo["stringValueTooLarge"]["status"]&&valInfo["stringValueTooSmall"]["status"]&&valInfo["stringValueNotMultipleOf"]["status"];},_validateNumber:function(){var textValue=this.field.val();if(Alpaca.isValEmpty(textValue)){return true;}var floatValue=this.getValue();if(isNaN(floatValue)){return false;}if(!textValue.match(Alpaca.regexps.number)){return false;}return true;},_validateDivisibleBy:function(){var floatValue=this.getValue();if(!Alpaca.isEmpty(this.schema.divisibleBy)){if(floatValue%this.schema.divisibleBy!==0){return false;}}return true;},_validateMaximum:function(){var floatValue=this.getValue();if(!Alpaca.isEmpty(this.schema.maximum)){if(floatValue>this.schema.maximum){return false;}if(!Alpaca.isEmpty(this.schema.exclusiveMaximum)){if(floatValue==this.schema.maximum&&this.schema.exclusiveMaximum){return false;}}}return true;},_validateMinimum:function(){var floatValue=this.getValue();if(!Alpaca.isEmpty(this.schema.minimum)){if(floatValue<this.schema.minimum){return false;}if(!Alpaca.isEmpty(this.schema.exclusiveMinimum)){if(floatValue==this.schema.minimum&&this.schema.exclusiveMinimum){return false;}}}return true;},_validateMultipleOf:function(){var floatValue=this.getValue();if(!Alpaca.isEmpty(this.schema.multipleOf)){if(floatValue&&this.schema.multipleOf!==0){return false;}}return true;},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{"multipleOf":{"title":"Multiple Of","description":"Property value must be a multiple of the multipleOf schema property such that division by this value yields an interger (mod zero).","type":"number"},"minimum":{"title":"Minimum","description":"Minimum value of the property.","type":"number"},"maximum":{"title":"Maximum","description":"Maximum value of the property.","type":"number"},"exclusiveMinimum":{"title":"Exclusive Minimum","description":"Property value can not equal the number defined by the minimum schema property.","type":"boolean","default":false},"exclusiveMaximum":{"title":"Exclusive Maximum","description":"Property value can not equal the number defined by the maximum schema property.","type":"boolean","default":false}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"multipleOf":{"title":"Multiple Of","description":"The value must be a integral multiple of the property","type":"number"},"minimum":{"title":"Minimum","description":"Minimum value of the property","type":"number"},"maximum":{"title":"Maximum","description":"Maximum value of the property","type":"number"},"exclusiveMinimum":{"rightLabel":"Exclusive minimum ?","helper":"Field value must be greater than but not equal to this number if checked","type":"checkbox"},"exclusiveMaximum":{"rightLabel":"Exclusive Maximum ?","helper":"Field value must be less than but not equal to this number if checked","type":"checkbox"}}});},getTitle:function(){return"Number Field";},getDescription:function(){return"Field for float numbers.";},getType:function(){return"number";},getFieldType:function(){return"number";}});Alpaca.registerMessages({"stringValueTooSmall":"The minimum value for this field is {0}","stringValueTooLarge":"The maximum value for this field is {0}","stringValueTooSmallExclusive":"Value of this field must be greater than {0}","stringValueTooLargeExclusive":"Value of this field must be less than {0}","stringDivisibleBy":"The value must be divisible by {0}","stringNotANumber":"This value is not a number.","stringValueNotMultipleOf":"This value is nu"});Alpaca.registerFieldClass("number",Alpaca.Fields.NumberField);Alpaca.registerDefaultSchemaFieldMapping("number","number");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.ArrayField=Alpaca.ContainerField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();this.options.toolbarStyle=Alpaca.isEmpty(this.view.toolbarStyle)?"button":this.view.toolbarStyle;this.options.rubyrails=false;if(this.parent&&this.parent.options&&this.parent.options.form&&this.parent.options.form.attributes){if(!Alpaca.isEmpty(this.parent.options.form.attributes.rubyrails)){this.options.rubyrails=true;}}if(!this.options.items){this.options.items={};}var toolbarSticky=false;if(!Alpaca.isEmpty(this.view.toolbarSticky)){toolbarSticky=this.view.toolbarSticky;}if(!Alpaca.isEmpty(this.options.toolbarSticky)){toolbarSticky=this.options.toolbarSticky;}if(Alpaca.isEmpty(this.options.items.showMoveUpItemButton)){this.options.items.showMoveUpItemButton=true;}if(Alpaca.isEmpty(this.options.items.showMoveDownItemButton)){this.options.items.showMoveDownItemButton=true;}this.options.toolbarSticky=toolbarSticky;if(this.schema.items&&this.schema.uniqueItems){Alpaca.mergeObject(this.options,{"forceRevalidation":true});}if(Alpaca.isEmpty(this.data)){return;}if(!Alpaca.isArray(this.data)){if(!Alpaca.isString(this.data)){return;}else{try{this.data=Alpaca.parseJSON(this.data);if(!Alpaca.isArray(this.data)){Alpaca.logWarn("ArrayField parsed data but it was not an array: "+JSON.stringify(this.data));return;}}catch(e){this.data=[this.data];}}}},setValue:function(data){var _this=this;if(!data||!Alpaca.isArray(data)){return;}for(var i=0;i<this.children.length;i++){var childField=this.children[i];if(data.length>i){childField.setValue(data[i]);}else{this.removeItem(childField.id);}}if(i<data.length){_this.resolveItemSchemaOptions(function(schema,options){var funcs=[];while(i<data.length){var f=(function(i,data){return function(callback){_this.addItem(i,schema,options,data[i],null,false,function(){Alpaca.nextTick(function(){callback();});});};})(i,data[i]);funcs.push(f);i++;}Alpaca.series(funcs,function(){});});}},getValue:function(){if(this.children.length===0&&!this.schema.required){return[];}var o=[];for(var i=0;i<this.children.length;i++){var v=this.children[i].getValue();if(typeof(v)!=="undefined"){o.push(v);}}return o;},getSize:function(){return this.children.length;},updateChildrenPathAndName:function(parent){var _this=this;if(parent.children){$.each(parent.children,function(i,v){if(parent.prePath&&Alpaca.startsWith(v.path,parent.prePath)){v.prePath=v.path;v.path=v.path.replace(parent.prePath,parent.path);}if(parent.preName&&Alpaca.startsWith(v.name,parent.preName)){v.preName=v.name;v.name=v.name.replace(parent.preName,parent.name);if(v.field){$(v.field).attr("name",v.name);}}_this.updateChildrenPathAndName(v);});}},updatePathAndName:function(){var _this=this;if(this.children){$.each(this.children,function(i,v){var idx=v.path.lastIndexOf("/");var lastSegment=v.path.substring(idx+1);if(lastSegment.indexOf("[")!=-1&&lastSegment.indexOf("]")!=-1){lastSegment=lastSegment.substring(lastSegment.indexOf("[")+1,lastSegment.indexOf("]"));}if(lastSegment!=i){v.prePath=v.path;v.path=v.path.substring(0,idx)+"/["+i+"]";}if(v.nameCalculated){v.preName=v.name;if(v.parent&&v.parent.name&&v.path){v.name=v.parent.name+"_"+i;}else{if(v.path){v.name=v.path.replace(/\//g,"").replace(/\[/g,"_").replace(/\]/g,"");}}if(this.parent.options.rubyrails){$(v.field).attr("name",v.parent.name);}else{$(v.field).attr("name",v.name);}}if(!v.prePath){v.prePath=v.path;}_this.updateChildrenPathAndName(v);});}},moveItem:function(fromId,isUp){var _this=this;if(this.childrenById[fromId]){$.each(this.children,function(index,val){if(val.getId()==fromId){var toIndex;if(isUp===true){toIndex=index-1;if(toIndex<0){toIndex=_this.children.length-1;}}else{toIndex=index+1;if(toIndex>=_this.children.length){toIndex=0;}}if(_this.children[toIndex]){var toId=_this.children[toIndex].getId();var fromContainer=$("#"+fromId+"-item-container");var toContainer=$("#"+toId+"-item-container");_this.reRenderItem(_this.children[index],toContainer);_this.reRenderItem(_this.children[toIndex],fromContainer);var tmp=_this.children[index];_this.children[index]=_this.children[toIndex];_this.children[toIndex]=tmp;_this.updatePathAndName();return false;}}});}},removeItem:function(id){if(this._validateEqualMinItems()){this.children=$.grep(this.children,function(val,index){return(val.getId()!=id);});delete this.childrenById[id];$("#"+id+"-item-container",this.outerEl).remove();this.refreshValidationState();this.updateToolbarItemsStatus();this.updatePathAndName();this.triggerUpdate();}},updateToolbarItemsStatus:function(){var _this=this;if(_this._validateEqualMaxItems()){$(".alpaca-fieldset-array-item-toolbar-add",this.outerEl).each(function(index){$(this).removeClass("alpaca-fieldset-array-item-toolbar-disabled");});}else{$(".alpaca-fieldset-array-item-toolbar-add",this.outerEl).each(function(index){$(this).addClass("alpaca-fieldset-array-item-toolbar-disabled");});}if(_this._validateEqualMinItems()){$(".alpaca-fieldset-array-item-toolbar-remove",this.outerEl).each(function(index){$(this).removeClass("alpaca-fieldset-array-item-toolbar-disabled");});}else{$(".alpaca-fieldset-array-item-toolbar-remove",this.outerEl).each(function(index){$(this).addClass("alpaca-fieldset-array-item-toolbar-disabled");});}if(this.getSize()===0){this.renderArrayToolbar(this.outerEl);}else{if(this.arrayToolbar){this.arrayToolbar.remove();}}$(".alpaca-item-label-counter",this.outerEl).each(function(index){$(this).html(index+1);});},renderToolbar:function(containerElem){var _this=this;if(this.view&&this.view.type=="view"){return;}if(!this.options.readonly){var id=containerElem.attr("alpaca-id");var fieldControl=this.childrenById[id];var itemToolbarTemplateDescriptor=this.view.getTemplateDescriptor("arrayItemToolbar");if(itemToolbarTemplateDescriptor){var buttonsDef=[{feature:"add",icon:_this.addIcon,label:(_this.options.items&&_this.options.items.addItemLabel)?_this.options.items.addItemLabel:"Add Item",clickCallback:function(id,arrayField){_this.resolveItemSchemaOptions(function(schema,options){arrayField.addItem(containerElem.index()+1,schema,options,null,id,true,function(addedField){arrayField.enrichElements(addedField.getEl());});});return false;}},{feature:"remove",icon:_this.removeIcon,label:(_this.options.items&&_this.options.items.removeItemLabel)?_this.options.items.removeItemLabel:"Remove Item",clickCallback:function(id,arrayField){arrayField.removeItem(id);}}];if((_this.options.items&&_this.options.items.showMoveUpItemButton)){buttonsDef.push({feature:"up",icon:_this.upIcon,label:(_this.options.items&&_this.options.items.moveUpItemLabel)?_this.options.items.moveUpItemLabel:"Move Up",clickCallback:function(id,arrayField){arrayField.moveItem(id,true);}});}if((_this.options.items&&_this.options.items.showMoveDownItemButton)){buttonsDef.push({feature:"down",icon:_this.downIcon,label:(_this.options.items&&_this.options.items.moveDownItemLabel)?_this.options.items.moveDownItemLabel:"Move Down",clickCallback:function(id,arrayField){arrayField.moveItem(id,false);}});}if(_this.options.items&&_this.options.items.extraToolbarButtons){buttonsDef=$.merge(buttonsDef,_this.options.items.extraToolbarButtons);}var toolbarElem=_this.view.tmpl(itemToolbarTemplateDescriptor,{"id":id,"buttons":buttonsDef});if(toolbarElem.attr("id")===null){toolbarElem.attr("id",id+"-item-toolbar");}for(var i in buttonsDef){(function(def){var el=toolbarElem.find(".alpaca-fieldset-array-item-toolbar-"+def.feature);el.click(function(e){return def.clickCallback(id,_this,e);});if(_this.buttonBeautifier){_this.buttonBeautifier.call(_this,el,def.icon);}})(buttonsDef[i]);}if(this.options.toolbarSticky){toolbarElem.prependTo(containerElem);}else{toolbarElem.hide().prependTo(containerElem);containerElem.hover(function(){$(".alpaca-fieldset-array-item-toolbar",this).show();},function(){$(".alpaca-fieldset-array-item-toolbar",this).hide();});}}}},renderArrayToolbar:function(containerElem){var _this=this;if(this.view&&this.view.type=="view"){return;}var id=containerElem.attr("alpaca-id");var itemToolbarTemplateDescriptor=this.view.getTemplateDescriptor("arrayToolbar");if(itemToolbarTemplateDescriptor){var toolbarElem=_this.view.tmpl(itemToolbarTemplateDescriptor,{"id":id,"addItemLabel":(_this.options.items&&_this.options.items.addItemLabel)?_this.options.items.addItemLabel:"Add Item"});if(toolbarElem.attr("id")===null){toolbarElem.attr("id",id+"-array-toolbar");}if(this.options.toolbarStyle=="link"){$(".alpaca-fieldset-array-toolbar-add",toolbarElem).click(function(){_this.resolveItemSchemaOptions(function(schema,options){_this.addItem(0,schema,options,"",id,true,function(addedField){_this.enrichElements(addedField.getEl());});});});}else{var toolbarElemAdd=$(".alpaca-fieldset-array-toolbar-add",toolbarElem);if(_this.buttonBeautifier){_this.buttonBeautifier.call(_this,toolbarElemAdd,_this.addIcon,true);}toolbarElemAdd.click(function(){_this.resolveItemSchemaOptions(function(schema,options){_this.addItem(0,schema,options,"",id,true,function(addedField){_this.enrichElements(addedField.getEl());});});return false;}).wrap("<small></small>");}toolbarElem.appendTo(containerElem);this.arrayToolbar=toolbarElem;}},reRenderItem:function(fieldControl,newContainer){fieldControl.container=newContainer;fieldControl.render();newContainer.attr("id",fieldControl.getId()+"-item-container");newContainer.attr("alpaca-id",fieldControl.getId());newContainer.addClass("alpaca-item-container");$(".alpaca-fieldset-array-item-toolbar",newContainer).remove();this.renderToolbar(newContainer);this.enrichElements(newContainer);},addItem:function(index,itemSchema,itemOptions,itemData,insertAfterId,isDynamicSubItem,postRenderCallback){return this._addItem(index,itemSchema,itemOptions,itemData,insertAfterId,isDynamicSubItem,postRenderCallback);},_addItem:function(index,itemSchema,itemOptions,itemData,insertAfterId,isDynamicSubItem,postRenderCallback){var _this=this;if(_this._validateEqualMaxItems()){if(itemOptions===null&&_this.options&&_this.options.fields&&_this.options.fields["item"]){itemOptions=_this.options.fields["item"];}var containerElem=_this.renderItemContainer(insertAfterId);containerElem.alpaca({"data":itemData,"options":itemOptions,"schema":itemSchema,"view":this.view.id?this.view.id:this.view,"connector":this.connector,"error":function(err){_this.destroy();_this.errorCallback.call(_this,err);},"notTopLevel":true,"isDynamicCreation":(isDynamicSubItem||this.isDynamicCreation),"render":function(fieldControl,cb){fieldControl.parent=_this;fieldControl.path=_this.path+"["+index+"]";fieldControl.nameCalculated=true;fieldControl.render(null,function(){containerElem.attr("id",fieldControl.getId()+"-item-container");containerElem.attr("alpaca-id",fieldControl.getId());containerElem.addClass("alpaca-item-container");if(_this.options&&_this.options.itemLabel){var itemLabelTemplateDescriptor=_this.view.getTemplateDescriptor("itemLabel");var itemLabelElem=_this.view.tmpl(itemLabelTemplateDescriptor,{"options":_this.options,"index":index?index+1:1,"id":_this.id});itemLabelElem.prependTo(containerElem);}_this.addChild(fieldControl,index);_this.renderToolbar(containerElem);_this.refreshValidationState();_this.updatePathAndName();_this.triggerUpdate();if($(containerElem).siblings().addBack().length>0){$(containerElem).parent().removeClass("alpaca-fieldset-items-container-empty");$(containerElem).siblings().addBack().removeClass("alpaca-item-container-first");$(containerElem).siblings().addBack().removeClass("alpaca-item-container-last");$(containerElem).siblings().addBack().first().addClass("alpaca-item-container-first");$(containerElem).siblings().addBack().last().addClass("alpaca-item-container-last");}$(containerElem).attr("data-alpaca-item-container-item-key",index);_this.updateToolbarItemsStatus(_this.outerEl);if(Alpaca.isFunction(_this.options.items.postRender)){_this.options.items.postRender(containerElem);}if(cb){cb();}});},"postRender":function(control){if(postRenderCallback){postRenderCallback(control);}}});return containerElem;}},enrichElements:function(containerElem){this.getStyleInjection("array",containerElem);},resolveItemSchemaOptions:function(callback){var _this=this;var itemOptions;if(_this.options&&_this.options.fields&&_this.options.fields["item"]){itemOptions=_this.options.fields["item"];}var itemSchema;if(_this.schema&&_this.schema.items){itemSchema=_this.schema.items;}if(itemSchema&&itemSchema["$ref"]){var referenceId=itemSchema["$ref"];var topField=this;var fieldChain=[topField];while(topField.parent){topField=topField.parent;fieldChain.push(topField);}var originalItemSchema=itemSchema;var originalItemOptions=itemOptions;Alpaca.loadRefSchemaOptions(topField,referenceId,function(itemSchema,itemOptions){var refCount=0;for(var i=0;i<fieldChain.length;i++){if(fieldChain[i].schema&&fieldChain[i].schema.id===referenceId){refCount++;}}var circular=(refCount>1);var resolvedItemSchema={};if(originalItemSchema){Alpaca.mergeObject(resolvedItemSchema,originalItemSchema);}if(itemSchema){Alpaca.mergeObject(resolvedItemSchema,itemSchema);}delete resolvedItemSchema.id;var resolvedItemOptions={};if(originalItemOptions){Alpaca.mergeObject(resolvedItemOptions,originalItemOptions);}if(itemOptions){Alpaca.mergeObject(resolvedItemOptions,itemOptions);}callback(resolvedItemSchema,resolvedItemOptions,circular);});}else{callback(itemSchema,itemOptions);}},renderItems:function(onSuccess){var self=this;$(self.fieldContainer).addClass("alpaca-fieldset-items-container-empty");if(self.data){self.resolveItemSchemaOptions(function(schema,options){var funcs=[];for(var index=0;index<self.data.length;index++){var value=self.data[index];var pf=(function(index,value){return function(callback){self.addItem(index,schema,options,value,false,false,function(){Alpaca.nextTick(function(){callback();});});};})(index,value);funcs.push(pf);}Alpaca.series(funcs,function(err){self.updateToolbarItemsStatus();if(onSuccess){onSuccess();}});});}else{self.updateToolbarItemsStatus();if(onSuccess){onSuccess();}}},_validateEqualMaxItems:function(){if(this.schema.items&&this.schema.items.maxItems){if(this.getSize()>=this.schema.items.maxItems){return false;}}return true;},_validateEqualMinItems:function(){if(this.schema.items&&this.schema.items.minItems){if(this.getSize()<=this.schema.items.minItems){return false;}}return true;},_validateMinItems:function(){if(this.schema.items&&this.schema.items.minItems){if(this.getSize()<this.schema.items.minItems){return false;}}return true;},_validateMaxItems:function(){if(this.schema.items&&this.schema.items.maxItems){if(this.getSize()>this.schema.items.maxItems){return false;}}return true;},_validateUniqueItems:function(){if(this.schema.items&&this.schema.uniqueItems){var hash={};for(var i=0,l=this.children.length;i<l;++i){if(!hash.hasOwnProperty(this.children[i])){hash[this.children[i]]=true;}else{return false;}}}return true;},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateUniqueItems();valInfo["valueNotUnique"]={"message":status?"":this.view.getMessage("valueNotUnique"),"status":status};status=this._validateMaxItems();valInfo["tooManyItems"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("tooManyItems"),[this.schema.items.maxItems]),"status":status};status=this._validateMinItems();valInfo["notEnoughItems"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("notEnoughItems"),[this.schema.items.minItems]),"status":status};return baseStatus&&valInfo["valueNotUnique"]["status"]&&valInfo["tooManyItems"]["status"]&&valInfo["notEnoughItems"]["status"];},getSchemaOfSchema:function(){var properties={"properties":{"items":{"title":"Array Items","description":"Schema for array items.","type":"object","properties":{"minItems":{"title":"Minimum Items","description":"Minimum number of items.","type":"number"},"maxItems":{"title":"Maximum Items","description":"Maximum number of items.","type":"number"},"uniqueItems":{"title":"Items Unique","description":"Item values should be unique if true.","type":"boolean","default":false}}}}};if(this.children&&this.children[0]){Alpaca.merge(properties.properties.items.properties,this.children[0].getSchemaOfSchema());}return Alpaca.merge(this.base(),properties);},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"items":{"type":"object","fields":{"minItems":{"type":"integer"},"maxItems":{"type":"integer"},"uniqueItems":{"type":"checkbox"}}}}});},getSchemaOfOptions:function(){var properties={"properties":{"toolbarSticky":{"title":"Sticky Toolbar","description":"Array item toolbar will be aways on if true.","type":"boolean","default":false},"items":{"title":"Array Items","description":"Options for array items.","type":"object","properties":{"extraToolbarButtons":{"title":"Extra Toolbar buttons","description":"Buttons to be added next to add/remove/up/down, see examples","type":"array","default":undefined},"moveUpItemLabel":{"title":"Move Up Item Label","description":"The label to use for the toolbar's 'move up' button.","type":"string","default":"Move Up"},"moveDownItemLabel":{"title":"Move Down Item Label","description":"The label to use for the toolbar's 'move down' button.","type":"string","default":"Move Down"},"removeItemLabel":{"title":"Remove Item Label","description":"The label to use for the toolbar's 'remove item' button.","type":"string","default":"Remove Item"},"addItemLabel":{"title":"Add Item Label","description":"The label to use for the toolbar's 'add item' button.","type":"string","default":"Add Item"},"showMoveDownItemButton":{"title":"Show Move Down Item Button","description":"Whether to show to the 'Move Down' button on the toolbar.","type":"boolean","default":true},"showMoveUpItemButton":{"title":"Show Move Up Item Button","description":"Whether to show the 'Move Up' button on the toolbar.","type":"boolean","default":true}}}}};if(this.children&&this.children[0]){Alpaca.merge(properties.properties.items.properties,this.children[0].getSchemaOfSchema());}return Alpaca.merge(this.base(),properties);},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"toolbarSticky":{"type":"checkbox"},"items":{"type":"object","fields":{}}}});},getTitle:function(){return"Array Field";},getDescription:function(){return"Field for list of items with same data type or structure.";},getType:function(){return"array";},getFieldType:function(){return"array";}});Alpaca.registerTemplate("itemLabel",'{{if options.itemLabel}}<div class="alpaca-controlfield-label"><div>${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span>{{/if}}</div></div>{{/if}}');Alpaca.registerTemplate("arrayToolbar",'<span class="ui-widget ui-corner-all alpaca-fieldset-array-toolbar"><button class="alpaca-fieldset-array-toolbar-icon alpaca-fieldset-array-toolbar-add">${addItemLabel}</button></span>');Alpaca.registerTemplate("arrayItemToolbar",'<div class="ui-widget-header ui-corner-all alpaca-fieldset-array-item-toolbar">{{each(k,v) buttons}}<button class="alpaca-fieldset-array-item-toolbar-icon alpaca-fieldset-array-item-toolbar-${v.feature}">${v.label}</button>{{/each}}</div>');Alpaca.registerMessages({"notEnoughItems":"The minimum number of items is {0}","tooManyItems":"The maximum number of items is {0}","valueNotUnique":"Values are not unique","notAnArray":"This value is not an Array"});Alpaca.registerFieldClass("array",Alpaca.Fields.ArrayField);Alpaca.registerDefaultSchemaFieldMapping("array","array");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.ObjectField=Alpaca.ContainerField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();this.wizardPreIcon="";this.wizardNextIcon="";this.wizardDoneIcon="";if(this.view.style&&Alpaca.styleInjections[this.view.style]){if(Alpaca.styleInjections[this.view.style]["wizardPreIcon"]){this.wizardPreIcon=Alpaca.styleInjections[this.view.style]["wizardPreIcon"];}if(Alpaca.styleInjections[this.view.style]["wizardNextIcon"]){this.wizardNextIcon=Alpaca.styleInjections[this.view.style]["wizardNextIcon"];}if(Alpaca.styleInjections[this.view.style]["wizardDoneIcon"]){this.wizardDoneIcon=Alpaca.styleInjections[this.view.style]["wizardDoneIcon"];}}if(Alpaca.isEmpty(this.data)){return;}if(this.data==""){return;}if(!Alpaca.isObject(this.data)){if(!Alpaca.isString(this.data)){return;}else{try{this.data=Alpaca.parseJSON(this.data);if(!Alpaca.isObject(this.data)){Alpaca.logWarn("ObjectField parsed data but it was not an object: "+JSON.stringify(this.data));return;}}catch(e){return;}}}},setValue:function(data){if(!data){data={};}if(!Alpaca.isObject(data)){return;}var existingFieldsByPropertyId={};for(var fieldId in this.childrenById){var propertyId=this.childrenById[fieldId].propertyId;existingFieldsByPropertyId[propertyId]=this.childrenById[fieldId];}var newDataByPropertyId={};for(var k in data){if(data.hasOwnProperty(k)){newDataByPropertyId[k]=data[k];}}for(var propertyId in newDataByPropertyId){var field=existingFieldsByPropertyId[propertyId];if(field){field.setValue(newDataByPropertyId[propertyId]);delete existingFieldsByPropertyId[propertyId];delete newDataByPropertyId[propertyId];}}for(var propertyId in existingFieldsByPropertyId){var field=existingFieldsByPropertyId[propertyId];field.setValue(null);}},getValue:function(){if(this.children.length===0&&!this.schema.required){return{};}var o={};for(var i=0;i<this.children.length;i++){var propertyId=this.children[i].propertyId;var fieldValue=this.children[i].getValue();if(typeof(fieldValue)!=="undefined"){if(this.determineAllDependenciesValid(propertyId)){var assignedValue=null;if(typeof(fieldValue)==="boolean"){assignedValue=(fieldValue?true:false);}else{if(Alpaca.isArray(fieldValue)||Alpaca.isObject(fieldValue)){assignedValue=fieldValue;}else{if(fieldValue||fieldValue===0){assignedValue=fieldValue;}}}if(assignedValue!==null){o[propertyId]=assignedValue;}}}}return o;},postRender:function(callback){var self=this;this.base(function(){if(self.isTopLevel()){if(self.view){self.wizardConfigs=self.view.getWizard();if(self.wizardConfigs){if(Alpaca.isUndefined(self.wizardConfigs.validation)){self.wizardConfigs.validation=true;}if(!self.wizardConfigs.buttons){self.wizardConfigs.buttons={};}if(!self.wizardConfigs.buttons.done){self.wizardConfigs.buttons.done={};}if(Alpaca.isUndefined(self.wizardConfigs.buttons.done.validateOnClick)){self.wizardConfigs.buttons.done.validateOnClick=true;}if(!self.wizardConfigs.buttons.prev){self.wizardConfigs.buttons.prev={};}if(Alpaca.isUndefined(self.wizardConfigs.buttons.prev.validateOnClick)){self.wizardConfigs.buttons.prev.validateOnClick=true;}if(!self.wizardConfigs.buttons.next){self.wizardConfigs.buttons.next={};}if(Alpaca.isUndefined(self.wizardConfigs.buttons.next.validateOnClick)){self.wizardConfigs.buttons.next.validateOnClick=true;}}var layoutTemplateDescriptor=self.view.getLayout().templateDescriptor;if(self.wizardConfigs&&self.wizardConfigs.renderWizard){if(layoutTemplateDescriptor){self.wizard();}else{self.autoWizard();}}}}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateMaxProperties();valInfo["tooManyProperties"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("tooManyProperties"),[this.schema.maxProperties]),"status":status};status=this._validateMinProperties();valInfo["tooFewProperties"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("tooManyItems"),[this.schema.items.minProperties]),"status":status};return baseStatus&&valInfo["tooManyProperties"]["status"]&&valInfo["tooFewProperties"]["status"];},_validateMaxProperties:function(){if(typeof(this.schema["maxProperties"])=="undefined"){return true;}var maxProperties=this.schema["maxProperties"];var propertyCount=0;for(var k in this.data){propertyCount++;}return propertyCount<=maxProperties;},_validateMinProperties:function(){if(typeof(this.schema["minProperties"])=="undefined"){return true;}var minProperties=this.schema["minProperties"];var propertyCount=0;for(var k in this.data){propertyCount++;}return propertyCount>=minProperties;},getIndex:function(propertyId){if(Alpaca.isEmpty(propertyId)){return -1;}for(var i=0;i<this.children.length;i++){var pid=this.children[i].propertyId;if(pid==propertyId){return i;}}return -1;},resolvePropertySchemaOptions:function(propertyId,callback){var _this=this;var propertySchema=null;if(_this.schema&&_this.schema.properties&&_this.schema.properties[propertyId]){propertySchema=_this.schema.properties[propertyId];}var propertyOptions={};if(_this.options&&_this.options.fields&&_this.options.fields[propertyId]){propertyOptions=_this.options.fields[propertyId];}if(propertySchema&&propertySchema["$ref"]){var referenceId=propertySchema["$ref"];var topField=this;var fieldChain=[topField];while(topField.parent){topField=topField.parent;fieldChain.push(topField);}var originalPropertySchema=propertySchema;var originalPropertyOptions=propertyOptions;Alpaca.loadRefSchemaOptions(topField,referenceId,function(propertySchema,propertyOptions){var refCount=0;for(var i=0;i<fieldChain.length;i++){if(fieldChain[i].schema&&fieldChain[i].schema.id===referenceId){refCount++;}}var circular=(refCount>1);var resolvedPropertySchema={};if(originalPropertySchema){Alpaca.mergeObject(resolvedPropertySchema,originalPropertySchema);}if(propertySchema){Alpaca.mergeObject(resolvedPropertySchema,propertySchema);}if(originalPropertySchema&&originalPropertySchema.id){resolvedPropertySchema.id=originalPropertySchema.id;}var resolvedPropertyOptions={};if(originalPropertyOptions){Alpaca.mergeObject(resolvedPropertyOptions,originalPropertyOptions);}if(propertyOptions){Alpaca.mergeObject(resolvedPropertyOptions,propertyOptions);}Alpaca.nextTick(function(){callback(resolvedPropertySchema,resolvedPropertyOptions,circular);});});}else{Alpaca.nextTick(function(){callback(propertySchema,propertyOptions);});}},removeItem:function(id){this.children=$.grep(this.children,function(val,index){return(val.getId()!=id);});var childField=this.childrenById[id];delete this.childrenById[id];if(childField.propertyId){delete this.childrenByPropertyId[childField.propertyId];}childField.destroy();this.refreshValidationState();this.triggerUpdate();},addItem:function(propertyId,itemSchema,itemOptions,itemData,insertAfterId,isDynamicSubItem,postRenderCallback){var _this=this;var containerElem=_this.renderItemContainer(insertAfterId,this,propertyId);containerElem.alpaca({"data":itemData,"options":itemOptions,"schema":itemSchema,"view":this.view.id?this.view.id:this.view,"connector":this.connector,"error":function(err){_this.destroy();_this.errorCallback.call(_this,err);},"notTopLevel":true,"isDynamicCreation":(isDynamicSubItem||this.isDynamicCreation),"render":function(fieldControl,cb){fieldControl.parent=_this;fieldControl.propertyId=propertyId;if(_this.path!="/"){fieldControl.path=_this.path+"/"+propertyId;}else{fieldControl.path=_this.path+propertyId;}fieldControl.render(null,function(){containerElem.attr("id",fieldControl.getId()+"-item-container");containerElem.attr("alpaca-id",fieldControl.getId());containerElem.addClass("alpaca-fieldset-item-container");if(Alpaca.isEmpty(insertAfterId)){_this.addChild(fieldControl);}else{var index=_this.getIndex(insertAfterId);if(index!=-1){_this.addChild(fieldControl,index+1);}else{_this.addChild(fieldControl);}}if(insertAfterId){_this.refreshValidationState();}if($(containerElem).siblings().addBack().length>0){$(containerElem).parent().removeClass("alpaca-fieldset-items-container-empty");$(containerElem).siblings().addBack().removeClass("alpaca-item-container-first");$(containerElem).siblings().addBack().removeClass("alpaca-item-container-last");$(containerElem).siblings().addBack().first().addClass("alpaca-item-container-first");$(containerElem).siblings().addBack().last().addClass("alpaca-item-container-last");}$(containerElem).attr("data-alpaca-item-container-item-key",propertyId);_this.triggerUpdate();if(cb){cb();}});},"postRender":function(control){if(postRenderCallback){postRenderCallback(control);}}});return containerElem;},renderItems:function(onSuccess){var _this=this;var extraDataProperties={};for(var dataKey in _this.data){extraDataProperties[dataKey]=dataKey;}var properties=_this.data;if(_this.schema&&_this.schema.properties){properties=_this.schema.properties;}var cf=function(){var extraDataKeys=[];for(var extraDataKey in extraDataProperties){extraDataKeys.push(extraDataKey);}if(extraDataKeys.length>0){Alpaca.logDebug("There were "+extraDataKeys.length+" extra data keys that were not part of the schema "+JSON.stringify(extraDataKeys));}if(onSuccess){onSuccess();}};var propertyFunctions=[];for(var propertyId in properties){var itemData=null;if(_this.data){itemData=_this.data[propertyId];}var pf=(function(propertyId,itemData,extraDataProperties){return function(callback){_this.resolvePropertySchemaOptions(propertyId,function(schema,options,circular){if(circular){return Alpaca.throwErrorWithCallback("Circular reference detected for schema: "+schema,_this.errorCallback);}if(!schema){Alpaca.logError("Unable to resolve schema for property: "+propertyId);}_this.addItem(propertyId,schema,options,itemData,null,false,function(addedItemControl){delete extraDataProperties[propertyId];_this.showOrHidePropertyBasedOnDependencies(propertyId);_this.bindDependencyFieldUpdateEvent(propertyId);_this.refreshDependentFieldStates(propertyId);Alpaca.nextTick(function(){callback();});});});};})(propertyId,itemData,extraDataProperties);propertyFunctions.push(pf);}Alpaca.series(propertyFunctions,function(err){cf();});},showOrHidePropertyBasedOnDependencies:function(propertyId){var self=this;var item=this.childrenByPropertyId[propertyId];if(!item){return Alpaca.throwErrorWithCallback("Missing property: "+propertyId,self.errorCallback);}var valid=this.determineAllDependenciesValid(propertyId);if(valid){item.show();item.onDependentReveal();}else{item.hide();item.onDependentConceal();}},determineAllDependenciesValid:function(propertyId){var self=this;var item=this.childrenByPropertyId[propertyId];if(!item){return Alpaca.throwErrorWithCallback("Missing property: "+propertyId,self.errorCallback);}var itemDependencies=item.schema.dependencies;if(!itemDependencies){return true;}var valid=true;if(Alpaca.isString(itemDependencies)){valid=self.determineSingleDependencyValid(propertyId,itemDependencies);}else{if(Alpaca.isArray(itemDependencies)){$.each(itemDependencies,function(index,value){valid=valid&&self.determineSingleDependencyValid(propertyId,value);});}}return valid;},bindDependencyFieldUpdateEvent:function(propertyId){var self=this;var item=this.childrenByPropertyId[propertyId];if(!item){return Alpaca.throwErrorWithCallback("Missing property: "+propertyId,self.errorCallback);}var itemDependencies=item.schema.dependencies;if(!itemDependencies){return true;}var bindEvent=function(propertyId,dependencyPropertyId){var dependentField=Alpaca.resolveField(self,dependencyPropertyId);if(dependentField){dependentField.getEl().bind("fieldupdate",function(propertyField,dependencyField,propertyId,dependencyPropertyId){return function(event){self.showOrHidePropertyBasedOnDependencies(propertyId);propertyField.trigger("fieldupdate");};}(item,dependentField,propertyId,dependencyPropertyId));dependentField.trigger("fieldupdate");}};if(Alpaca.isString(itemDependencies)){bindEvent(propertyId,itemDependencies);}else{if(Alpaca.isArray(itemDependencies)){$.each(itemDependencies,function(index,value){bindEvent(propertyId,value);});}}},refreshDependentFieldStates:function(propertyId){var self=this;var propertyField=this.childrenByPropertyId[propertyId];if(!propertyField){return Alpaca.throwErrorWithCallback("Missing property: "+propertyId,self.errorCallback);}var itemDependencies=propertyField.schema.dependencies;if(!itemDependencies){return true;}var triggerFieldUpdateForProperty=function(otherPropertyId){var dependentField=Alpaca.resolveField(self,otherPropertyId);if(dependentField){dependentField.trigger("fieldupdate");}};if(Alpaca.isString(itemDependencies)){triggerFieldUpdateForProperty(itemDependencies);}else{if(Alpaca.isArray(itemDependencies)){$.each(itemDependencies,function(index,value){triggerFieldUpdateForProperty(value);});}}},determineSingleDependencyValid:function(propertyId,dependentOnPropertyId){var self=this;var dependentOnField=Alpaca.resolveField(self,dependentOnPropertyId);if(!dependentOnField){return false;}var dependentOnData=dependentOnField.data;var valid=false;var conditionalDependencies=this.childrenByPropertyId[propertyId].options.dependencies;if(!conditionalDependencies||conditionalDependencies.length===0){if(dependentOnField.getType()==="boolean"&&!this.childrenByPropertyId[propertyId].options.dependencies&&!dependentOnData){valid=false;}else{valid=!Alpaca.isValEmpty(dependentOnField.data);}}else{if(dependentOnField.getType()==="boolean"&&!dependentOnData){dependentOnData=false;}var conditionalData=conditionalDependencies[dependentOnPropertyId];if(!Alpaca.isEmpty(conditionalData)&&Alpaca.isFunction(conditionalData)){valid=conditionalData.call(this,dependentOnData);}else{valid=true;if(Alpaca.isArray(conditionalData)){if(Alpaca.anyEquality(dependentOnData,conditionalData)){valid=false;}}else{if(!Alpaca.isEmpty(conditionalData)&&!Alpaca.anyEquality(conditionalData,dependentOnData)){valid=false;}}}}if(dependentOnField&&dependentOnField.isHidden()){valid=false;}return valid;},wizard:function(){var _this=this;var element=this.outerEl;var steps=$(".alpaca-wizard-step",element);var count=steps.size();this.totalSteps=count;var stepTitles=[];if(this.wizardConfigs.stepTitles){stepTitles=this.wizardConfigs.stepTitles;}else{steps.each(function(i){var stepTitle={"title":"","description":""};if($(".alpaca-wizard-step-title",this)){stepTitle.title=$(".alpaca-wizard-step-title",this).html();$(".alpaca-wizard-step-title",this).hide();}if($(".alpaca-wizard-step-description",this)){stepTitle.description=$(".alpaca-wizard-step-description",this).html();$(".alpaca-wizard-step-description",this).hide();}stepTitles.push(stepTitle);});}var wizardStatusBarElement=this._renderWizardStatusBar(stepTitles);if(wizardStatusBarElement){$(element).before(wizardStatusBarElement);}steps.each(function(i){var wizardStepTargetId=$(this).attr("id");var stepId="step"+i;var wizardStepTemplateDescriptor=_this.view.getTemplateDescriptor("wizardStep");if(wizardStepTemplateDescriptor){var wizardStepElement=_this.view.tmpl(wizardStepTemplateDescriptor,{});wizardStepElement.attr("id",stepId);$(this).wrap(wizardStepElement);}var navBarId=stepId+"-nav-bar";var wizardNavBarTemplateDescriptor=_this.view.getTemplateDescriptor("wizardNavBar");if(wizardNavBarTemplateDescriptor){var wizardNavBarElement=_this.view.tmpl(wizardNavBarTemplateDescriptor,{});wizardNavBarElement.attr("id",navBarId);wizardNavBarElement.addClass("alpaca-wizard-nav-bar");$(this).append(wizardNavBarElement);}var stepBindings={};var bindings=_this.view.getLayout().bindings;for(var fieldId in bindings){var bindingTargetId=bindings[fieldId];if(bindingTargetId==wizardStepTargetId){stepBindings[fieldId]=wizardStepTargetId;}}var vFunc=function(stepCount,stepBindings){return function(){var valid=true;if(_this.wizardConfigs&&_this.wizardConfigs.validation){if(stepBindings){$.each(stepBindings,function(propertyId,step){valid=valid&_this.childrenByPropertyId[propertyId].validate();_this.childrenByPropertyId[propertyId].refreshValidationState();});}}return valid;};}(i,stepBindings);if(i===0){_this._createNextButton(i,true,vFunc);_this._selectStep(i);}else{if(i==count-1){$("#step"+i).hide();_this._createPrevButton(i,false);_this._createDoneButton(i,true,vFunc);}else{$("#step"+i).hide();_this._createPrevButton(i,false);_this._createNextButton(i,true,vFunc);}}});},autoWizard:function(){var _this=this;var totalSteps=this.wizardConfigs.steps;if(!totalSteps){totalSteps=1;}this.totalSteps=totalSteps;var stepBindings=this.wizardConfigs.bindings;if(!stepBindings){stepBindings={};}for(var propertyId in this.childrenByPropertyId){if(!stepBindings.hasOwnProperty(propertyId)){stepBindings[propertyId]=1;}}for(var i=0;i<totalSteps;i++){var step=i+1;var tmpArray=[];for(var propertyId in stepBindings){if(stepBindings[propertyId]==step){if(this.childrenByPropertyId&&this.childrenByPropertyId[propertyId]){tmpArray.push("#"+this.childrenByPropertyId[propertyId].container.attr("id"));}}}var stepId="step"+i;var wizardStepTemplateDescriptor=this.view.getTemplateDescriptor("wizardStep");if(wizardStepTemplateDescriptor){var wizardStepElement=_this.view.tmpl(wizardStepTemplateDescriptor,{});wizardStepElement.attr("id",stepId);$(tmpArray.join(",")).wrapAll(wizardStepElement);}var navBarId=stepId+"-nav-bar";var wizardNavBarTemplateDescriptor=this.view.getTemplateDescriptor("wizardNavBar");if(wizardNavBarTemplateDescriptor){var wizardNavBarElement=_this.view.tmpl(wizardNavBarTemplateDescriptor,{});wizardNavBarElement.attr("id",navBarId);wizardNavBarElement.addClass("alpaca-wizard-nav-bar");$("#"+stepId,this.outerEl).append(wizardNavBarElement);}}var wizardStatusBarElement=this._renderWizardStatusBar(this.wizardConfigs.stepTitles);if(wizardStatusBarElement){wizardStatusBarElement.prependTo(this.fieldContainer);}for(var i=0;i<totalSteps;i++){var vFunc=function(stepCount,stepBindings){return function(){var valid=true;if(_this.view&&_this.wizardConfigs&&_this.wizardConfigs.validation){if(stepBindings){$.each(stepBindings,function(propertyId,step){if(step==stepCount+1&&valid){valid=_this.childrenByPropertyId[propertyId].validate();_this.childrenByPropertyId[propertyId].validate();}});}}return valid;};}(i,stepBindings);if(i===0){_this._createNextButton(i,false,vFunc);_this._selectStep(i);}else{if(i==totalSteps-1){$("#step"+i).hide();_this._createPrevButton(i,false);_this._createDoneButton(i,true,vFunc);}else{$("#step"+i).hide();_this._createPrevButton(i,false);_this._createNextButton(i,false,vFunc);}}}},_renderWizardStatusBar:function(stepTitles){var _this=this;var wizardStatusBar=this.wizardConfigs.statusBar;if(wizardStatusBar&&stepTitles){var wizardStatusBarTemplateDescriptor=this.view.getTemplateDescriptor("wizardStatusBar");if(wizardStatusBarTemplateDescriptor){var wizardStatusBarElement=_this.view.tmpl(wizardStatusBarTemplateDescriptor,{"id":this.getId()+"-wizard-status-bar","titles":stepTitles});wizardStatusBarElement.addClass("alpaca-wizard-status-bar");this.getStyleInjection("wizardStatusBar",wizardStatusBarElement);return wizardStatusBarElement;}}},_createPrevButton:function(i,clear,validationFunction){if(this.wizardConfigs.buttons&&this.wizardConfigs.buttons.prev){if(!this.wizardConfigs.buttons.prev.validateOnClick){validationFunction=null;}}var stepName="step"+i;var _this=this;var wizardPreButtonTemplateDescriptor=this.view.getTemplateDescriptor("wizardPreButton");if(wizardPreButtonTemplateDescriptor){var wizardPreButtonElement=_this.view.tmpl(wizardPreButtonTemplateDescriptor,{});wizardPreButtonElement.attr("id",stepName+"-button-pre");wizardPreButtonElement.addClass("alpaca-wizard-button-pre");if(_this.buttonBeautifier){_this.buttonBeautifier.call(_this,wizardPreButtonElement,this.wizardPreIcon,true);}wizardPreButtonElement.click(function(stepName,stepCount,validationFunction){return function(){var valid=true;if(validationFunction){valid=validationFunction(stepName,stepCount);}if(valid){$("#"+stepName).hide();$("#step"+(i-1)).show();_this._selectStep(i-1);if(_this.wizardConfigs.buttons.prev&&_this.wizardConfigs.buttons.prev.onClick){_this.wizardConfigs.buttons.prev.onClick();}}return false;};}(stepName,i,validationFunction));$("#"+stepName+"-nav-bar").append(wizardPreButtonElement);if(clear){$("#"+stepName+"-nav-bar").parent().append("<div style='clear:both'></div>");}}},_createNextButton:function(i,clear,validationFunction){if(this.wizardConfigs.buttons&&this.wizardConfigs.buttons.next){if(!this.wizardConfigs.buttons.next.validateOnClick){validationFunction=null;}}var stepName="step"+i;var _this=this;var wizardNextButtonTemplateDescriptor=this.view.getTemplateDescriptor("wizardNextButton");if(wizardNextButtonTemplateDescriptor){var wizardNextButtonElement=_this.view.tmpl(wizardNextButtonTemplateDescriptor,{});wizardNextButtonElement.attr("id",stepName+"-button-next");wizardNextButtonElement.addClass("alpaca-wizard-button-next");if(_this.buttonBeautifier){_this.buttonBeautifier.call(_this,wizardNextButtonElement,this.wizardNextIcon,true);}wizardNextButtonElement.click(function(stepName,stepCount,validationFunction){return function(){var valid=true;if(validationFunction){valid=validationFunction(stepName,stepCount);}if(valid){$("#"+stepName).hide();$("#step"+(stepCount+1)).show();_this._selectStep(stepCount+1);if(_this.wizardConfigs.buttons.next&&_this.wizardConfigs.buttons.next.onClick){_this.wizardConfigs.buttons.next.onClick();}}return false;};}(stepName,i,validationFunction));$("#"+stepName+"-nav-bar").append(wizardNextButtonElement);if(clear){$("#"+stepName+"-nav-bar").parent().append("<div style='clear:both'></div>");}}},_createDoneButton:function(i,clear,validationFunction){if(this.wizardConfigs.buttons&&this.wizardConfigs.buttons.done){if(!this.wizardConfigs.buttons.done.validateOnClick){validationFunction=null;}}var stepName="step"+i;var _this=this;var wizardDoneButtonTemplateDescriptor=this.view.getTemplateDescriptor("wizardDoneButton");if(wizardDoneButtonTemplateDescriptor){var wizardDoneButtonElement=_this.view.tmpl(wizardDoneButtonTemplateDescriptor,{});wizardDoneButtonElement.attr("id",stepName+"-button-done");wizardDoneButtonElement.addClass("alpaca-wizard-button-done");if(_this.buttonBeautifier){_this.buttonBeautifier.call(_this,wizardDoneButtonElement,this.wizardDoneIcon,true);}wizardDoneButtonElement.click(function(stepName,stepCount,validationFunction){return function(){var valid=true;if(validationFunction){valid=validationFunction(stepName,stepCount);}if(valid){$("#"+stepName+"-nav-bar").append(wizardDoneButtonElement);if(clear){$("#"+stepName+"-nav-bar").parent().append("<div style='clear:both'></div>");}if(_this.wizardConfigs.buttons.done&&_this.wizardConfigs.buttons.done.onClick){_this.wizardConfigs.buttons.done.onClick();}}return false;};}(stepName,i,validationFunction));$("#"+stepName+"-nav-bar").append(wizardDoneButtonElement);if(clear){$("#"+stepName+"-nav-bar").parent().append("<div style='clear:both'></div>");}}},_selectStep:function(i){var unCurrentStepElem=$("#"+this.getId()+"-wizard-status-bar"+" li");unCurrentStepElem.removeClass("current current-has-next");this.getStyleInjection("wizardUnCurrentStep",unCurrentStepElem);var currentStepElem=$("#stepDesc"+i);currentStepElem.addClass("current");this.getStyleInjection("wizardCurrentStep",currentStepElem);if(i<this.totalSteps-1){$("#stepDesc"+i).addClass("current-has-next");}},getSchemaOfSchema:function(){var properties={"properties":{"properties":{"title":"Properties","description":"List of child properties.","type":"object"},"maxProperties":{"type":"number","title":"Maximum Number Properties","description":"The maximum number of properties that this object is allowed to have"},"minProperties":{"type":"number","title":"Minimum Number of Properties","description":"The minimum number of properties that this object is required to have"}}};var fieldsProperties=properties.properties.properties;fieldsProperties.properties={};if(this.children){for(var i=0;i<this.children.length;i++){var propertyId=this.children[i].propertyId;fieldsProperties.properties[propertyId]=this.children[i].getSchemaOfSchema();fieldsProperties.properties[propertyId].title=propertyId+" :: "+fieldsProperties.properties[propertyId].title;}}return Alpaca.merge(this.base(),properties);},getSchemaOfOptions:function(){var schemaOfOptions=Alpaca.merge(this.base(),{"properties":{}});var properties={"properties":{"fields":{"title":"Field Options","description":"List of options for child fields.","type":"object"}}};var fieldsProperties=properties.properties.fields;fieldsProperties.properties={};if(this.children){for(var i=0;i<this.children.length;i++){var propertyId=this.children[i].propertyId;fieldsProperties.properties[propertyId]=this.children[i].getSchemaOfOptions();fieldsProperties.properties[propertyId].title=propertyId+" :: "+fieldsProperties.properties[propertyId].title;}}return Alpaca.merge(schemaOfOptions,properties);},getTitle:function(){return"Object Field";},getDescription:function(){return"Object field for containing other fields";},getType:function(){return"object";},getFieldType:function(){return"object";}});Alpaca.registerMessages({"tooManyProperties":"The maximum number of properties ({0}) has been exceeded.","tooFewProperties":"There are not enough properties ({0} are required)"});Alpaca.registerFieldClass("object",Alpaca.Fields.ObjectField);Alpaca.registerDefaultSchemaFieldMapping("object","object");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.AnyField=Alpaca.ControlField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();this.controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldAny");},renderField:function(onSuccess){if(this.controlFieldTemplateDescriptor){this.field=this.view.tmpl(this.controlFieldTemplateDescriptor,{"id":this.getId(),"name":this.name,"options":this.options});this.injectField(this.field);}if(onSuccess){onSuccess();}},getValue:function(){return this.field.val();},setValue:function(value){if(Alpaca.isEmpty(value)){this.field.val("");}else{this.field.val(value);}this.base(value);},handleValidate:function(){var baseStatus=this.base();return baseStatus;},disable:function(){this.field.disabled=true;},enable:function(){this.field.disabled=false;},focus:function(){this.field.focus();},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{}});},getTitle:function(){return"Any Field";},getDescription:function(){return"Any field.";},getType:function(){return"any";},getFieldType:function(){return"any";}});Alpaca.registerTemplate("controlFieldAny",'<input type="text" id="${id}" size="40" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');Alpaca.registerFieldClass("any",Alpaca.Fields.AnyField);Alpaca.registerDefaultSchemaFieldMapping("any","any");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.HiddenField=Alpaca.ControlField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.options.size){this.options.size=40;}this.controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldHidden");},renderField:function(onSuccess){var _this=this;if(this.controlFieldTemplateDescriptor){this.field=_this.view.tmpl(this.controlFieldTemplateDescriptor,{"id":this.getId(),"name":this.name,"options":this.options});this.injectField(this.field);}if(onSuccess){onSuccess();}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-hidden");}callback();});},getValue:function(){return this.field.val();},setValue:function(value){if(Alpaca.isEmpty(value)){this.field.val("");}else{this.field.val(value);}this.base(value);},getTitle:function(){return"Hidden";},getDescription:function(){return"Field for a hidden HTML input";},getType:function(){return"string";},getFieldType:function(){return"hidden";}});Alpaca.registerTemplate("controlFieldHidden",'<input type="hidden" id="${id}" {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');Alpaca.registerFieldClass("hidden",Alpaca.Fields.HiddenField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_BASE","messages":{"zh_CN":{required:"&#27492;&#22495;&#24517;&#39035;",invalid:"&#27492;&#22495;&#19981;&#21512;&#26684;",months:["&#19968;&#26376;","&#20108;&#26376;","&#19977;&#26376;","&#22235;&#26376;","&#20116;&#26376;","&#20845;&#26376;","&#19971;&#26376;","&#20843;&#26376;","&#20061;&#26376;","&#21313;&#26376;","&#21313;&#19968;&#26376;","&#21313;&#20108;&#26376;"],timeUnits:{SECOND:"&#31186;",MINUTE:"&#20998;",HOUR:"&#26102;",DAY:"&#26085;",MONTH:"&#26376;",YEAR:"&#24180;"},"notOptional":"&#27492;&#22495;&#38750;&#20219;&#36873;","disallowValue":"&#38750;&#27861;&#36755;&#20837;&#21253;&#25324; {0}.","invalidValueOfEnum":"&#20801;&#35768;&#36755;&#20837;&#21253;&#25324; {0}.","notEnoughItems":"&#26368;&#23567;&#20010;&#25968; {0}","tooManyItems":"&#26368;&#22823;&#20010;&#25968; {0}","valueNotUnique":"&#36755;&#20837;&#20540;&#19981;&#29420;&#29305;","notAnArray":"&#19981;&#26159;&#25968;&#32452;","invalidDate":"&#26085;&#26399;&#26684;&#24335;&#22240;&#35813;&#26159; {0}","invalidEmail":"&#20234;&#22969;&#20799;&#26684;&#24335;&#19981;&#23545;, ex: info@cloudcms.com","stringNotAnInteger":"&#19981;&#26159;&#25972;&#25968;.","invalidIPv4":"&#19981;&#26159;&#21512;&#27861;IP&#22320;&#22336;, ex: 192.168.0.1","stringValueTooSmall":"&#26368;&#23567;&#20540;&#26159; {0}","stringValueTooLarge":"&#26368;&#22823;&#20540;&#26159; {0}","stringValueTooSmallExclusive":"&#20540;&#24517;&#39035;&#22823;&#20110; {0}","stringValueTooLargeExclusive":"&#20540;&#24517;&#39035;&#23567;&#20110; {0}","stringDivisibleBy":"&#20540;&#24517;&#39035;&#33021;&#34987; {0} &#25972;&#38500;","stringNotANumber":"&#19981;&#26159;&#25968;&#23383;.","invalidPassword":"&#38750;&#27861;&#23494;&#30721;","invalidPhone":"&#38750;&#27861;&#30005;&#35805;&#21495;&#30721;, ex: (123) 456-9999","invalidPattern":"&#27492;&#22495;&#39035;&#26377;&#26684;&#24335; {0}","stringTooShort":"&#27492;&#22495;&#33267;&#23569;&#38271;&#24230; {0}","stringTooLong":"&#27492;&#22495;&#26368;&#22810;&#38271;&#24230; {0}"}}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_BASE","messages":{"es_ES":{required:"Este campo es obligatorio",invalid:"Este campo es inválido",months:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],timeUnits:{SECOND:"segundos",MINUTE:"minutos",HOUR:"horas",DAY:"días",MONTH:"meses",YEAR:"años"},"notOptional":"Este campo no es opcional.","disallowValue":"{0} son los valores rechazados.","invalidValueOfEnum":"Este campo debe tener uno de los valores adentro {0}.","notEnoughItems":"El número mínimo de artículos es {0}","tooManyItems":"El número máximo de artículos es {0}","valueNotUnique":"Los valores no son únicos","notAnArray":"Este valor no es un arsenal","invalidDate":"Fecha inválida para el formato {0}","invalidEmail":"Email address inválido, ex: info@cloudcms.com","stringNotAnInteger":"Este valor no es un número entero.","invalidIPv4":"Dirección inválida IPv4, ex: 192.168.0.1","stringValueTooSmall":"El valor mínimo para este campo es {0}","stringValueTooLarge":"El valor míximo para este campo es {0}","stringValueTooSmallExclusive":"El valor de este campo debe ser mayor que {0}","stringValueTooLargeExclusive":"El valor de este campo debe ser menos que {0}","stringDivisibleBy":"El valor debe ser divisible cerca {0}","stringNotANumber":"Este valor no es un número.","invalidPassword":"Contraseña inválida","invalidPhone":"Número de teléfono inválido, ex: (123) 456-9999","invalidPattern":"Este campo debe tener patrón {0}","stringTooShort":"Este campo debe contener por lo menos {0} números o caracteres","stringTooLong":"Este campo debe contener a lo más {0} números o caracteres"}}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_BASE","messages":{"fr_FR":{required:"Ce champ est requis",invalid:"Ce champ est invalide",months:["Janvier","Février","Mars","Avril","Mai","Juin","Juillet","Août","Septembre","Octobre","Novembre","Décembre"],timeUnits:{SECOND:"secondes",MINUTE:"minutes",HOUR:"heures",DAY:"jours",MONTH:"mois",YEAR:"années"},"notOptional":"Ce champ n'est pas optionnel.","disallowValue":"{0} sont des valeurs interdites.","invalidValueOfEnum":"Ce champ doit prendre une des valeurs suivantes : {0}.","notEnoughItems":"Le nombre minimum d'éléments est {0}","tooManyItems":"Le nombre maximum d'éléments est {0}","valueNotUnique":"Les valeurs sont uniques","notAnArray":"Cette valeur n'est pas une liste","invalidDate":"Cette date ne correspond pas au format {0}","invalidEmail":"Adresse de courriel invalide, ex: info@cloudcms.com","stringNotAnInteger":"Cette valeur n'est pas un nombre entier.","invalidIPv4":"Adresse IPv4 invalide, ex: 192.168.0.1","stringValueTooSmall":"La valeur minimale pour ce champ est {0}","stringValueTooLarge":"La valeur maximale pour ce champ est {0}","stringValueTooSmallExclusive":"La valeur doit-être supérieure à {0}","stringValueTooLargeExclusive":"La valeur doit-être inférieure à {0}","stringDivisibleBy":"La valeur doit-être divisible par {0}","stringNotANumber":"Cette valeur n'est pas un nombre.","invalidPassword":"Mot de passe invalide","invalidPhone":"Numéro de téléphone invalide, ex: (123) 456-9999","invalidPattern":"Ce champ doit correspondre au motif {0}","stringTooShort":"Ce champ doit contenir au moins {0} caractères","stringTooLong":"Ce champ doit contenir au plus {0} caractères"}}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_BASE","messages":{"de_AT":{required:"Eingabe erforderlich",invalid:"Eingabe invalid",months:["Jänner","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],timeUnits:{SECOND:"Sekunden",MINUTE:"Minuten",HOUR:"Stunden",DAY:"Tage",MONTH:"Monate",YEAR:"Jahre"},"notOptional":"Dieses Feld ist nicht optional","disallowValue":"Diese Werte sind nicht erlaubt: {0}","invalidValueOfEnum":"Diese Feld sollte einen der folgenden Werte enthalten: {0}","notEnoughItems":"Die Mindestanzahl von Elementen ist {0}","tooManyItems":"Die Maximalanzahl von Elementen ist {0}","valueNotUnique":"Diese Werte sind nicht eindeutig","notAnArray":"Keine Liste von Werten","invalidDate":"Falsches Datumsformat: {0}","invalidEmail":"Ungültige e-Mail Adresse, z.B.: info@cloudcms.com","stringNotAnInteger":"Eingabe ist keine Ganz Zahl.","invalidIPv4":"Ungültige IPv4 Adresse, z.B.: 192.168.0.1","stringValueTooSmall":"Die Mindestanzahl von Zeichen ist {0}","stringValueTooLarge":"Die Maximalanzahl von Zeichen ist {0}","stringValueTooSmallExclusive":"Die Anzahl der Zeichen muss größer sein als {0}","stringValueTooLargeExclusive":"Die Anzahl der Zeichen muss kleiner sein als {0}","stringDivisibleBy":"Der Wert muss durch {0} dividierbar sein","stringNotANumber":"Die Eingabe ist keine Zahl","invalidPassword":"Ungültiges Passwort.","invalidPhone":"Ungültige Telefonnummer, z.B.: (123) 456-9999","invalidPattern":"Diese Feld stimmt nicht mit folgender Vorgabe überein {0}","stringTooShort":"Dieses Feld sollte mindestens {0} Zeichen enthalten","stringTooLong":"Dieses Feld sollte höchstens {0} Zeichen enthalten"}}});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.registerView({"id":"VIEW_BASE","messages":{"pl_PL":{required:"To pole jest wymagane",invalid:"To pole jest nieprawidłowe",months:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],timeUnits:{SECOND:"sekundy",MINUTE:"minuty",HOUR:"godziny",DAY:"dni",MONTH:"miesiące",YEAR:"lata"},"notOptional":"To pole nie jest opcjonalne","disallowValue":"Ta wartość nie jest dozwolona: {0}","invalidValueOfEnum":"To pole powinno zawierać jedną z następujących wartości: {0}","notEnoughItems":"Minimalna liczba elementów wynosi {0}","tooManyItems":"Maksymalna liczba elementów wynosi {0}","valueNotUnique":"Te wartości nie są unikalne","notAnArray":"Ta wartość nie jest tablicą","invalidDate":"Niepoprawny format daty: {0}","invalidEmail":"Niepoprawny adres email, n.p.: info@cloudcms.com","stringNotAnInteger":"Ta wartość nie jest liczbą całkowitą","invalidIPv4":"Niepoprawny adres IPv4, n.p.: 192.168.0.1","stringValueTooSmall":"Minimalna wartość dla tego pola wynosi {0}","stringValueTooLarge":"Maksymalna wartość dla tego pola wynosi {0}","stringValueTooSmallExclusive":"Wartość dla tego pola musi być większa niż {0}","stringValueTooLargeExclusive":"Wartość dla tego pola musi być mniejsza niż {0}","stringDivisibleBy":"Wartość musi być podzielna przez {0}","stringNotANumber":"Wartość nie jest liczbą","invalidPassword":"Niepoprawne hasło","invalidPhone":"Niepoprawny numer telefonu, n.p.: (123) 456-9999","invalidPattern":"To pole powinno mieć format {0}","stringTooShort":"To pole powinno zawierać co najmniej {0} znaków","stringTooLong":"To pole powinno zawierać najwyżej {0} znaków"}}});})(jQuery);
/*!
Alpaca Version 1.1.3

Copyright 2014 Gitana Software, Inc.

Licensed under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance with the License. 

You may obtain a copy of the License at 
	http://www.apache.org/licenses/LICENSE-2.0 

Unless required by applicable law or agreed to in writing, software 
distributed under the License is distributed on an "AS IS" BASIS, 
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
See the License for the specific language governing permissions and 
limitations under the License. 

For more information, please contact Gitana Software, Inc. at this
address:

  info@gitanasoftware.com
*/
(function($){var Alpaca=$.alpaca;Alpaca.Fields.AddressField=Alpaca.Fields.ObjectField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();this.schema={"title":"Home Address","type":"object","properties":{"street":{"title":"Street","type":"array","items":{"type":"string","maxLength":30,"minItems":0,"maxItems":3}},"city":{"title":"City","type":"string"},"state":{"title":"State","type":"string","enum":["AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY"]},"zip":{"title":"Zip Code","type":"string","pattern":/^(\d{5}(-\d{4})?)?$/}}};Alpaca.merge(this.options,{"fields":{"zip":{"maskString":"99999","size":5},"state":{"optionLabels":["ALABAMA","ALASKA","AMERICANSAMOA","ARIZONA","ARKANSAS","CALIFORNIA","COLORADO","CONNECTICUT","DELAWARE","DISTRICTOFCOLUMBIA","FEDERATEDSTATESOFMICRONESIA","FLORIDA","GEORGIA","GUAM","HAWAII","IDAHO","ILLINOIS","INDIANA","IOWA","KANSAS","KENTUCKY","LOUISIANA","MAINE","MARSHALLISLANDS","MARYLAND","MASSACHUSETTS","MICHIGAN","MINNESOTA","MISSISSIPPI","MISSOURI","MONTANA","NEBRASKA","NEVADA","NEWHAMPSHIRE","NEWJERSEY","NEWMEXICO","NEWYORK","NORTHCAROLINA","NORTHDAKOTA","NORTHERNMARIANAISLANDS","OHIO","OKLAHOMA","OREGON","PALAU","PENNSYLVANIA","PUERTORICO","RHODEISLAND","SOUTHCAROLINA","SOUTHDAKOTA","TENNESSEE","TEXAS","UTAH","VERMONT","VIRGINISLANDS","VIRGINIA","WASHINGTON","WESTVIRGINIA","WISCONSIN","WYOMING"]}}});if(Alpaca.isEmpty(this.options.addressValidation)){this.options.addressValidation=true;}},getAddress:function(){var value=this.getValue();if(this.view.type=="view"){value=this.data;}var address="";if(value){if(value.street){$.each(value.street,function(index,value){address+=value+" ";});}if(value.city){address+=value.city+" ";}if(value.state){address+=value.state+" ";}if(value.zip){address+=value.zip;}}return address;},renderField:function(onSuccess){var self=this;this.base(function(){$(self.fieldContainer).addClass("alpaca-addressfield");if(self.options.addressValidation&&!self.isDisplayOnly()){$('<div style="clear:both;"></div>').appendTo(self.fieldContainer);var mapButton=$('<div class="alpaca-form-button">Google Map</div>').appendTo(self.fieldContainer);if(mapButton.button){mapButton.button({text:true});}mapButton.click(function(){if(google&&google.maps){var geocoder=new google.maps.Geocoder();var address=self.getAddress();if(geocoder){geocoder.geocode({"address":address},function(results,status){if(status==google.maps.GeocoderStatus.OK){var mapCanvasId=self.getId()+"-map-canvas";if($("#"+mapCanvasId).length===0){$("<div id='"+mapCanvasId+"' class='alpaca-controlfield-address-mapcanvas'></div>").appendTo(self.fieldContainer);}var map=new google.maps.Map(document.getElementById(self.getId()+"-map-canvas"),{"zoom":10,"center":results[0].geometry.location,"mapTypeId":google.maps.MapTypeId.ROADMAP});var marker=new google.maps.Marker({map:map,position:results[0].geometry.location});}else{self.displayMessage("Geocoding failed: "+status);}});}}else{self.displayMessage("Google Map API is not installed.");}}).wrap("<small/>");if(self.options.showMapOnLoad){mapButton.click();}}if(onSuccess){onSuccess();}});},isContainer:function(){return false;},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"validateAddress":{"title":"Address Validation","description":"Enable address validation if true","type":"boolean","default":true},"showMapOnLoad":{"title":"Whether to show the map when first loaded","type":"boolean"}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"validateAddress":{"helper":"Address validation if checked","rightLabel":"Enable Google Map for address validation?","type":"checkbox"}}});},getTitle:function(){return"Address";},getDescription:function(){return"Standard US Address with Street, City, State and Zip. Also comes with support for Google map.";},getType:function(){return"any";},getFieldType:function(){return"address";}});Alpaca.registerFieldClass("address",Alpaca.Fields.AddressField);})(jQuery);(function($){var round=(function(){var strategies={up:Math.ceil,down:function(input){return ~~input;},nearest:Math.round};return function(strategy){return strategies[strategy];};})();var Alpaca=$.alpaca;Alpaca.Fields.CurrencyField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){options=options||{};var pfOptionsSchema=this.getSchemaOfPriceFormatOptions().properties;for(var i in pfOptionsSchema){var option=pfOptionsSchema[i];if(!(i in options)){options[i]=option["default"]||undefined;}}data=""+parseFloat(data).toFixed(options.centsLimit);this.base(container,data,options,schema,view,connector,errorCallback);},postRender:function(callback){var self=this;this.base(function(){$(self.field).priceFormat(self.options);callback();});},getValue:function(){var field=this.field;var val=$(field).is("input")?field.val():field.hmtl();if(this.options.unmask||this.options.round!=="none"){var unmasked=(function(){var result="";for(var i in val){var cur=val[i];if(!isNaN(cur)){result+=cur;}else{if(cur===this.options.centsSeparator){result+=".";}}}return parseFloat(result);}).bind(this)();if(this.options.round!=="none"){unmasked=round(this.options.round)(unmasked);if(!this.options.unmask){var result=[];var unmaskedString=""+unmasked;for(var i=0,u=0;i<val.length;i++){if(!isNaN(val[i])){result.push(unmaskedString[u++]||0);}else{result.push(val[i]);}}return result.join("");}}return unmasked;}else{return val;}},getSchemaOfPriceFormatOptions:function(){return{"properties":{"allowNegative":{"title":"Allow Negative","description":"Determines if negative numbers are allowed.","type":"boolean","default":false},"centsLimit":{"title":"Cents Limit","description":"The limit of fractional digits.","type":"number","default":2,"minimum":0},"centsSeparator":{"title":"Cents Separator","description":"The separator between whole and fractional amounts.","type":"text","default":"."},"clearPrefix":{"title":"Clear Prefix","description":"Determines if the prefix is cleared on blur.","type":"boolean","default":false},"clearSuffix":{"title":"Clear Suffix","description":"Determines if the suffix is cleared on blur.","type":"boolean","default":false},"insertPlusSign":{"title":"Plus Sign","description":"Determines if a plus sign should be inserted for positive values.","type":"boolean","default":false},"limit":{"title":"Limit","description":"A limit of the length of the field.","type":"number","default":undefined,"minimum":0},"prefix":{"title":"Prefix","description":"The prefix if any for the field.","type":"text","default":"$"},"round":{"title":"Round","description":"Determines if the field is rounded. (Rounding is done when getValue is called and is not reflected in the UI)","type":"string","enum":["up","down","nearest","none"],"default":"none"},"suffix":{"title":"Suffix","description":"The suffix if any for the field.","type":"text","default":""},"thousandsSeparator":{"title":"Thousands Separator","description":"The separator between thousands.","type":"string","default":","},"unmask":{"title":"Unmask","description":"If true then the resulting value for this field will be unmasked.  That is, the resulting value will be a float instead of a string (with the prefix, suffix, etc. removed).","type":"boolean","default":true}}};},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),this.getSchemaOfPriceFormatOptions());},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"allowNegative":{"type":"checkbox"},"centsLimit":{"type":"number"},"centsSeparator":{"type":"text"},"clearPrefix":{"type":"checkbox"},"clearSuffix":{"type":"checkbox"},"insertPlusSign":{"type":"checkbox"},"limit":{"type":"number"},"prefix":{"type":"text"},"round":{"type":"select"},"suffix":{"type":"text"},"thousandsSeparator":{"type":"string"},"unmask":{"type":"checkbox"}}});},getTitle:function(){return"Currency Field";},getDescription:function(){return"Provides an automatically formatted and configurable input for entering currency amounts.";},getFieldType:function(){return"currency";}});Alpaca.registerFieldClass("currency",Alpaca.Fields.CurrencyField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.DateField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.options.dateFormat){this.options.dateFormat=Alpaca.defaultDateFormat;}if(!this.options.dateFormatRegex){this.options.dateFormatRegex=Alpaca.regexps.date;}},postRender:function(callback){var self=this;this.base(function(){if(self.field&&$.datepicker){var datePickerOptions=self.options.datepicker;if(!datePickerOptions){datePickerOptions={"changeMonth":true,"changeYear":true};}if(!datePickerOptions.dateFormat){datePickerOptions.dateFormat=self.options.dateFormat;}self.field.datepicker(datePickerOptions);if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-date");}}callback();});},onChange:function(e){this.base();this.refreshValidationState();},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateDateFormat();valInfo["invalidDate"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("invalidDate"),[this.options.dateFormat]),"status":status};return baseStatus&&valInfo["invalidDate"]["status"];},_validateDateFormat:function(){var value=this.getValue();if($.datepicker){try{$.datepicker.parseDate(this.options.dateFormat,value);return true;}catch(e){return false;}}else{return value.match(this.options.dateFormatRegex);}},setValue:function(val){if(val===""){this.base(val);return;}this.base(val);},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{"format":{"title":"Format","description":"Property data format","type":"string","default":"date","enum":["date"],"readonly":true}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"format":{"type":"text"}}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"dateFormat":{"title":"Date Format","description":"Date format","type":"string","default":Alpaca.defaultDateFormat},"dateFormatRegex":{"title":"Format Regular Expression","description":"Regular expression for validation date format","type":"string","default":Alpaca.regexps.date},"datepicker":{"title":"Date Picker options","description":"Optional configuration to be passed to jQuery UI DatePicker control","type":"any"}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"dateFormat":{"type":"text"},"dateFormatRegex":{"type":"text"},"datetime":{"type":"any"}}});},getTitle:function(){return"Date Field";},getDescription:function(){return"Date Field.";},getFieldType:function(){return"date";}});Alpaca.registerMessages({"invalidDate":"Invalid date for format {0}"});Alpaca.registerFieldClass("date",Alpaca.Fields.DateField);Alpaca.registerDefaultFormatFieldMapping("date","date");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.DatetimeField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();},postRender:function(callback){var self=this;this.base(function(){if(self.field){if(self.field.datetimepicker){self.field.hover(function(){if(!$(this).hasClass("hasDatepicker")){var timePickerOptions=self.options.timepicker;if(!timePickerOptions){timePickerOptions=self.options.timepicker;}if(!timePickerOptions){timePickerOptions={"changeYear":true,"changeMonth":true};}$(this).datetimepicker(timePickerOptions);}});if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-datetime");}}}callback();});},setValue:function(value){if(value){if(Alpaca.isNumber()){value=new Date(value);}if(Object.prototype.toString.call(value)=="[object Date]"){this.base((value.getMonth()+1)+"/"+value.getDate()+"/"+value.getFullYear()+" "+value.getHours()+":"+value.getMinutes());}else{this.base(value);}}else{this.base(value);}},getValue:function(){return this.base();},getDatetime:function(){try{return this.field.datetimepicker("getDate");}catch(e){return this.getValue();}},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"timepicker":{"title":"Timepicker options","description":"Options that are supported by the <a href='http://trentrichardson.com/examples/timepicker/'>jQuery timepicker addon</a>.","type":"any"}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"timepicker":{"type":"any"}}});},getTitle:function(){return"Datetime Field";},getDescription:function(){return"Datetime Field based on Trent Richardson's <a href='http://trentrichardson.com/examples/timepicker/'>jQuery timepicker addon</a>.";},getFieldType:function(){return"datetime";}});Alpaca.registerFieldClass("datetime",Alpaca.Fields.DatetimeField);Alpaca.registerDefaultFormatFieldMapping("datetime","datetime");Alpaca.registerDefaultFormatFieldMapping("date-time","datetime");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.EditorField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();this.controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldEditor");},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-editor");$(self.fieldContainer).parent().css("width","100%");var aceHeight=self.options.aceHeight;if(aceHeight){$(self.fieldContainer).css("height",aceHeight);}var aceWidth=self.options.aceWidth;if(!aceWidth){aceWidth="100%";}$(self.fieldContainer).css("width",aceWidth);}var el=$(self.fieldContainer).find(".control-field-editor-el")[0];if(!ace&&window.ace){ace=window.ace;}if(!ace){Alpaca.logError("Editor Field is missing the 'ace' Cloud 9 Editor");}else{self.editor=ace.edit(el);var aceTheme=self.options.aceTheme;if(!aceTheme){aceTheme="ace/theme/chrome";}self.editor.setTheme(aceTheme);var aceMode=self.options.aceMode;if(!aceMode){aceMode="ace/mode/json";}self.editor.getSession().setMode(aceMode);self.editor.renderer.setHScrollBarAlwaysVisible(false);self.editor.setShowPrintMargin(false);self.editor.setValue(self.data);self.editor.clearSelection();self.editor.getSession().getUndoManager().reset();if(self.options.aceFitContentHeight){var heightUpdateFunction=function(){var first=false;if(self.editor.renderer.lineHeight===1){first=true;self.editor.renderer.lineHeight=16;}var newHeight=self.editor.getSession().getScreenLength()*self.editor.renderer.lineHeight+self.editor.renderer.scrollBar.getWidth();$(self.fieldContainer).height(newHeight.toString()+"px");self.editor.resize();if(first){window.setTimeout(function(){self.editor.clearSelection();},5);}};heightUpdateFunction();self.editor.getSession().on("change",heightUpdateFunction);}if(self.schema.readonly){self.editor.setReadOnly(true);}$(el).bind("destroyed",function(){if(self.editor){self.editor.destroy();self.editor=null;}});}callback();});},destroy:function(){if(this.editor){this.editor.destroy();this.editor=null;}this.base();},getEditor:function(){return this.editor;},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var wordCountStatus=this._validateWordCount();valInfo["wordLimitExceeded"]={"message":wordCountStatus?"":Alpaca.substituteTokens(this.view.getMessage("wordLimitExceeded"),[this.options.wordlimit]),"status":wordCountStatus};var editorAnnotationsStatus=this._validateEditorAnnotations();valInfo["editorAnnotationsExist"]={"message":editorAnnotationsStatus?"":this.view.getMessage("editorAnnotationsExist"),"status":editorAnnotationsStatus};return baseStatus&&valInfo["wordLimitExceeded"]["status"]&&valInfo["editorAnnotationsExist"]["status"];},_validateEditorAnnotations:function(){if(this.editor){var annotations=this.editor.getSession().getAnnotations();if(annotations&&annotations.length>0){return false;}}return true;},_validateWordCount:function(){if(this.options.wordlimit&&this.options.wordlimit>-1){var val=this.editor.getValue();if(val){var wordcount=val.split(" ").length;if(wordcount>this.options.wordlimit){return false;}}}return true;},onDependentReveal:function(){if(this.editor){this.editor.resize();}},setValue:function(value){var self=this;if(this.editor){this.editor.setValue(value);}this.base(value);},getValue:function(){var value=null;if(this.editor){value=this.editor.getValue();}return value;},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"aceTheme":{"title":"ACE Editor Theme","description":"Specifies the theme to set onto the editor instance","type":"string","default":"ace/theme/twilight"},"aceMode":{"title":"ACE Editor Mode","description":"Specifies the mode to set onto the editor instance","type":"string","default":"ace/mode/javascript"},"aceWidth":{"title":"ACE Editor Height","description":"Specifies the width of the wrapping div around the editor","type":"string","default":"100%"},"aceHeight":{"title":"ACE Editor Height","description":"Specifies the height of the wrapping div around the editor","type":"string","default":"300px"},"aceFitContentHeight":{"title":"ACE Fit Content Height","description":"Configures the ACE Editor to auto-fit its height to the contents of the editor","type":"boolean","default":false},"wordlimit":{"title":"Word Limit","description":"Limits the number of words allowed in the text area.","type":"number","default":-1}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"aceTheme":{"type":"text"},"aceMode":{"type":"text"},"wordlimit":{"type":"integer"}}});},getTitle:function(){return"Editor";},getDescription:function(){return"Editor";},getFieldType:function(){return"editor";}});Alpaca.registerMessages({"wordLimitExceeded":"The maximum word limit of {0} has been exceeded.","editorAnnotationsExist":"The editor has errors in it that must be corrected"});Alpaca.registerTemplate("controlFieldEditor",'<div id="${id}" class="control-field-editor-el"></div>');Alpaca.registerFieldClass("editor",Alpaca.Fields.EditorField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.EmailField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.schema.pattern){this.schema.pattern=Alpaca.regexps.email;}},postRender:function(callback){var self=this;this.base(function(){if(this.fieldContainer){this.fieldContainer.addClass("alpaca-controlfield-email");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;if(!valInfo["invalidPattern"]["status"]){valInfo["invalidPattern"]["message"]=this.view.getMessage("invalidEmail");}return baseStatus;},getSchemaOfSchema:function(){var pattern=(this.schema&&this.schema.pattern)?this.schema.pattern:Alpaca.regexps.email;return Alpaca.merge(this.base(),{"properties":{"pattern":{"title":"Pattern","description":"Field Pattern in Regular Expression","type":"string","default":pattern,"enum":[pattern],"readonly":true},"format":{"title":"Format","description":"Property data format","type":"string","default":"email","enum":["email"],"readonly":true}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"format":{"type":"text"}}});},getTitle:function(){return"Email Field";},getDescription:function(){return"Email Field.";},getFieldType:function(){return"email";}});Alpaca.registerMessages({"invalidEmail":"Invalid Email address e.g. info@cloudcms.com"});Alpaca.registerFieldClass("email",Alpaca.Fields.EmailField);Alpaca.registerDefaultFormatFieldMapping("email","email");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.IntegerField=Alpaca.Fields.NumberField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},getValue:function(){var textValue=this.field.val();if(Alpaca.isValEmpty(textValue)){return -1;}else{return parseInt(textValue,10);}},onChange:function(e){this.base();if(this.slider){this.slider.slider("value",this.getValue());}},postRender:function(callback){var self=this;this.base(function(){if(self.options.slider){if(!Alpaca.isEmpty(self.schema.maximum)&&!Alpaca.isEmpty(self.schema.minimum)){if(self.field){self.field.after('<div id="slider"></div>');self.slider=$("#slider",self.field.parent()).slider({value:self.getValue(),min:self.schema.minimum,max:self.schema.maximum,slide:function(event,ui){self.setValue(ui.value);self.refreshValidationState();}});}}}if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-integer");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;if(!valInfo["stringNotANumber"]["status"]){valInfo["stringNotANumber"]["message"]=this.view.getMessage("stringNotAnInteger");}return baseStatus;},_validateNumber:function(){var textValue=this.field.val();if(Alpaca.isValEmpty(textValue)){return true;}var floatValue=this.getValue();if(isNaN(floatValue)){return false;}if(!textValue.match(Alpaca.regexps.integer)){return false;}return true;},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{"minimum":{"title":"Minimum","description":"Minimum value of the property.","type":"integer"},"maximum":{"title":"Maximum","description":"Maximum value of the property.","type":"integer"},"divisibleBy":{"title":"Divisible By","description":"Property value must be divisible by this number.","type":"integer"}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"minimum":{"helper":"Minimum value of the field.","type":"integer"},"maximum":{"helper":"Maximum value of the field.","type":"integer"},"divisibleBy":{"helper":"Property value must be divisible by this number.","type":"integer"}}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"slider":{"title":"Slider","description":"Generate jQuery UI slider control with the field if true.","type":"boolean","default":false}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"slider":{"rightLabel":"Slider control ?","helper":"Generate slider control if selected.","type":"checkbox"}}});},getTitle:function(){return"Integer Field";},getDescription:function(){return"Field for integers.";},getType:function(){return"integer";},getFieldType:function(){return"integer";}});Alpaca.registerMessages({"stringNotAnInteger":"This value is not an integer."});Alpaca.registerFieldClass("integer",Alpaca.Fields.IntegerField);Alpaca.registerDefaultSchemaFieldMapping("integer","integer");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.IPv4Field=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.schema.pattern){this.schema.pattern=Alpaca.regexps.ipv4;}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-ipv4");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;if(!valInfo["invalidPattern"]["status"]){valInfo["invalidPattern"]["message"]=this.view.getMessage("invalidIPv4");}return baseStatus;},getSchemaOfSchema:function(){var pattern=(this.schema&&this.schema.pattern)?this.schema.pattern:Alpaca.regexps.ipv4;return Alpaca.merge(this.base(),{"properties":{"pattern":{"title":"Pattern","description":"Field Pattern in Regular Expression","type":"string","default":pattern,"readonly":true},"format":{"title":"Format","description":"Property data format","type":"string","enum":["ip-address"],"default":"ip-address","readonly":true}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"format":{"type":"text"}}});},getTitle:function(){return"IP Address Field";},getDescription:function(){return"IP Address Field.";},getFieldType:function(){return"ipv4";}});Alpaca.registerMessages({"invalidIPv4":"Invalid IPv4 address, e.g. 192.168.0.1"});Alpaca.registerFieldClass("ipv4",Alpaca.Fields.IPv4Field);Alpaca.registerDefaultFormatFieldMapping("ip-address","ipv4");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.JSONField=Alpaca.Fields.TextAreaField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setValue:function(value){if(Alpaca.isObject(value)||typeof(value)=="object"){value=JSON.stringify(value,null,3);}this.base(value);},getValue:function(){var val=this.base();if(val&&Alpaca.isString(val)){val=JSON.parse(val);}return val;},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateJSON();valInfo["stringNotAJSON"]={"message":status.status?"":this.view.getMessage("stringNotAJSON")+" "+status.message,"status":status.status};return baseStatus&&valInfo["stringNotAJSON"]["status"];},_validateJSON:function(){var textValue=this.field.val();if(Alpaca.isValEmpty(textValue)){return{"status":true};}try{var obj=JSON.parse(textValue);this.setValue(JSON.stringify(obj,null,3));return{"status":true};}catch(e){return{"status":false,"message":e.message};}},postRender:function(callback){var self=this;this.base(function(){if(self.field){self.field.bind("keypress",function(e){if(e.which==34){self.field.insertAtCaret('"');}if(e.which==123){self.field.insertAtCaret("}");}if(e.which==91){self.field.insertAtCaret("]");}});self.field.bind("keypress","Ctrl+l",function(){self.getEl().removeClass("alpaca-field-focused");self.refreshValidationState();});self.field.attr("title","Type Ctrl+L to format and validate the JSON string.");}if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-json");}callback();});},getTitle:function(){return"JSON Editor";},getDescription:function(){return"Editor for JSON objects with basic validation and formatting.";},getFieldType:function(){return"json";}});Alpaca.registerMessages({"stringNotAJSON":"This value is not a valid JSON string."});Alpaca.registerFieldClass("json",Alpaca.Fields.JSONField);$.fn.insertAtCaret=function(myValue){return this.each(function(){if(document.selection){this.focus();sel=document.selection.createRange();sel.text=myValue;this.focus();}else{if(this.selectionStart||this.selectionStart=="0"){var startPos=this.selectionStart;var endPos=this.selectionEnd;var scrollTop=this.scrollTop;this.value=this.value.substring(0,startPos)+myValue+this.value.substring(endPos,this.value.length);this.focus();this.selectionStart=startPos;this.selectionEnd=startPos;this.scrollTop=scrollTop;}else{this.value+=myValue;this.focus();}}});};jQuery.hotkeys={version:"0.8",specialKeys:{8:"backspace",9:"tab",13:"return",16:"shift",17:"ctrl",18:"alt",19:"pause",20:"capslock",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"insert",46:"del",96:"0",97:"1",98:"2",99:"3",100:"4",101:"5",102:"6",103:"7",104:"8",105:"9",106:"*",107:"+",109:"-",110:".",111:"/",112:"f1",113:"f2",114:"f3",115:"f4",116:"f5",117:"f6",118:"f7",119:"f8",120:"f9",121:"f10",122:"f11",123:"f12",144:"numlock",145:"scroll",191:"/",224:"meta"},shiftNums:{"`":"~","1":"!","2":"@","3":"#","4":"$","5":"%","6":"^","7":"&","8":"*","9":"(","0":")","-":"_","=":"+",";":": ","'":'"',",":"<",".":">","/":"?","\\":"|"}};function keyHandler(handleObj){if(typeof handleObj.data!=="string"){return;}var origHandler=handleObj.handler,keys=handleObj.data.toLowerCase().split(" ");handleObj.handler=function(event){if(this!==event.target&&(/textarea|select/i.test(event.target.nodeName)||event.target.type==="text")){return;}var special=event.type!=="keypress"&&jQuery.hotkeys.specialKeys[event.which],character=String.fromCharCode(event.which).toLowerCase(),key,modif="",possible={};if(event.altKey&&special!=="alt"){modif+="alt+";}if(event.ctrlKey&&special!=="ctrl"){modif+="ctrl+";}if(event.metaKey&&!event.ctrlKey&&special!=="meta"){modif+="meta+";}if(event.shiftKey&&special!=="shift"){modif+="shift+";}if(special){possible[modif+special]=true;}else{possible[modif+character]=true;possible[modif+jQuery.hotkeys.shiftNums[character]]=true;if(modif==="shift+"){possible[jQuery.hotkeys.shiftNums[character]]=true;}}for(var i=0,l=keys.length;i<l;i++){if(possible[keys[i]]){return origHandler.apply(this,arguments);}}};}jQuery.each(["keydown","keyup","keypress"],function(){jQuery.event.special[this]={add:keyHandler};});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.IntegerField=Alpaca.Fields.NumberField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},getValue:function(){var textValue=this.field.val();if(Alpaca.isValEmpty(textValue)){return -1;}else{return parseInt(textValue,10);}},onChange:function(e){this.base();if(this.slider){this.slider.slider("value",this.getValue());}},postRender:function(callback){var self=this;this.base(function(){if(self.options.slider){if(!Alpaca.isEmpty(self.schema.maximum)&&!Alpaca.isEmpty(self.schema.minimum)){if(self.field){self.field.after('<div id="slider"></div>');self.slider=$("#slider",self.field.parent()).slider({value:self.getValue(),min:self.schema.minimum,max:self.schema.maximum,slide:function(event,ui){self.setValue(ui.value);self.refreshValidationState();}});}}}if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-integer");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;if(!valInfo["stringNotANumber"]["status"]){valInfo["stringNotANumber"]["message"]=this.view.getMessage("stringNotAnInteger");}return baseStatus;},_validateNumber:function(){var textValue=this.field.val();if(Alpaca.isValEmpty(textValue)){return true;}var floatValue=this.getValue();if(isNaN(floatValue)){return false;}if(!textValue.match(Alpaca.regexps.integer)){return false;}return true;},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{"minimum":{"title":"Minimum","description":"Minimum value of the property.","type":"integer"},"maximum":{"title":"Maximum","description":"Maximum value of the property.","type":"integer"},"divisibleBy":{"title":"Divisible By","description":"Property value must be divisible by this number.","type":"integer"}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"minimum":{"helper":"Minimum value of the field.","type":"integer"},"maximum":{"helper":"Maximum value of the field.","type":"integer"},"divisibleBy":{"helper":"Property value must be divisible by this number.","type":"integer"}}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"slider":{"title":"Slider","description":"Generate jQuery UI slider control with the field if true.","type":"boolean","default":false}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"slider":{"rightLabel":"Slider control ?","helper":"Generate slider control if selected.","type":"checkbox"}}});},getTitle:function(){return"Integer Field";},getDescription:function(){return"Field for integers.";},getType:function(){return"integer";},getFieldType:function(){return"integer";}});Alpaca.registerMessages({"stringNotAnInteger":"This value is not an integer."});Alpaca.registerFieldClass("integer",Alpaca.Fields.IntegerField);Alpaca.registerDefaultSchemaFieldMapping("integer","integer");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.LowerCaseField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-lowercase");}callback();});},setValue:function(val){var lowerValue=val.toLowerCase();if(lowerValue!=this.getValue()){this.base(lowerValue);}},onKeyPress:function(e){this.base(e);var _this=this;Alpaca.later(25,this,function(){var v=_this.getValue();_this.setValue(v);});},getTitle:function(){return"Lowercase Text";},getDescription:function(){return"Text field for lowercase text.";},getFieldType:function(){return"lowercase";}});Alpaca.registerFieldClass("lowercase",Alpaca.Fields.LowerCaseField);Alpaca.registerDefaultFormatFieldMapping("lowercase","lowercase");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.MapField=Alpaca.Fields.ArrayField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();Alpaca.mergeObject(this.options,{"forceRevalidation":true});if(Alpaca.isEmpty(this.data)){return;}if(!Alpaca.isArray(this.data)){if(Alpaca.isObject(this.data)){var newData=[];$.each(this.data,function(key,value){var newValue=Alpaca.copyOf(value);newValue["_key"]=key;newData.push(newValue);});this.data=newData;}}},getValue:function(){if(this.children.length===0&&!this.schema.required){return;}var o={};for(var i=0;i<this.children.length;i++){var v=this.children[i].getValue();var key=v["_key"];if(key){delete v["_key"];o[key]=v;}}return o;},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var isValidMapKeysNotEmpty=this._validateMapKeysNotEmpty();valInfo["keyMissing"]={"message":isValidMapKeysNotEmpty?"":this.view.getMessage("keyMissing"),"status":isValidMapKeysNotEmpty};var isValidMapKeysUnique=this._validateMapKeysUnique();valInfo["keyNotUnique"]={"message":isValidMapKeysUnique?"":this.view.getMessage("keyNotUnique"),"status":isValidMapKeysUnique};return baseStatus&&valInfo["keyMissing"]["status"]&&valInfo["keyNotUnique"]["status"];},_validateMapKeysNotEmpty:function(){var isValid=true;for(var i=0;i<this.children.length;i++){var v=this.children[i].getValue();var key=v["_key"];if(!key){isValid=false;break;}}return isValid;},_validateMapKeysUnique:function(){var isValid=true;var keys={};for(var i=0;i<this.children.length;i++){var v=this.children[i].getValue();var key=v["_key"];if(keys[key]){isValid=false;}keys[key]=key;}return isValid;},postRender:function(callback){var self=this;this.base(function(){if(this.fieldContainer){this.fieldContainer.addClass("alpaca-controlfield-map");}callback();});},getTitle:function(){return"Map Field";},getDescription:function(){return"Field for objects with key/value pairs that share the same schema for values.";},getFieldType:function(){return"map";}});Alpaca.registerFieldClass("map",Alpaca.Fields.MapField);Alpaca.registerMessages({"keyNotUnique":"Keys of map field are not unique.","keyMissing":"Map contains an empty key."});})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.PasswordField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.schema.pattern){this.schema.pattern=Alpaca.regexps.password;}this.controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldPassword");},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-password");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;if(!valInfo["invalidPattern"]["status"]){valInfo["invalidPattern"]["message"]=this.view.getMessage("invalidPassword");}return baseStatus;},getSchemaOfSchema:function(){var pattern=(this.schema&&this.schema.pattern)?this.schema.pattern:/^[0-9a-zA-Z\x20-\x7E]*$/;return Alpaca.merge(this.base(),{"properties":{"pattern":{"title":"Pattern","description":"Field Pattern in Regular Expression","type":"string","default":this.schema.pattern,"enum":[pattern],"readonly":true},"format":{"title":"Format","description":"Property data format","type":"string","default":"password","enum":["password"],"readonly":true}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"format":{"type":"text"}}});},getTitle:function(){return"Password Field";},getDescription:function(){return"Password Field.";},getFieldType:function(){return"password";}});Alpaca.registerTemplate("controlFieldPassword",'<input type="password" id="${id}" {{if options.size}}size="${options.size}"{{/if}} {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');Alpaca.registerMessages({"invalidPassword":"Invalid Password"});Alpaca.registerFieldClass("password",Alpaca.Fields.PasswordField);Alpaca.registerDefaultFormatFieldMapping("password","password");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.PersonalNameField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-personalname");}callback();});},setValue:function(val){var upperValue="";for(var i=0;i<val.length;i++){if(i===0){upperValue+=val.charAt(i).toUpperCase();}else{if(val.charAt(i-1)==" "||val.charAt(i-1)=="-"||val.charAt(i-1)=="'"){upperValue+=val.charAt(i).toUpperCase();}else{upperValue+=val.charAt(i);}}}if(upperValue!=this.getValue()){this.base(upperValue);}},onKeyPress:function(e){this.base(e);var _this=this;Alpaca.later(25,this,function(){var v=_this.getValue();_this.setValue(v);});},getTitle:function(){return"Personal Name";},getDescription:function(){return"Text Field for personal name with captical letter for first letter & after hyphen, space or apostrophe.";},getFieldType:function(){return"personalname";}});Alpaca.registerFieldClass("personalname",Alpaca.Fields.PersonalNameField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.PhoneField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.schema.pattern){this.schema.pattern=Alpaca.regexps.phone;}if(Alpaca.isEmpty(this.options.maskString)){this.options.maskString="(999) 999-9999";}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-phone");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;if(!valInfo["invalidPattern"]["status"]){valInfo["invalidPattern"]["message"]=this.view.getMessage("invalidPhone");}return baseStatus;},getSchemaOfSchema:function(){var pattern=(this.schema&&this.schema.pattern)?this.schema.pattern:Alpaca.regexps.phone;return Alpaca.merge(this.base(),{"properties":{"pattern":{"title":"Pattern","description":"Field Pattern in Regular Expression","type":"string","default":pattern,"enum":[pattern],"readonly":true},"format":{"title":"Format","description":"Property data format","type":"string","default":"phone","enum":["phone"],"readonly":true}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"format":{"type":"text"}}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"maskString":{"title":"Field Mask String","description":"Expression for field mask","type":"string","default":"(999) 999-9999"}}});},getTitle:function(){return"Phone Field";},getDescription:function(){return"Phone Field.";},getFieldType:function(){return"phone";}});Alpaca.registerMessages({"invalidPhone":"Invalid Phone Number, e.g. (123) 456-9999"});Alpaca.registerFieldClass("phone",Alpaca.Fields.PhoneField);Alpaca.registerDefaultFormatFieldMapping("phone","phone");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.TagField=Alpaca.Fields.LowerCaseField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.options.separator){this.options.separator=",";}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-tag");}callback();});},getValue:function(){var val=this.base();if(val===""){return[];}return val.split(this.options.separator);},setValue:function(val){if(val===""){return;}this.base(val.join(this.options.separator));},onBlur:function(e){this.base(e);var vals=this.getValue();var trimmed=[];$.each(vals,function(i,v){if(v.trim()!==""){trimmed.push(v.trim());}});this.setValue(trimmed);},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"separator":{"title":"Separator","description":"Separator used to split tags.","type":"string","default":","}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"separator":{"type":"text"}}});},getTitle:function(){return"Tag Field";},getDescription:function(){return"Text field for entering list of tags separated by delimiter.";},getFieldType:function(){return"tag";}});Alpaca.registerFieldClass("tag",Alpaca.Fields.TagField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.TimeField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.base();if(!this.options.timeFormat){this.options.timeFormat="hh:mm:ss";}if(!this.options.timeFormatRegex){this.options.timeFormatRegex=/^(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])$/;}else{if(typeof(this.options.timeFormatRegex)==="string"){var flags=this.options.timeFormatRegex.replace(/.*\/([gimy]*)$/,"$1"),pattern=this.options.timeFormatRegex.replace(new RegExp("^/(.*?)/"+flags+"$"),"$1");this.options.timeFormatRegex=new RegExp(pattern,flags);}}if(Alpaca.isEmpty(this.options.maskString)){this.options.maskString="99:99:99";}},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-time");}callback();});},onChange:function(e){this.base();this.refreshValidationState();},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;var status=this._validateTimeFormat();valInfo["invalidTime"]={"message":status?"":Alpaca.substituteTokens(this.view.getMessage("invalidTime"),[this.options.timeFormat]),"status":status};return baseStatus&&valInfo["invalidTime"]["status"];},_validateTimeFormat:function(){var value=this.field.val();if(!this.schema.required&&(Alpaca.isValEmpty(value)||value==this.options.maskString.replace(/9/g,"_"))){return true;}return value.match(this.options.timeFormatRegex);},setValue:function(val){if(val===""){this.base(val);return;}this.base(val);},getSchemaOfSchema:function(){return Alpaca.merge(this.base(),{"properties":{"format":{"title":"Format","description":"Property data format","type":"string","default":"time","enum":["time"],"readonly":true}}});},getOptionsForSchema:function(){return Alpaca.merge(this.base(),{"fields":{"format":{"type":"text"}}});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"timeFormat":{"title":"Time Format","description":"Time format","type":"string","default":"hh:mm:ss"},"timeFormatRegex":{"title":"Format Regular Expression","description":"Regular expression for validation time format","type":"string","default":/^(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])$/},"maskString":{"default":"99:99:99"}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"timeFormat":{"type":"text"},"timeFormatRegex":{"type":"text"}}});},getTitle:function(){return"Time Field";},getDescription:function(){return"Field for time.";},getFieldType:function(){return"time";}});Alpaca.registerMessages({"invalidTime":"Invalid time for format {0}"});Alpaca.registerFieldClass("time",Alpaca.Fields.TimeField);Alpaca.registerDefaultFormatFieldMapping("time","time");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.UpperCaseField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-uppercase");}callback();});},setValue:function(val){var upperValue=val.toUpperCase();if(upperValue!=this.getValue()){this.base(upperValue);}},onKeyPress:function(e){this.base(e);var _this=this;Alpaca.later(25,this,function(){var v=_this.getValue();_this.setValue(v);});},getTitle:function(){return"Uppercase Text";},getDescription:function(){return"Text field for uppercase text.";},getFieldType:function(){return"uppercase";}});Alpaca.registerFieldClass("uppercase",Alpaca.Fields.UpperCaseField);Alpaca.registerDefaultFormatFieldMapping("uppercase","uppercase");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.WysiwygField=Alpaca.Fields.TextAreaField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);this.controlsConfig={};this.controlsConfig.simple={"html":{"visible":true},"createLink":{"visible":false},"unLink":{"visible":false},"h1":{"visible":false},"h2":{"visible":false},"h3":{"visible":false},"indent":{"visible":false},"insertHorizontalRule":{"visible":false},"insertImage":{"visible":false},"insertOrderedList":{"visible":false},"insertTable":{"visible":false},"insertUnorderedList":{"visible":false},"justifyCenter":{"visible":false},"justifyFull":{"visible":false},"justifyLeft":{"visible":false},"justifyRight":{"visible":false},"outdent":{"visible":false},"redo":{"visible":false},"removeFormat":{"visible":false},"subscript":{"visible":false},"superscript":{"visible":false},"undo":{"visible":false},"code":{"visible":false},"strikeThrough":{"visible":false}};},setup:function(){this.base();this.plugin=null;},postRender:function(callback){var self=this;this.base(function(){if(self.field&&$.wysiwyg){var wysiwygOptions=self.options.wysiwyg?self.options.wysiwyg:{};if(wysiwygOptions.controls){if(typeof(wysiwygOptions.controls)==="string"){wysiwygOptions.controls=self.controlsConfig[wysiwygOptions.controls];if(!wysiwygOptions.controls){wysiwygOptions.controls={};}}}if(self.options.onDemand){self.outerEl.find("textarea").mouseover(function(){if(!self.plugin){self.plugin=$(this).wysiwyg(wysiwygOptions);self.outerEl.find(".wysiwyg").mouseout(function(){if(self.plugin){self.plugin.wysiwyg("destroy");}self.plugin=null;});}});}else{self.plugin=self.field.wysiwyg(wysiwygOptions);}self.outerEl.find(".wysiwyg").mouseout(function(){self.data=_this.getValue();self.refreshValidationState();});}if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-wysiwyg");}callback();});},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"wysiwyg":{"title":"Editor options","description":"Options that are supported by the <a href='https://github.com/akzhan/jwysiwyg'>jQuery WYSIWYG plugin</a>.","type":"any"},"onDemand":{"title":"On Demand","description":"If true, WYSIWYG editor will only be enabled when the field is hovered.","type":"boolean","default":false}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"wysiwyg":{"type":"any"},"onDemand":{"type":"checkbox","rightLabel":"Make the editor on-demand?"}}});},getTitle:function(){return"Wysiwyg Editor";},getDescription:function(){return"Wysiwyg editor for multi-line text which is based on Akzhan Abdulin's <a href='https://github.com/akzhan/jwysiwyg'>jQuery WYSIWYG plugin</a>.";},getFieldType:function(){return"wysiwyg";}});Alpaca.registerFieldClass("wysiwyg",Alpaca.Fields.WysiwygField);})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.StateField=Alpaca.Fields.SelectField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){if(Alpaca.isUndefined(this.options.capitalize)){this.options.capitalize=false;}if(Alpaca.isUndefined(this.options.includeStates)){this.options.includeStates=true;}if(Alpaca.isUndefined(this.options.includeTerritories)){this.options.includeTerritories=true;}if(Alpaca.isUndefined(this.options.format)){this.options.format="name";}if(this.options.format=="name"||this.options.format=="code"){}else{Alpaca.logError("The configured state format: "+this.options.format+" is not a legal value [name, code]");this.options.format="name";}var holdings=Alpaca.retrieveUSHoldings(this.options.includeStates,this.options.includeTerritories,(this.options.format=="code"),this.options.capitalize);this.schema["enum"]=holdings.keys;this.options.optionLabels=holdings.values;this.base();},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-state");}callback();});},handleValidate:function(){var baseStatus=this.base();return baseStatus;},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"format":{"title":"Format","description":"How to represent the state values in the selector","type":"string","default":"name","enum":["name","code"],"readonly":true},"capitalize":{"title":"Capitalize","description":"Whether the values should be capitalized","type":"boolean","default":false,"readonly":true},"includeStates":{"title":"Include States","description":"Whether to include the states of the United States","type":"boolean","default":true,"readonly":true},"includeTerritories":{"title":"Include Territories","description":"Whether to include the territories of the United States","type":"boolean","default":true,"readonly":true}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"format":{"type":"text"},"capitalize":{"type":"checkbox"},"includeStates":{"type":"checkbox"},"includeTerritories":{"type":"checkbox"}}});},getTitle:function(){return"State Field";},getDescription:function(){return"Provides a dropdown selector of states and/or territories in the United States, keyed by their two-character code.";},getFieldType:function(){return"state";}});Alpaca.registerFieldClass("state",Alpaca.Fields.StateField);Alpaca.registerDefaultFormatFieldMapping("state","state");Alpaca.retrieveUSHoldings=function(){var holdings=[];holdings.push({"name":"Arkansas","code":"AK","state":true,"territory":false});holdings.push({"name":"Alabama","code":"AL","state":true,"territory":false});holdings.push({"name":"American Samoa","code":"AS","state":false,"territory":true});holdings.push({"name":"Arizona","code":"AR","state":true,"territory":false});holdings.push({"name":"California","code":"CA","state":true,"territory":false});holdings.push({"name":"Colorado","code":"CO","state":true,"territory":false});holdings.push({"name":"Connecticut","code":"CT","state":true,"territory":false});holdings.push({"name":"Delaware","code":"DE","state":true,"territory":false});holdings.push({"name":"Distict of Columbia","code":"DC","state":false,"territory":true});holdings.push({"name":"Federated States of Micronesia","code":"FM","state":false,"territory":true});holdings.push({"name":"Florida","code":"FL","state":true,"territory":false});holdings.push({"name":"Georgia","code":"GA","state":true,"territory":false});holdings.push({"name":"Guam","code":"GU","state":false,"territory":true});holdings.push({"name":"Georgia","code":"GA","state":true,"territory":false});holdings.push({"name":"Hawaii","code":"HI","state":true,"territory":false});holdings.push({"name":"Idaho","code":"ID","state":true,"territory":false});holdings.push({"name":"Illinois","code":"IL","state":true,"territory":false});holdings.push({"name":"Indiana","code":"IN","state":true,"territory":false});holdings.push({"name":"Iowa","code":"IA","state":true,"territory":false});holdings.push({"name":"Kansas","code":"KS","state":true,"territory":false});holdings.push({"name":"Kentucky","code":"KY","state":true,"territory":false});holdings.push({"name":"Louisiana","code":"LA","state":true,"territory":false});holdings.push({"name":"Maine","code":"ME","state":true,"territory":false});holdings.push({"name":"Marshall Islands","code":"MH","state":false,"territory":true});holdings.push({"name":"Maryland","code":"MD","state":true,"territory":false});holdings.push({"name":"Massachusetts","code":"MA","state":true,"territory":false});holdings.push({"name":"Michigan","code":"MI","state":true,"territory":false});holdings.push({"name":"Minnesota","code":"MN","state":true,"territory":false});holdings.push({"name":"Mississippi","code":"MS","state":true,"territory":false});holdings.push({"name":"Missouri","code":"MO","state":true,"territory":false});holdings.push({"name":"Montana","code":"MT","state":true,"territory":false});holdings.push({"name":"Nebraska","code":"NE","state":true,"territory":false});holdings.push({"name":"Nevada","code":"NV","state":true,"territory":false});holdings.push({"name":"New Hampshire","code":"NH","state":true,"territory":false});holdings.push({"name":"New Jersey","code":"NJ","state":true,"territory":false});holdings.push({"name":"New Mexico","code":"NM","state":true,"territory":false});holdings.push({"name":"New York","code":"NY","state":true,"territory":false});holdings.push({"name":"North Carolina","code":"NC","state":true,"territory":false});holdings.push({"name":"North Dakota","code":"ND","state":true,"territory":false});holdings.push({"name":"Northern Mariana Islands","code":"MP","state":true,"territory":false});holdings.push({"name":"Ohio","code":"OH","state":true,"territory":false});holdings.push({"name":"Oklahoma","code":"OK","state":true,"territory":false});holdings.push({"name":"Oregon","code":"OR","state":true,"territory":false});holdings.push({"name":"Palau","code":"PW","state":false,"territory":true});holdings.push({"name":"Pennsylvania","code":"PA","state":true,"territory":false});holdings.push({"name":"Puerto Rico","code":"PR","state":false,"territory":true});holdings.push({"name":"Rhode Island","code":"RI","state":true,"territory":false});holdings.push({"name":"South Carolina","code":"SC","state":true,"territory":false});holdings.push({"name":"South Dakota","code":"SD","state":true,"territory":false});holdings.push({"name":"Tennessee","code":"TN","state":true,"territory":false});holdings.push({"name":"Texas","code":"TX","state":true,"territory":false});holdings.push({"name":"Utah","code":"UT","state":true,"territory":false});holdings.push({"name":"Vermont","code":"VT","state":true,"territory":false});holdings.push({"name":"Virgin Islands","code":"VI","state":false,"territory":true});holdings.push({"name":"Virginia","code":"VA","state":true,"territory":false});holdings.push({"name":"Washington","code":"WA","state":true,"territory":false});holdings.push({"name":"West Virginia","code":"WV","state":true,"territory":false});holdings.push({"name":"Wisconsin","code":"WI","state":true,"territory":false});holdings.push({"name":"Wyoming","code":"WY","state":true,"territory":false});return function(includeStates,includeTerritories,codeValue,capitalize){var result={"keys":[],"values":[]};for(var i=0;i<holdings.length;i++){var keep=false;if(holdings[i].state&&includeStates){keep=true;}else{if(holdings[i].territory&&includeTerritories){keep=true;}}if(keep){var key=holdings[i].code;var value=holdings[i].name;if(codeValue){value=holdings[i].code;}if(capitalize){value=value.toUpperCase();}result.keys.push(key);result.values.push(value);}}return result;};}();})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.CountryField=Alpaca.Fields.SelectField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){if(Alpaca.isUndefined(this.options.capitalize)){this.options.capitalize=false;}this.schema["enum"]=[];this.options.optionLabels=[];var countriesMap=this.view.getMessage("countries");if(countriesMap){for(var countryKey in countriesMap){this.schema["enum"].push(countryKey);var label=countriesMap[countryKey];if(this.options.capitalize){label=label.toUpperCase();}this.options.optionLabels.push(label);}}this.base();},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-country");}callback();});},handleValidate:function(){var baseStatus=this.base();return baseStatus;},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"capitalize":{"title":"Capitalize","description":"Whether the values should be capitalized","type":"boolean","default":false,"readonly":true}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"capitalize":{"type":"checkbox"}}});},getTitle:function(){return"Country Field";},getDescription:function(){return"Provides a dropdown selector of countries keyed by their ISO3 code.  The names of the countries are read from the I18N bundle for the current locale.";},getFieldType:function(){return"country";}});Alpaca.registerFieldClass("country",Alpaca.Fields.CountryField);Alpaca.registerDefaultFormatFieldMapping("country","country");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.ZipcodeField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.options.format=(this.options.format?this.options.format:"nine");if(this.options.format=="nine"){this.schema.pattern=Alpaca.regexps["zipcode-nine"];}else{if(this.options.format=="five"){this.schema.pattern=Alpaca.regexps["zipcode-five"];}else{Alpaca.logError("The configured zipcode format: "+this.options.format+" is not a legal value [five, nine]");this.options.format="nine";this.schema.pattern=Alpaca.regexps["zipcode-nine"];}}if(this.options.format=="nine"){this.options["maskString"]="99999-9999";}else{if(this.options.format=="five"){this.options["maskString"]="99999";}}this.base();},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-zipcode");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;if(!valInfo["invalidPattern"]["status"]){if(this.options.format=="nine"){valInfo["invalidPattern"]["message"]=this.view.getMessage("invalidZipcodeFormatNine");}else{if(this.options.format=="five"){valInfo["invalidPattern"]["message"]=this.view.getMessage("invalidZipcodeFormatFive");}}}return baseStatus;},getSchemaOfOptions:function(){return Alpaca.merge(this.base(),{"properties":{"format":{"title":"Format","description":"How to represent the zipcode field","type":"string","default":"five","enum":["five","nine"],"readonly":true}}});},getOptionsForOptions:function(){return Alpaca.merge(this.base(),{"fields":{"format":{"type":"text"}}});},getTitle:function(){return"Zipcode Field";},getDescription:function(){return"Provides a five or nine-digital US zipcode control with validation.";},getFieldType:function(){return"zipcode";}});Alpaca.registerMessages({"invalidZipcodeFormatFive":"Invalid Five-Digit Zipcode (#####)","invalidZipcodeFormatNine":"Invalid Nine-Digit Zipcode (#####-####)"});Alpaca.registerFieldClass("zipcode",Alpaca.Fields.ZipcodeField);Alpaca.registerDefaultFormatFieldMapping("zipcode","zipcode");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.URLField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){this.schema.pattern=Alpaca.regexps.url;this.schema.format="uri";this.base();},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-url");}callback();});},handleValidate:function(){var baseStatus=this.base();var valInfo=this.validation;if(!valInfo["invalidPattern"]["status"]){valInfo["invalidPattern"]["message"]=this.view.getMessage("invalidURLFormat");}return baseStatus;},getTitle:function(){return"URL Field";},getDescription:function(){return"Provides a text control with validation for an internet web address.";},getFieldType:function(){return"url";}});Alpaca.registerMessages({"invalidURLFormat":"The URL provided is not a valid web address."});Alpaca.registerFieldClass("url",Alpaca.Fields.URLField);Alpaca.registerDefaultFormatFieldMapping("url","url");})(jQuery);(function($){var Alpaca=$.alpaca;Alpaca.Fields.UploadField=Alpaca.Fields.TextField.extend({constructor:function(container,data,options,schema,view,connector,errorCallback){this.base(container,data,options,schema,view,connector,errorCallback);},setup:function(){var self=this;this.base();this.controlFieldTemplateDescriptor=this.view.getTemplateDescriptor("controlFieldUpload");this.uploadDescriptor=self.view.getTemplateDescriptor("controlFieldUpload_upload");this.downloadDescriptor=self.view.getTemplateDescriptor("controlFieldUpload_download");if(typeof(self.options.multiple)=="undefined"){self.options.multiple=false;}if(typeof(self.options.showUploadPreview)=="undefined"){self.options.showUploadPreview=true;}},renderField:function(onSuccess){var self=this;this.base(function(){self.field=$(self.field).find(".alpaca-fileupload-input-hidden");if(onSuccess){onSuccess();}});},postRender:function(callback){var self=this;this.base(function(){if(self.fieldContainer){self.fieldContainer.addClass("alpaca-controlfield-upload");}self.handlePostRender(self.fieldContainer,function(){callback();});});},handlePostRender:function(el,callback){var self=this;var uploadTemplateFunction=function(data){return Alpaca.tmpl(self.uploadDescriptor,{o:data});};var downloadTemplateFunction=function(data){return Alpaca.tmpl(self.downloadDescriptor,{o:data});};var fileUploadConfig={};fileUploadConfig["dataType"]="json";fileUploadConfig["uploadTemplateId"]=null;fileUploadConfig["uploadTemplate"]=uploadTemplateFunction;fileUploadConfig["downloadTemplateId"]=null;fileUploadConfig["downloadTemplate"]=downloadTemplateFunction;fileUploadConfig["filesContainer"]=$(el).find(".files");fileUploadConfig["dropZone"]=$(el).find(".fileupload-active-zone");fileUploadConfig["url"]="/";fileUploadConfig["method"]="post";fileUploadConfig["showUploadPreview"]=self.options.showUploadPreview;if(self.options.upload){for(var k in self.options.upload){fileUploadConfig[k]=self.options.upload[k];}}if(self.options.multiple){$(el).find(".alpaca-fileupload-input").attr("multiple",true);$(el).find(".alpaca-fileupload-input").attr("name",self.name+"_files[]");}$(el).find(".progress").css("display","none");fileUploadConfig["progressall"]=function(e,data){var showProgressBar=false;if(data.loaded<data.total){showProgressBar=true;}if(showProgressBar){$(el).find(".progress").css("display","block");var progress=parseInt(data.loaded/data.total*100,10);$("#progress .progress-bar").css("width",progress+"%");}else{$(el).find(".progress").css("display","none");}};self.applyConfiguration(fileUploadConfig);var fileUpload=self.fileUpload=$(el).find(".alpaca-fileupload-input").fileupload(fileUploadConfig);fileUpload.bindFirst("fileuploaddone",function(e,data){var enhanceFiles=self.options.enhanceFiles;if(enhanceFiles){enhanceFiles(fileUploadConfig,data);}else{self.enhanceFiles(fileUploadConfig,data);}data.files=data.result.files;});fileUpload.bindFirst("fileuploadsubmit",function(e,data){if(self.options["properties"]){$.each(data.files,function(index,file){for(var key in self.options["properties"]){var propertyName="property"+index+"__"+key;var propertyValue=self.options["properties"][key];propertyValue=self.applyTokenSubstitutions(propertyValue,index,file);if(!data.formData){data.formData={};}data.formData[propertyName]=propertyValue;}});}if(self.options["parameters"]){$.each(data.files,function(index,file){for(var key in self.options["parameters"]){var paramName="param"+index+"__"+key;var paramValue=self.options["parameters"][key];paramValue=self.applyTokenSubstitutions(paramValue,index,file);if(!data.formData){data.formData={};}data.formData[paramName]=paramValue;}});}});fileUpload.bind("fileuploaddone",function(e,data){var array=self.getValue();var f=function(i){if(i==data.files.length){self.setValue(array);return;}self.convertFileToDescriptor(data.files[i],function(err,descriptor){if(descriptor){array.push(descriptor);}f(i+1);});};f(0);});self.applyBindings(fileUpload,el);self.preload(fileUpload,el,function(files){if(files){var form=$(self.fieldContainer).find(".alpaca-fileupload-input");$(form).fileupload("option","done").call(form,$.Event("done"),{result:{files:files}});self.afterPreload(fileUpload,el,files,function(){callback();});}else{callback();}});},applyTokenSubstitutions:function(text,index,file){var tokens={"index":index,"name":file.name,"size":file.size,"url":file.url,"thumbnailUrl":file.thumbnailUrl};var x=-1;var b=0;do{x=text.indexOf("{",b);if(x>-1){var y=text.indexOf("}",x);if(y>-1){var token=text.substring(x+car.length,y);var replacement=tokens[token];if(replacement){text=text.substring(0,x)+replacement+text.substring(y+1);}b=y+1;}}}while(x>-1);return text;},removeValue:function(id){var self=this;var array=self.getValue();for(var i=0;i<array.length;i++){if(array[i].id==id){array.splice(i,1);break;}}self.setValue(array);},applyConfiguration:function(fileUploadconfig){},applyBindings:function(fileUpload){},convertFileToDescriptor:function(file,callback){var descriptor={"id":file.id,"name":file.name,"size":file.size,"url":file.url,"thumbnailUrl":file.thumbnailUrl,"deleteUrl":file.deleteUrl,"deleteType":file.deleteType};callback(null,descriptor);},convertDescriptorToFile:function(descriptor,callback){var file={"id":descriptor.id,"name":descriptor.name,"size":descriptor.size,"url":descriptor.url,"thumbnailUrl":descriptor.thumbnailUrl,"deleteUrl":descriptor.deleteUrl,"deleteType":descriptor.deleteType};callback(null,file);},enhanceFiles:function(fileUploadConfig,data){},preload:function(fileUpload,el,callback){var self=this;var files=[];var descriptors=self.getValue();var f=function(i){if(i==descriptors.length){callback(files);return;}self.convertDescriptorToFile(descriptors[i],function(err,file){if(file){files.push(file);}f(i+1);});};f(0);},afterPreload:function(fileUpload,el,files,callback){callback();},getValue:function(){if(!this.data){this.data=[];}return this.data;},setValue:function(data){this.data=data;},reload:function(callback){var self=this;var descriptors=this.getValue();var files=[];var f=function(i){if(i==descriptors.length){var form=$(self.fieldContainer).find(".alpaca-fileupload-input");$(form).fileupload("option","done").call(form,$.Event("done"),{result:{files:files}});callback();return;}self.convertDescriptorToFile(descriptors[i],function(err,file){if(file){files.push(file);}f(i+1);});};f(0);},getTitle:function(){return"Upload Field";},getDescription:function(){return"Provides an upload field with support for thumbnail preview";},getType:function(){return"array";},getFieldType:function(){return"upload";}});var TEMPLATE='         <div class="alpaca-fileupload-container {{if cssClasses}}${cssClasses}{{/if}}">             <div class="container-fluid">                 <div class="row">                     <div class="col-md-12">                         <div class="btn-group">                             <button class="btn btn-default fileinput-button">                                 <i class="glyphicon glyphicon-upload"></i>                                 <span class="fileupload-add-button">Choose files...</span>                                 <input class="alpaca-fileupload-input" type="file" name="${name}_files">                                 <input class="alpaca-fileupload-input-hidden" type="hidden" name="${name}_files_hidden">                             </button>                         </div>                     </div>                 </div>                 <div class="row alpaca-fileupload-well">                     <div class="col-md-12 fileupload-active-zone">                         <table class="table table-striped">                             <tbody class="files">                             </tbody>                         </table>                         <p align="center">Click the Choose button or Drag and Drop files here to start...</p>                     </div>                 </div>                 <div class="row">                     <div class="col-md-12">                         <div id="progress" class="progress">                             <div class="progress-bar progress-bar-success"></div>                         </div>                     </div>                 </div>             </div>         </div>     ';var TEMPLATE_UPLOAD='         <script id="template-upload" type="text/x-tmpl">         {{each(i, file) o.files}}             <tr class="template-upload fade">                 {{if o.options.showUploadPreview}}                 <td class="preview">                     <span class="fade"></span>                 </td>                 {{else}}                 <td>                 </td>                 {{/if}}                 <td class="name"><span>${file.name}</span></td>                 <td class="size"><span>${file.size}</span></td>             {{if file.error}}                 <td class="error" colspan="2"><span class="label label-important">Error</span> ${file.error}</td>             {{else}}                 {{if o.files.valid && !i}}                 <td>                     <div class="progress progress-success progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">                         <div class="progress-bar" style="width:0%;"></div>                    </div>                 </td>                 <td class="start">                {{if !o.options.autoUpload}}                     <button class="btn btn-primary">                         <i class="glyphicon glyphicon-upload glyphicon-white"></i>                         <span>Start</span>                     </button>                 {{/if}}                 </td>                 {{else}}                 <td colspan="2"></td>                 <td class="cancel">                {{if !i}}                     <button class="btn btn-warning">                         <i class="glyphicon glyphicon-ban-circle glyphicon-white"></i>                         <span>Cancel</span>                     </button>                 {{/if}}                 </td>                 {{/if}}             {{/if}}                 <td></td>             </tr>         {{/each}}         <\/script>     ';var TEMPLATE_DOWNLOAD='         <script id="template-download" type="text/x-tmpl">         {{each(i, file) o.files}}             <tr class="template-download fade">             {{if file.error}}                 <td></td>                 <td class="name"><span>${file.name}</span></td>                 <td class="size"><span>${file.size}</span></td>                 <td class="error" colspan="2"><span class="label label-important">Error</span> ${file.error}</td>             {{else}}                 <td class="preview">                 {{if file.thumbnailUrl}}                     <a href="${file.url}" title="${file.name}" data-gallery="gallery" download="${file.name}">                         <img src="${file.thumbnailUrl}">                     </a>                 {{/if}}                 </td>                 <td class="name">                     <a href="${file.url}" title="${file.name}" data-gallery="${file.thumbnailUrl}gallery" download="${file.name}">${file.name}</a>                 </td>                 <td class="size"><span>${file.size}</span></td>                 <td colspan="2"></td>             {{/if}}                 <td>                     <button class="delete btn btn-danger" data-type="${file.deleteType}" data-url="${file.deleteUrl}" {{if file.deleteWithCredentials}}data-xhr-fields="{"withCredentials":true}" {{/if}}>                         <i class="glyphicon glyphicon-trash glyphicon-white"></i>                         <span>Delete</span>                     </button>                 </td>             </tr>         {{/each}}         <\/script>     ';Alpaca.registerTemplate("controlFieldUpload",TEMPLATE);Alpaca.registerTemplate("controlFieldUpload_upload",TEMPLATE_UPLOAD);Alpaca.registerTemplate("controlFieldUpload_download",TEMPLATE_DOWNLOAD);Alpaca.registerFieldClass("upload",Alpaca.Fields.UploadField);(function($){var splitVersion=$.fn.jquery.split(".");var major=parseInt(splitVersion[0]);var minor=parseInt(splitVersion[1]);var JQ_LT_17=(major<1)||(major==1&&minor<7);function eventsData($el){return JQ_LT_17?$el.data("events"):$._data($el[0]).events;}function moveHandlerToTop($el,eventName,isDelegated){var data=eventsData($el);var events=data[eventName];if(!JQ_LT_17){var handler=isDelegated?events.splice(events.delegateCount-1,1)[0]:events.pop();events.splice(isDelegated?0:(events.delegateCount||0),0,handler);return;}if(isDelegated){data.live.unshift(data.live.pop());}else{events.unshift(events.pop());}}function moveEventHandlers($elems,eventsString,isDelegate){var events=eventsString.split(/\s+/);$elems.each(function(){for(var i=0;i<events.length;++i){var pureEventName=$.trim(events[i]).match(/[^\.]+/i)[0];moveHandlerToTop($(this),pureEventName,isDelegate);}});}$.fn.bindFirst=function(){var args=$.makeArray(arguments);var eventsString=args.shift();if(eventsString){$.fn.bind.apply(this,arguments);moveEventHandlers(this,eventsString);}return this;};})($);})(jQuery);
;!function(g) {
	var $0 = [], // result
		$1 = [], // tail
		$2 = [], // blocks
		$3 = [], // s1
		$4 = ("0123456789abcdef").split(""), // hex
		$5 = [], // s2
		$6 = [], // state
		$7 = false, // is state created
		$8 = 0, // len_cache
		$9 = 0, // len
		BUF = [];

	// use Int32Array if defined
	if(g.Int32Array) {
		$1 = new Int32Array(16);
		$2 = new Int32Array(16);
		$3 = new Int32Array(4);
		$5 = new Int32Array(4);
		$6 = new Int32Array(4);
		BUF = new Int32Array(4);
	}else{
		var i;
		for(i = 0;i < 16;i++) $1[i] = $2[i] = 0;
		for(i = 0;i < 4;i++) $3[i] = $5[i] = $6[i] = BUF[i] = 0;
	}

	// fill s1
	$3[0] = 128;
	$3[1] = 32768;
	$3[2] = 8388608;
	$3[3] = -2147483648;

	// fill s2
	$5[0] = 0;
	$5[1] = 8;
	$5[2] = 16;
	$5[3] = 24;

	function encode(s) {
		var utf = "",
			enc = "",
			start = 0,
			end = 0;

		for(var i = 0, j = s.length;i < j;i++) {
			var c = s.charCodeAt(i);

			if(c < 128) {
				end++;
				continue;
			}else if(c < 2048)
				enc = String.fromCharCode((c >> 6) | 192, (c & 63) | 128);
			else
				enc = String.fromCharCode((c >> 12) | 224, ((c >> 6) & 63) | 128, (c & 63) | 128);

			if(end > start)
				utf += s.slice(start, end);

			utf += enc;
			start = end = i + 1;
		}

		if(end > start)
			utf += s.slice(start, j);

		return utf;
	}

	function md5_update(s) {
		var i, I;

		s += "";
		$7 = false;
		$8 = $9 = s.length;

		if($9 > 63) {
			getBlocks(s.substring(0, 64));
			md5cycle($2);
			$7 = true;

			for(i = 128;i <= $9;i += 64) {
				getBlocks(s.substring(i - 64, i));
				md5cycleAdd($2);
			}

			s = s.substring(i - 64);
			$9 = s.length;
		}

		$1[0] = $1[1] = $1[2] = $1[3] =
		$1[4] = $1[5] = $1[6] = $1[7] =
		$1[8] = $1[9] = $1[10] = $1[11] =
		$1[12] = $1[13] = $1[14] = $1[15] = 0;

		for(i = 0;i < $9;i++) {
			I = i & 3;
			if(I === 0)
				$1[i >> 2] = s.charCodeAt(i);
			else
				$1[i >> 2] |= s.charCodeAt(i) << $5[I];
		}
		$1[i >> 2] |= $3[i & 3];

		if(i > 55) {
			if($7) md5cycleAdd($1);
			else {
				md5cycle($1);
				$7 = true;
			}

			return md5cycleAdd([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $8 << 3, 0]);
		}

		$1[14] = $8 << 3;

		if($7) md5cycleAdd($1);
		else md5cycle($1);
	}

	function getBlocks(s) {
		for(var i = 16;i--;) {
			var I = i << 2;
			$2[i] = s.charCodeAt(I) + (s.charCodeAt(I + 1) << 8) + (s.charCodeAt(I + 2) << 16) + (s.charCodeAt(I + 3) << 24);
		}
	}

	function md5(data, ascii, arrayOutput) {
		md5_update(ascii ? data : encode(data));

		var tmp = $6[0];$0[1] = $4[tmp & 15];
		$0[0] = $4[(tmp >>= 4) & 15];
		$0[3] = $4[(tmp >>= 4) & 15];
		$0[2] = $4[(tmp >>= 4) & 15];
		$0[5] = $4[(tmp >>= 4) & 15];
		$0[4] = $4[(tmp >>= 4) & 15];
		$0[7] = $4[(tmp >>= 4) & 15];
		$0[6] = $4[(tmp >>= 4) & 15];

		tmp = $6[1];$0[9] = $4[tmp & 15];
		$0[8] = $4[(tmp >>= 4) & 15];
		$0[11] = $4[(tmp >>= 4) & 15];
		$0[10] = $4[(tmp >>= 4) & 15];
		$0[13] = $4[(tmp >>= 4) & 15];
		$0[12] = $4[(tmp >>= 4) & 15];
		$0[15] = $4[(tmp >>= 4) & 15];
		$0[14] = $4[(tmp >>= 4) & 15];

		tmp = $6[2];$0[17] = $4[tmp & 15];
		$0[16] = $4[(tmp >>= 4) & 15];
		$0[19] = $4[(tmp >>= 4) & 15];
		$0[18] = $4[(tmp >>= 4) & 15];
		$0[21] = $4[(tmp >>= 4) & 15];
		$0[20] = $4[(tmp >>= 4) & 15];
		$0[23] = $4[(tmp >>= 4) & 15];
		$0[22] = $4[(tmp >>= 4) & 15];

		tmp = $6[3];$0[25] = $4[tmp & 15];
		$0[24] = $4[(tmp >>= 4) & 15];
		$0[27] = $4[(tmp >>= 4) & 15];
		$0[26] = $4[(tmp >>= 4) & 15];
		$0[29] = $4[(tmp >>= 4) & 15];
		$0[28] = $4[(tmp >>= 4) & 15];
		$0[31] = $4[(tmp >>= 4) & 15];
		$0[30] = $4[(tmp >>= 4) & 15];

		return arrayOutput ? $0 : $0.join("");
	}

	function R(q, a, b, x, s1, s2, t) {
		a += q + x + t;
		return ((a << s1 | a >>> s2) + b) << 0;
	}

	function md5cycle(k) {
		md5_rounds(0, 0, 0, 0, k);

		$6[0] = (BUF[0] + 1732584193) << 0;
		$6[1] = (BUF[1] - 271733879) << 0;
		$6[2] = (BUF[2] - 1732584194) << 0;
		$6[3] = (BUF[3] + 271733878) << 0;
	}

	function md5cycleAdd(k) {
		md5_rounds($6[0], $6[1], $6[2], $6[3], k);

		$6[0] = (BUF[0] + $6[0]) << 0;
		$6[1] = (BUF[1] + $6[1]) << 0;
		$6[2] = (BUF[2] + $6[2]) << 0;
		$6[3] = (BUF[3] + $6[3]) << 0;
	}

	function md5_rounds(a, b, c, d, k) {
		var bc, da;

		if($7) {
			a = R(((c ^ d) & b) ^ d, a, b, k[0], 7, 25, -680876936);
			d = R(((b ^ c) & a) ^ c, d, a, k[1], 12, 20, -389564586);
			c = R(((a ^ b) & d) ^ b, c, d, k[2], 17, 15, 606105819);
			b = R(((d ^ a) & c) ^ a, b, c, k[3], 22, 10, -1044525330);
		}else{
			a = k[0] - 680876937;
			a = ((a << 7 | a >>> 25) - 271733879) << 0;
			d = k[1] - 117830708 + ((2004318071 & a) ^ -1732584194);
			d = ((d << 12 | d >>> 20) + a) << 0;
			c = k[2] - 1126478375 + (((a ^ -271733879) & d) ^ -271733879);
			c = ((c << 17 | c >>> 15) + d) << 0;
			b = k[3] - 1316259209 + (((d ^ a) & c) ^ a);
			b = ((b << 22 | b >>> 10) + c) << 0;
		}

		a = R(((c ^ d) & b) ^ d, a, b, k[4], 7, 25, -176418897);
		d = R(((b ^ c) & a) ^ c, d, a, k[5], 12, 20, 1200080426);
		c = R(((a ^ b) & d) ^ b, c, d, k[6], 17, 15, -1473231341);
		b = R(((d ^ a) & c) ^ a, b, c, k[7], 22, 10, -45705983);
		a = R(((c ^ d) & b) ^ d, a, b, k[8], 7, 25, 1770035416);
		d = R(((b ^ c) & a) ^ c, d, a, k[9], 12, 20, -1958414417);
		c = R(((a ^ b) & d) ^ b, c, d, k[10], 17, 15, -42063);
		b = R(((d ^ a) & c) ^ a, b, c, k[11], 22, 10, -1990404162);
		a = R(((c ^ d) & b) ^ d, a, b, k[12], 7, 25, 1804603682);
		d = R(((b ^ c) & a) ^ c, d, a, k[13], 12, 20, -40341101);
		c = R(((a ^ b) & d) ^ b, c, d, k[14], 17, 15, -1502002290);
		b = R(((d ^ a) & c) ^ a, b, c, k[15], 22, 10, 1236535329);

		a = R(((b ^ c) & d) ^ c, a, b, k[1], 5, 27, -165796510);
		d = R(((a ^ b) & c) ^ b, d, a, k[6], 9, 23, -1069501632);
		c = R(((d ^ a) & b) ^ a, c, d, k[11], 14, 18, 643717713);
		b = R(((c ^ d) & a) ^ d, b, c, k[0], 20, 12, -373897302);
		a = R(((b ^ c) & d) ^ c, a, b, k[5], 5, 27, -701558691);
		d = R(((a ^ b) & c) ^ b, d, a, k[10], 9, 23, 38016083);
		c = R(((d ^ a) & b) ^ a, c, d, k[15], 14, 18, -660478335);
		b = R(((c ^ d) & a) ^ d, b, c, k[4], 20, 12, -405537848);
		a = R(((b ^ c) & d) ^ c, a, b, k[9], 5, 27, 568446438);
		d = R(((a ^ b) & c) ^ b, d, a, k[14], 9, 23, -1019803690);
		c = R(((d ^ a) & b) ^ a, c, d, k[3], 14, 18, -187363961);
		b = R(((c ^ d) & a) ^ d, b, c, k[8], 20, 12, 1163531501);
		a = R(((b ^ c) & d) ^ c, a, b, k[13], 5, 27, -1444681467);
		d = R(((a ^ b) & c) ^ b, d, a, k[2], 9, 23, -51403784);
		c = R(((d ^ a) & b) ^ a, c, d, k[7], 14, 18, 1735328473);
		b = R(((c ^ d) & a) ^ d, b, c, k[12], 20, 12, -1926607734);

		bc = b ^ c;
		a = R(bc ^ d, a, b, k[5], 4, 28, -378558);
		d = R(bc ^ a, d, a, k[8], 11, 21, -2022574463);
		da = d ^ a;
		c = R(da ^ b, c, d, k[11], 16, 16, 1839030562);
		b = R(da ^ c, b, c, k[14], 23, 9, -35309556);
		bc = b ^ c;
		a = R(bc ^ d, a, b, k[1], 4, 28, -1530992060);
		d = R(bc ^ a, d, a, k[4], 11, 21, 1272893353);
		da = d ^ a;
		c = R(da ^ b, c, d, k[7], 16, 16, -155497632);
		b = R(da ^ c, b, c, k[10], 23, 9, -1094730640);
		bc = b ^ c;
		a = R(bc ^ d, a, b, k[13], 4, 28, 681279174);
		d = R(bc ^ a, d, a, k[0], 11, 21, -358537222);
		da = d ^ a;
		c = R(da ^ b, c, d, k[3], 16, 16, -722521979);
		b = R(da ^ c, b, c, k[6], 23, 9, 76029189);
		bc = b ^ c;
		a = R(bc ^ d, a, b, k[9], 4, 28, -640364487);
		d = R(bc ^ a, d, a, k[12], 11, 21, -421815835);
		da = d ^ a;
		c = R(da ^ b, c, d, k[15], 16, 16, 530742520);
		b = R(da ^ c, b, c, k[2], 23, 9, -995338651);

		a = R(c ^ (b | ~d), a, b, k[0], 6, 26, -198630844);
		d = R(b ^ (a | ~c), d, a, k[7], 10, 22, 1126891415);
		c = R(a ^ (d | ~b), c, d, k[14], 15, 17, -1416354905);
		b = R(d ^ (c | ~a), b, c, k[5], 21, 11, -57434055);
		a = R(c ^ (b | ~d), a, b, k[12], 6, 26, 1700485571);
		d = R(b ^ (a | ~c), d, a, k[3], 10, 22, -1894986606);
		c = R(a ^ (d | ~b), c, d, k[10], 15, 17, -1051523);
		b = R(d ^ (c | ~a), b, c, k[1], 21, 11, -2054922799);
		a = R(c ^ (b | ~d), a, b, k[8], 6, 26, 1873313359);
		d = R(b ^ (a | ~c), d, a, k[15], 10, 22, -30611744);
		c = R(a ^ (d | ~b), c, d, k[6], 15, 17, -1560198380);
		b = R(d ^ (c | ~a), b, c, k[13], 21, 11, 1309151649);
		a = R(c ^ (b | ~d), a, b, k[4], 6, 26, -145523070);
		d = R(b ^ (a | ~c), d, a, k[11], 10, 22, -1120210379);
		c = R(a ^ (d | ~b), c, d, k[2], 15, 17, 718787259);
		b = R(d ^ (c | ~a), b, c, k[9], 21, 11, -343485551);

		BUF[0] = a;
		BUF[1] = b;
		BUF[2] = c;
		BUF[3] = d;
	}

	g.md5 = g.md5 || md5;
}(typeof global === "undefined" ? window : global);

/*
 AngularJS v1.2.16
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(O,U,s){'use strict';function t(b){return function(){var a=arguments[0],c,a="["+(b?b+":":"")+a+"] http://errors.angularjs.org/1.2.16/"+(b?b+"/":"")+a;for(c=1;c<arguments.length;c++)a=a+(1==c?"?":"&")+"p"+(c-1)+"="+encodeURIComponent("function"==typeof arguments[c]?arguments[c].toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof arguments[c]?"undefined":"string"!=typeof arguments[c]?JSON.stringify(arguments[c]):arguments[c]);return Error(a)}}function ab(b){if(null==b||Ca(b))return!1;
var a=b.length;return 1===b.nodeType&&a?!0:w(b)||M(b)||0===a||"number"===typeof a&&0<a&&a-1 in b}function q(b,a,c){var d;if(b)if(P(b))for(d in b)"prototype"==d||("length"==d||"name"==d||b.hasOwnProperty&&!b.hasOwnProperty(d))||a.call(c,b[d],d);else if(b.forEach&&b.forEach!==q)b.forEach(a,c);else if(ab(b))for(d=0;d<b.length;d++)a.call(c,b[d],d);else for(d in b)b.hasOwnProperty(d)&&a.call(c,b[d],d);return b}function Qb(b){var a=[],c;for(c in b)b.hasOwnProperty(c)&&a.push(c);return a.sort()}function Sc(b,
a,c){for(var d=Qb(b),e=0;e<d.length;e++)a.call(c,b[d[e]],d[e]);return d}function Rb(b){return function(a,c){b(c,a)}}function bb(){for(var b=ka.length,a;b;){b--;a=ka[b].charCodeAt(0);if(57==a)return ka[b]="A",ka.join("");if(90==a)ka[b]="0";else return ka[b]=String.fromCharCode(a+1),ka.join("")}ka.unshift("0");return ka.join("")}function Sb(b,a){a?b.$$hashKey=a:delete b.$$hashKey}function D(b){var a=b.$$hashKey;q(arguments,function(a){a!==b&&q(a,function(a,c){b[c]=a})});Sb(b,a);return b}function Y(b){return parseInt(b,
10)}function Tb(b,a){return D(new (D(function(){},{prototype:b})),a)}function C(){}function Da(b){return b}function aa(b){return function(){return b}}function E(b){return"undefined"===typeof b}function B(b){return"undefined"!==typeof b}function X(b){return null!=b&&"object"===typeof b}function w(b){return"string"===typeof b}function vb(b){return"number"===typeof b}function Na(b){return"[object Date]"===wa.call(b)}function M(b){return"[object Array]"===wa.call(b)}function P(b){return"function"===typeof b}
function cb(b){return"[object RegExp]"===wa.call(b)}function Ca(b){return b&&b.document&&b.location&&b.alert&&b.setInterval}function Tc(b){return!(!b||!(b.nodeName||b.prop&&b.attr&&b.find))}function Uc(b,a,c){var d=[];q(b,function(b,g,f){d.push(a.call(c,b,g,f))});return d}function db(b,a){if(b.indexOf)return b.indexOf(a);for(var c=0;c<b.length;c++)if(a===b[c])return c;return-1}function Oa(b,a){var c=db(b,a);0<=c&&b.splice(c,1);return a}function ba(b,a){if(Ca(b)||b&&b.$evalAsync&&b.$watch)throw Pa("cpws");
if(a){if(b===a)throw Pa("cpi");if(M(b))for(var c=a.length=0;c<b.length;c++)a.push(ba(b[c]));else{c=a.$$hashKey;q(a,function(b,c){delete a[c]});for(var d in b)a[d]=ba(b[d]);Sb(a,c)}}else(a=b)&&(M(b)?a=ba(b,[]):Na(b)?a=new Date(b.getTime()):cb(b)?a=RegExp(b.source):X(b)&&(a=ba(b,{})));return a}function Ub(b,a){a=a||{};for(var c in b)!b.hasOwnProperty(c)||"$"===c.charAt(0)&&"$"===c.charAt(1)||(a[c]=b[c]);return a}function xa(b,a){if(b===a)return!0;if(null===b||null===a)return!1;if(b!==b&&a!==a)return!0;
var c=typeof b,d;if(c==typeof a&&"object"==c)if(M(b)){if(!M(a))return!1;if((c=b.length)==a.length){for(d=0;d<c;d++)if(!xa(b[d],a[d]))return!1;return!0}}else{if(Na(b))return Na(a)&&b.getTime()==a.getTime();if(cb(b)&&cb(a))return b.toString()==a.toString();if(b&&b.$evalAsync&&b.$watch||a&&a.$evalAsync&&a.$watch||Ca(b)||Ca(a)||M(a))return!1;c={};for(d in b)if("$"!==d.charAt(0)&&!P(b[d])){if(!xa(b[d],a[d]))return!1;c[d]=!0}for(d in a)if(!c.hasOwnProperty(d)&&"$"!==d.charAt(0)&&a[d]!==s&&!P(a[d]))return!1;
return!0}return!1}function Vb(){return U.securityPolicy&&U.securityPolicy.isActive||U.querySelector&&!(!U.querySelector("[ng-csp]")&&!U.querySelector("[data-ng-csp]"))}function eb(b,a){var c=2<arguments.length?ya.call(arguments,2):[];return!P(a)||a instanceof RegExp?a:c.length?function(){return arguments.length?a.apply(b,c.concat(ya.call(arguments,0))):a.apply(b,c)}:function(){return arguments.length?a.apply(b,arguments):a.call(b)}}function Vc(b,a){var c=a;"string"===typeof b&&"$"===b.charAt(0)?c=
s:Ca(a)?c="$WINDOW":a&&U===a?c="$DOCUMENT":a&&(a.$evalAsync&&a.$watch)&&(c="$SCOPE");return c}function qa(b,a){return"undefined"===typeof b?s:JSON.stringify(b,Vc,a?"  ":null)}function Wb(b){return w(b)?JSON.parse(b):b}function Qa(b){"function"===typeof b?b=!0:b&&0!==b.length?(b=K(""+b),b=!("f"==b||"0"==b||"false"==b||"no"==b||"n"==b||"[]"==b)):b=!1;return b}function ha(b){b=y(b).clone();try{b.empty()}catch(a){}var c=y("<div>").append(b).html();try{return 3===b[0].nodeType?K(c):c.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,
function(a,b){return"<"+K(b)})}catch(d){return K(c)}}function Xb(b){try{return decodeURIComponent(b)}catch(a){}}function Yb(b){var a={},c,d;q((b||"").split("&"),function(b){b&&(c=b.split("="),d=Xb(c[0]),B(d)&&(b=B(c[1])?Xb(c[1]):!0,a[d]?M(a[d])?a[d].push(b):a[d]=[a[d],b]:a[d]=b))});return a}function Zb(b){var a=[];q(b,function(b,d){M(b)?q(b,function(b){a.push(za(d,!0)+(!0===b?"":"="+za(b,!0)))}):a.push(za(d,!0)+(!0===b?"":"="+za(b,!0)))});return a.length?a.join("&"):""}function wb(b){return za(b,
!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function za(b,a){return encodeURIComponent(b).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,a?"%20":"+")}function Wc(b,a){function c(a){a&&d.push(a)}var d=[b],e,g,f=["ng:app","ng-app","x-ng-app","data-ng-app"],h=/\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;q(f,function(a){f[a]=!0;c(U.getElementById(a));a=a.replace(":","\\:");b.querySelectorAll&&(q(b.querySelectorAll("."+a),c),q(b.querySelectorAll("."+
a+"\\:"),c),q(b.querySelectorAll("["+a+"]"),c))});q(d,function(a){if(!e){var b=h.exec(" "+a.className+" ");b?(e=a,g=(b[2]||"").replace(/\s+/g,",")):q(a.attributes,function(b){!e&&f[b.name]&&(e=a,g=b.value)})}});e&&a(e,g?[g]:[])}function $b(b,a){var c=function(){b=y(b);if(b.injector()){var c=b[0]===U?"document":ha(b);throw Pa("btstrpd",c);}a=a||[];a.unshift(["$provide",function(a){a.value("$rootElement",b)}]);a.unshift("ng");c=ac(a);c.invoke(["$rootScope","$rootElement","$compile","$injector","$animate",
function(a,b,c,d,e){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return c},d=/^NG_DEFER_BOOTSTRAP!/;if(O&&!d.test(O.name))return c();O.name=O.name.replace(d,"");Ea.resumeBootstrap=function(b){q(b,function(b){a.push(b)});c()}}function fb(b,a){a=a||"_";return b.replace(Xc,function(b,d){return(d?a:"")+b.toLowerCase()})}function xb(b,a,c){if(!b)throw Pa("areq",a||"?",c||"required");return b}function Ra(b,a,c){c&&M(b)&&(b=b[b.length-1]);xb(P(b),a,"not a function, got "+(b&&"object"==typeof b?
b.constructor.name||"Object":typeof b));return b}function Aa(b,a){if("hasOwnProperty"===b)throw Pa("badname",a);}function bc(b,a,c){if(!a)return b;a=a.split(".");for(var d,e=b,g=a.length,f=0;f<g;f++)d=a[f],b&&(b=(e=b)[d]);return!c&&P(b)?eb(e,b):b}function yb(b){var a=b[0];b=b[b.length-1];if(a===b)return y(a);var c=[a];do{a=a.nextSibling;if(!a)break;c.push(a)}while(a!==b);return y(c)}function Yc(b){var a=t("$injector"),c=t("ng");b=b.angular||(b.angular={});b.$$minErr=b.$$minErr||t;return b.module||
(b.module=function(){var b={};return function(e,g,f){if("hasOwnProperty"===e)throw c("badname","module");g&&b.hasOwnProperty(e)&&(b[e]=null);return b[e]||(b[e]=function(){function b(a,d,e){return function(){c[e||"push"]([a,d,arguments]);return n}}if(!g)throw a("nomod",e);var c=[],d=[],m=b("$injector","invoke"),n={_invokeQueue:c,_runBlocks:d,requires:g,name:e,provider:b("$provide","provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:b("$provide","value"),constant:b("$provide",
"constant","unshift"),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider","register"),directive:b("$compileProvider","directive"),config:m,run:function(a){d.push(a);return this}};f&&m(f);return n}())}}())}function Zc(b){D(b,{bootstrap:$b,copy:ba,extend:D,equals:xa,element:y,forEach:q,injector:ac,noop:C,bind:eb,toJson:qa,fromJson:Wb,identity:Da,isUndefined:E,isDefined:B,isString:w,isFunction:P,isObject:X,isNumber:vb,isElement:Tc,isArray:M,
version:$c,isDate:Na,lowercase:K,uppercase:Fa,callbacks:{counter:0},$$minErr:t,$$csp:Vb});Sa=Yc(O);try{Sa("ngLocale")}catch(a){Sa("ngLocale",[]).provider("$locale",ad)}Sa("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:bd});a.provider("$compile",cc).directive({a:cd,input:dc,textarea:dc,form:dd,script:ed,select:fd,style:gd,option:hd,ngBind:id,ngBindHtml:jd,ngBindTemplate:kd,ngClass:ld,ngClassEven:md,ngClassOdd:nd,ngCloak:od,ngController:pd,ngForm:qd,ngHide:rd,ngIf:sd,ngInclude:td,
ngInit:ud,ngNonBindable:vd,ngPluralize:wd,ngRepeat:xd,ngShow:yd,ngStyle:zd,ngSwitch:Ad,ngSwitchWhen:Bd,ngSwitchDefault:Cd,ngOptions:Dd,ngTransclude:Ed,ngModel:Fd,ngList:Gd,ngChange:Hd,required:ec,ngRequired:ec,ngValue:Id}).directive({ngInclude:Jd}).directive(zb).directive(fc);a.provider({$anchorScroll:Kd,$animate:Ld,$browser:Md,$cacheFactory:Nd,$controller:Od,$document:Pd,$exceptionHandler:Qd,$filter:gc,$interpolate:Rd,$interval:Sd,$http:Td,$httpBackend:Ud,$location:Vd,$log:Wd,$parse:Xd,$rootScope:Yd,
$q:Zd,$sce:$d,$sceDelegate:ae,$sniffer:be,$templateCache:ce,$timeout:de,$window:ee,$$rAF:fe,$$asyncCallback:ge})}])}function Ta(b){return b.replace(he,function(a,b,d,e){return e?d.toUpperCase():d}).replace(ie,"Moz$1")}function Ab(b,a,c,d){function e(b){var e=c&&b?[this.filter(b)]:[this],l=a,k,m,n,p,r,z;if(!d||null!=b)for(;e.length;)for(k=e.shift(),m=0,n=k.length;m<n;m++)for(p=y(k[m]),l?p.triggerHandler("$destroy"):l=!l,r=0,p=(z=p.children()).length;r<p;r++)e.push(Ga(z[r]));return g.apply(this,arguments)}
var g=Ga.fn[b],g=g.$original||g;e.$original=g;Ga.fn[b]=e}function N(b){if(b instanceof N)return b;w(b)&&(b=ca(b));if(!(this instanceof N)){if(w(b)&&"<"!=b.charAt(0))throw Bb("nosel");return new N(b)}if(w(b)){var a=b;b=U;var c;if(c=je.exec(a))b=[b.createElement(c[1])];else{var d=b,e;b=d.createDocumentFragment();c=[];if(Cb.test(a)){d=b.appendChild(d.createElement("div"));e=(ke.exec(a)||["",""])[1].toLowerCase();e=ea[e]||ea._default;d.innerHTML="<div>&#160;</div>"+e[1]+a.replace(le,"<$1></$2>")+e[2];
d.removeChild(d.firstChild);for(a=e[0];a--;)d=d.lastChild;a=0;for(e=d.childNodes.length;a<e;++a)c.push(d.childNodes[a]);d=b.firstChild;d.textContent=""}else c.push(d.createTextNode(a));b.textContent="";b.innerHTML="";b=c}Db(this,b);y(U.createDocumentFragment()).append(this)}else Db(this,b)}function Eb(b){return b.cloneNode(!0)}function Ha(b){hc(b);var a=0;for(b=b.childNodes||[];a<b.length;a++)Ha(b[a])}function ic(b,a,c,d){if(B(d))throw Bb("offargs");var e=la(b,"events");la(b,"handle")&&(E(a)?q(e,
function(a,c){Fb(b,c,a);delete e[c]}):q(a.split(" "),function(a){E(c)?(Fb(b,a,e[a]),delete e[a]):Oa(e[a]||[],c)}))}function hc(b,a){var c=b[gb],d=Ua[c];d&&(a?delete Ua[c].data[a]:(d.handle&&(d.events.$destroy&&d.handle({},"$destroy"),ic(b)),delete Ua[c],b[gb]=s))}function la(b,a,c){var d=b[gb],d=Ua[d||-1];if(B(c))d||(b[gb]=d=++me,d=Ua[d]={}),d[a]=c;else return d&&d[a]}function jc(b,a,c){var d=la(b,"data"),e=B(c),g=!e&&B(a),f=g&&!X(a);d||f||la(b,"data",d={});if(e)d[a]=c;else if(g){if(f)return d&&d[a];
D(d,a)}else return d}function Gb(b,a){return b.getAttribute?-1<(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+a+" "):!1}function hb(b,a){a&&b.setAttribute&&q(a.split(" "),function(a){b.setAttribute("class",ca((" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+ca(a)+" "," ")))})}function ib(b,a){if(a&&b.setAttribute){var c=(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");q(a.split(" "),function(a){a=ca(a);-1===c.indexOf(" "+a+" ")&&
(c+=a+" ")});b.setAttribute("class",ca(c))}}function Db(b,a){if(a){a=a.nodeName||!B(a.length)||Ca(a)?[a]:a;for(var c=0;c<a.length;c++)b.push(a[c])}}function kc(b,a){return jb(b,"$"+(a||"ngController")+"Controller")}function jb(b,a,c){b=y(b);9==b[0].nodeType&&(b=b.find("html"));for(a=M(a)?a:[a];b.length;){for(var d=b[0],e=0,g=a.length;e<g;e++)if((c=b.data(a[e]))!==s)return c;b=y(d.parentNode||11===d.nodeType&&d.host)}}function lc(b){for(var a=0,c=b.childNodes;a<c.length;a++)Ha(c[a]);for(;b.firstChild;)b.removeChild(b.firstChild)}
function mc(b,a){var c=kb[a.toLowerCase()];return c&&nc[b.nodeName]&&c}function ne(b,a){var c=function(c,e){c.preventDefault||(c.preventDefault=function(){c.returnValue=!1});c.stopPropagation||(c.stopPropagation=function(){c.cancelBubble=!0});c.target||(c.target=c.srcElement||U);if(E(c.defaultPrevented)){var g=c.preventDefault;c.preventDefault=function(){c.defaultPrevented=!0;g.call(c)};c.defaultPrevented=!1}c.isDefaultPrevented=function(){return c.defaultPrevented||!1===c.returnValue};var f=Ub(a[e||
c.type]||[]);q(f,function(a){a.call(b,c)});8>=S?(c.preventDefault=null,c.stopPropagation=null,c.isDefaultPrevented=null):(delete c.preventDefault,delete c.stopPropagation,delete c.isDefaultPrevented)};c.elem=b;return c}function Ia(b){var a=typeof b,c;"object"==a&&null!==b?"function"==typeof(c=b.$$hashKey)?c=b.$$hashKey():c===s&&(c=b.$$hashKey=bb()):c=b;return a+":"+c}function Va(b){q(b,this.put,this)}function oc(b){var a,c;"function"==typeof b?(a=b.$inject)||(a=[],b.length&&(c=b.toString().replace(oe,
""),c=c.match(pe),q(c[1].split(qe),function(b){b.replace(re,function(b,c,d){a.push(d)})})),b.$inject=a):M(b)?(c=b.length-1,Ra(b[c],"fn"),a=b.slice(0,c)):Ra(b,"fn",!0);return a}function ac(b){function a(a){return function(b,c){if(X(b))q(b,Rb(a));else return a(b,c)}}function c(a,b){Aa(a,"service");if(P(b)||M(b))b=n.instantiate(b);if(!b.$get)throw Wa("pget",a);return m[a+h]=b}function d(a,b){return c(a,{$get:b})}function e(a){var b=[],c,d,g,h;q(a,function(a){if(!k.get(a)){k.put(a,!0);try{if(w(a))for(c=
Sa(a),b=b.concat(e(c.requires)).concat(c._runBlocks),d=c._invokeQueue,g=0,h=d.length;g<h;g++){var f=d[g],l=n.get(f[0]);l[f[1]].apply(l,f[2])}else P(a)?b.push(n.invoke(a)):M(a)?b.push(n.invoke(a)):Ra(a,"module")}catch(m){throw M(a)&&(a=a[a.length-1]),m.message&&(m.stack&&-1==m.stack.indexOf(m.message))&&(m=m.message+"\n"+m.stack),Wa("modulerr",a,m.stack||m.message||m);}}});return b}function g(a,b){function c(d){if(a.hasOwnProperty(d)){if(a[d]===f)throw Wa("cdep",l.join(" <- "));return a[d]}try{return l.unshift(d),
a[d]=f,a[d]=b(d)}catch(e){throw a[d]===f&&delete a[d],e;}finally{l.shift()}}function d(a,b,e){var g=[],h=oc(a),f,l,k;l=0;for(f=h.length;l<f;l++){k=h[l];if("string"!==typeof k)throw Wa("itkn",k);g.push(e&&e.hasOwnProperty(k)?e[k]:c(k))}a.$inject||(a=a[f]);return a.apply(b,g)}return{invoke:d,instantiate:function(a,b){var c=function(){},e;c.prototype=(M(a)?a[a.length-1]:a).prototype;c=new c;e=d(a,c,b);return X(e)||P(e)?e:c},get:c,annotate:oc,has:function(b){return m.hasOwnProperty(b+h)||a.hasOwnProperty(b)}}}
var f={},h="Provider",l=[],k=new Va,m={$provide:{provider:a(c),factory:a(d),service:a(function(a,b){return d(a,["$injector",function(a){return a.instantiate(b)}])}),value:a(function(a,b){return d(a,aa(b))}),constant:a(function(a,b){Aa(a,"constant");m[a]=b;p[a]=b}),decorator:function(a,b){var c=n.get(a+h),d=c.$get;c.$get=function(){var a=r.invoke(d,c);return r.invoke(b,null,{$delegate:a})}}}},n=m.$injector=g(m,function(){throw Wa("unpr",l.join(" <- "));}),p={},r=p.$injector=g(p,function(a){a=n.get(a+
h);return r.invoke(a.$get,a)});q(e(b),function(a){r.invoke(a||C)});return r}function Kd(){var b=!0;this.disableAutoScrolling=function(){b=!1};this.$get=["$window","$location","$rootScope",function(a,c,d){function e(a){var b=null;q(a,function(a){b||"a"!==K(a.nodeName)||(b=a)});return b}function g(){var b=c.hash(),d;b?(d=f.getElementById(b))?d.scrollIntoView():(d=e(f.getElementsByName(b)))?d.scrollIntoView():"top"===b&&a.scrollTo(0,0):a.scrollTo(0,0)}var f=a.document;b&&d.$watch(function(){return c.hash()},
function(){d.$evalAsync(g)});return g}]}function ge(){this.$get=["$$rAF","$timeout",function(b,a){return b.supported?function(a){return b(a)}:function(b){return a(b,0,!1)}}]}function se(b,a,c,d){function e(a){try{a.apply(null,ya.call(arguments,1))}finally{if(z--,0===z)for(;u.length;)try{u.pop()()}catch(b){c.error(b)}}}function g(a,b){(function T(){q(F,function(a){a()});v=b(T,a)})()}function f(){x=null;J!=h.url()&&(J=h.url(),q(ma,function(a){a(h.url())}))}var h=this,l=a[0],k=b.location,m=b.history,
n=b.setTimeout,p=b.clearTimeout,r={};h.isMock=!1;var z=0,u=[];h.$$completeOutstandingRequest=e;h.$$incOutstandingRequestCount=function(){z++};h.notifyWhenNoOutstandingRequests=function(a){q(F,function(a){a()});0===z?a():u.push(a)};var F=[],v;h.addPollFn=function(a){E(v)&&g(100,n);F.push(a);return a};var J=k.href,A=a.find("base"),x=null;h.url=function(a,c){k!==b.location&&(k=b.location);m!==b.history&&(m=b.history);if(a){if(J!=a)return J=a,d.history?c?m.replaceState(null,"",a):(m.pushState(null,"",
a),A.attr("href",A.attr("href"))):(x=a,c?k.replace(a):k.href=a),h}else return x||k.href.replace(/%27/g,"'")};var ma=[],L=!1;h.onUrlChange=function(a){if(!L){if(d.history)y(b).on("popstate",f);if(d.hashchange)y(b).on("hashchange",f);else h.addPollFn(f);L=!0}ma.push(a);return a};h.baseHref=function(){var a=A.attr("href");return a?a.replace(/^(https?\:)?\/\/[^\/]*/,""):""};var Q={},da="",H=h.baseHref();h.cookies=function(a,b){var d,e,g,h;if(a)b===s?l.cookie=escape(a)+"=;path="+H+";expires=Thu, 01 Jan 1970 00:00:00 GMT":
w(b)&&(d=(l.cookie=escape(a)+"="+escape(b)+";path="+H).length+1,4096<d&&c.warn("Cookie '"+a+"' possibly not set or overflowed because it was too large ("+d+" > 4096 bytes)!"));else{if(l.cookie!==da)for(da=l.cookie,d=da.split("; "),Q={},g=0;g<d.length;g++)e=d[g],h=e.indexOf("="),0<h&&(a=unescape(e.substring(0,h)),Q[a]===s&&(Q[a]=unescape(e.substring(h+1))));return Q}};h.defer=function(a,b){var c;z++;c=n(function(){delete r[c];e(a)},b||0);r[c]=!0;return c};h.defer.cancel=function(a){return r[a]?(delete r[a],
p(a),e(C),!0):!1}}function Md(){this.$get=["$window","$log","$sniffer","$document",function(b,a,c,d){return new se(b,d,a,c)}]}function Nd(){this.$get=function(){function b(b,d){function e(a){a!=n&&(p?p==a&&(p=a.n):p=a,g(a.n,a.p),g(a,n),n=a,n.n=null)}function g(a,b){a!=b&&(a&&(a.p=b),b&&(b.n=a))}if(b in a)throw t("$cacheFactory")("iid",b);var f=0,h=D({},d,{id:b}),l={},k=d&&d.capacity||Number.MAX_VALUE,m={},n=null,p=null;return a[b]={put:function(a,b){if(k<Number.MAX_VALUE){var c=m[a]||(m[a]={key:a});
e(c)}if(!E(b))return a in l||f++,l[a]=b,f>k&&this.remove(p.key),b},get:function(a){if(k<Number.MAX_VALUE){var b=m[a];if(!b)return;e(b)}return l[a]},remove:function(a){if(k<Number.MAX_VALUE){var b=m[a];if(!b)return;b==n&&(n=b.p);b==p&&(p=b.n);g(b.n,b.p);delete m[a]}delete l[a];f--},removeAll:function(){l={};f=0;m={};n=p=null},destroy:function(){m=h=l=null;delete a[b]},info:function(){return D({},h,{size:f})}}}var a={};b.info=function(){var b={};q(a,function(a,e){b[e]=a.info()});return b};b.get=function(b){return a[b]};
return b}}function ce(){this.$get=["$cacheFactory",function(b){return b("templates")}]}function cc(b,a){var c={},d="Directive",e=/^\s*directive\:\s*([\d\w\-_]+)\s+(.*)$/,g=/(([\d\w\-_]+)(?:\:([^;]+))?;?)/,f=/^(on[a-z]+|formaction)$/;this.directive=function l(a,e){Aa(a,"directive");w(a)?(xb(e,"directiveFactory"),c.hasOwnProperty(a)||(c[a]=[],b.factory(a+d,["$injector","$exceptionHandler",function(b,d){var e=[];q(c[a],function(c,g){try{var f=b.invoke(c);P(f)?f={compile:aa(f)}:!f.compile&&f.link&&(f.compile=
aa(f.link));f.priority=f.priority||0;f.index=g;f.name=f.name||a;f.require=f.require||f.controller&&f.name;f.restrict=f.restrict||"A";e.push(f)}catch(l){d(l)}});return e}])),c[a].push(e)):q(a,Rb(l));return this};this.aHrefSanitizationWhitelist=function(b){return B(b)?(a.aHrefSanitizationWhitelist(b),this):a.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(b){return B(b)?(a.imgSrcSanitizationWhitelist(b),this):a.imgSrcSanitizationWhitelist()};this.$get=["$injector","$interpolate",
"$exceptionHandler","$http","$templateCache","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(a,b,m,n,p,r,z,u,F,v,J,A){function x(a,b,c,d,e){a instanceof y||(a=y(a));q(a,function(b,c){3==b.nodeType&&b.nodeValue.match(/\S+/)&&(a[c]=y(b).wrap("<span></span>").parent()[0])});var g=L(a,b,a,c,d,e);ma(a,"ng-scope");return function(b,c,d){xb(b,"scope");var e=c?Ja.clone.call(a):a;q(d,function(a,b){e.data("$"+b+"Controller",a)});d=0;for(var f=e.length;d<f;d++){var l=
e[d].nodeType;1!==l&&9!==l||e.eq(d).data("$scope",b)}c&&c(e,b);g&&g(b,e,e);return e}}function ma(a,b){try{a.addClass(b)}catch(c){}}function L(a,b,c,d,e,g){function f(a,c,d,e){var g,k,m,r,n,p,z;g=c.length;var I=Array(g);for(n=0;n<g;n++)I[n]=c[n];z=n=0;for(p=l.length;n<p;z++)k=I[z],c=l[n++],g=l[n++],m=y(k),c?(c.scope?(r=a.$new(),m.data("$scope",r)):r=a,(m=c.transclude)||!e&&b?c(g,r,k,d,Q(a,m||b)):c(g,r,k,d,e)):g&&g(a,k.childNodes,s,e)}for(var l=[],k,m,r,n,p=0;p<a.length;p++)k=new Hb,m=da(a[p],[],k,
0===p?d:s,e),(g=m.length?ia(m,a[p],k,b,c,null,[],[],g):null)&&g.scope&&ma(y(a[p]),"ng-scope"),k=g&&g.terminal||!(r=a[p].childNodes)||!r.length?null:L(r,g?g.transclude:b),l.push(g,k),n=n||g||k,g=null;return n?f:null}function Q(a,b){return function(c,d,e){var g=!1;c||(c=a.$new(),g=c.$$transcluded=!0);d=b(c,d,e);if(g)d.on("$destroy",eb(c,c.$destroy));return d}}function da(a,b,c,d,f){var k=c.$attr,l;switch(a.nodeType){case 1:T(b,na(Ka(a).toLowerCase()),"E",d,f);var m,r,n;l=a.attributes;for(var p=0,z=
l&&l.length;p<z;p++){var u=!1,F=!1;m=l[p];if(!S||8<=S||m.specified){r=m.name;n=na(r);W.test(n)&&(r=fb(n.substr(6),"-"));var J=n.replace(/(Start|End)$/,"");n===J+"Start"&&(u=r,F=r.substr(0,r.length-5)+"end",r=r.substr(0,r.length-6));n=na(r.toLowerCase());k[n]=r;c[n]=m=ca(m.value);mc(a,n)&&(c[n]=!0);N(a,b,m,n);T(b,n,"A",d,f,u,F)}}a=a.className;if(w(a)&&""!==a)for(;l=g.exec(a);)n=na(l[2]),T(b,n,"C",d,f)&&(c[n]=ca(l[3])),a=a.substr(l.index+l[0].length);break;case 3:t(b,a.nodeValue);break;case 8:try{if(l=
e.exec(a.nodeValue))n=na(l[1]),T(b,n,"M",d,f)&&(c[n]=ca(l[2]))}catch(x){}}b.sort(E);return b}function H(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw ja("uterdir",b,c);1==a.nodeType&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return y(d)}function R(a,b,c){return function(d,e,g,f,l){e=H(e[0],b,c);return a(d,e,g,f,l)}}function ia(a,c,d,e,g,f,l,n,p){function u(a,b,c,d){if(a){c&&(a=R(a,c,d));a.require=G.require;if(Q===
G||G.$$isolateScope)a=qc(a,{isolateScope:!0});l.push(a)}if(b){c&&(b=R(b,c,d));b.require=G.require;if(Q===G||G.$$isolateScope)b=qc(b,{isolateScope:!0});n.push(b)}}function F(a,b,c){var d,e="data",g=!1;if(w(a)){for(;"^"==(d=a.charAt(0))||"?"==d;)a=a.substr(1),"^"==d&&(e="inheritedData"),g=g||"?"==d;d=null;c&&"data"===e&&(d=c[a]);d=d||b[e]("$"+a+"Controller");if(!d&&!g)throw ja("ctreq",a,t);}else M(a)&&(d=[],q(a,function(a){d.push(F(a,b,c))}));return d}function J(a,e,g,f,p){function u(a,b){var c;2>arguments.length&&
(b=a,a=s);D&&(c=lb);return p(a,b,c)}var I,x,v,A,R,H,lb={},da;I=c===g?d:Ub(d,new Hb(y(g),d.$attr));x=I.$$element;if(Q){var T=/^\s*([@=&])(\??)\s*(\w*)\s*$/;f=y(g);H=e.$new(!0);ia&&ia===Q.$$originalDirective?f.data("$isolateScope",H):f.data("$isolateScopeNoTemplate",H);ma(f,"ng-isolate-scope");q(Q.scope,function(a,c){var d=a.match(T)||[],g=d[3]||c,f="?"==d[2],d=d[1],l,m,n,p;H.$$isolateBindings[c]=d+g;switch(d){case "@":I.$observe(g,function(a){H[c]=a});I.$$observers[g].$$scope=e;I[g]&&(H[c]=b(I[g])(e));
break;case "=":if(f&&!I[g])break;m=r(I[g]);p=m.literal?xa:function(a,b){return a===b};n=m.assign||function(){l=H[c]=m(e);throw ja("nonassign",I[g],Q.name);};l=H[c]=m(e);H.$watch(function(){var a=m(e);p(a,H[c])||(p(a,l)?n(e,a=H[c]):H[c]=a);return l=a},null,m.literal);break;case "&":m=r(I[g]);H[c]=function(a){return m(e,a)};break;default:throw ja("iscp",Q.name,c,a);}})}da=p&&u;L&&q(L,function(a){var b={$scope:a===Q||a.$$isolateScope?H:e,$element:x,$attrs:I,$transclude:da},c;R=a.controller;"@"==R&&(R=
I[a.name]);c=z(R,b);lb[a.name]=c;D||x.data("$"+a.name+"Controller",c);a.controllerAs&&(b.$scope[a.controllerAs]=c)});f=0;for(v=l.length;f<v;f++)try{A=l[f],A(A.isolateScope?H:e,x,I,A.require&&F(A.require,x,lb),da)}catch(G){m(G,ha(x))}f=e;Q&&(Q.template||null===Q.templateUrl)&&(f=H);a&&a(f,g.childNodes,s,p);for(f=n.length-1;0<=f;f--)try{A=n[f],A(A.isolateScope?H:e,x,I,A.require&&F(A.require,x,lb),da)}catch(B){m(B,ha(x))}}p=p||{};for(var v=-Number.MAX_VALUE,A,L=p.controllerDirectives,Q=p.newIsolateScopeDirective,
ia=p.templateDirective,T=p.nonTlbTranscludeDirective,E=!1,D=p.hasElementTranscludeDirective,Z=d.$$element=y(c),G,t,V,Xa=e,O,N=0,S=a.length;N<S;N++){G=a[N];var ra=G.$$start,W=G.$$end;ra&&(Z=H(c,ra,W));V=s;if(v>G.priority)break;if(V=G.scope)A=A||G,G.templateUrl||(K("new/isolated scope",Q,G,Z),X(V)&&(Q=G));t=G.name;!G.templateUrl&&G.controller&&(V=G.controller,L=L||{},K("'"+t+"' controller",L[t],G,Z),L[t]=G);if(V=G.transclude)E=!0,G.$$tlb||(K("transclusion",T,G,Z),T=G),"element"==V?(D=!0,v=G.priority,
V=H(c,ra,W),Z=d.$$element=y(U.createComment(" "+t+": "+d[t]+" ")),c=Z[0],mb(g,y(ya.call(V,0)),c),Xa=x(V,e,v,f&&f.name,{nonTlbTranscludeDirective:T})):(V=y(Eb(c)).contents(),Z.empty(),Xa=x(V,e));if(G.template)if(K("template",ia,G,Z),ia=G,V=P(G.template)?G.template(Z,d):G.template,V=Y(V),G.replace){f=G;V=Cb.test(V)?y(V):[];c=V[0];if(1!=V.length||1!==c.nodeType)throw ja("tplrt",t,"");mb(g,Z,c);S={$attr:{}};V=da(c,[],S);var $=a.splice(N+1,a.length-(N+1));Q&&pc(V);a=a.concat(V).concat($);B(d,S);S=a.length}else Z.html(V);
if(G.templateUrl)K("template",ia,G,Z),ia=G,G.replace&&(f=G),J=C(a.splice(N,a.length-N),Z,d,g,Xa,l,n,{controllerDirectives:L,newIsolateScopeDirective:Q,templateDirective:ia,nonTlbTranscludeDirective:T}),S=a.length;else if(G.compile)try{O=G.compile(Z,d,Xa),P(O)?u(null,O,ra,W):O&&u(O.pre,O.post,ra,W)}catch(aa){m(aa,ha(Z))}G.terminal&&(J.terminal=!0,v=Math.max(v,G.priority))}J.scope=A&&!0===A.scope;J.transclude=E&&Xa;p.hasElementTranscludeDirective=D;return J}function pc(a){for(var b=0,c=a.length;b<c;b++)a[b]=
Tb(a[b],{$$isolateScope:!0})}function T(b,e,g,f,k,n,r){if(e===k)return null;k=null;if(c.hasOwnProperty(e)){var p;e=a.get(e+d);for(var z=0,u=e.length;z<u;z++)try{p=e[z],(f===s||f>p.priority)&&-1!=p.restrict.indexOf(g)&&(n&&(p=Tb(p,{$$start:n,$$end:r})),b.push(p),k=p)}catch(F){m(F)}}return k}function B(a,b){var c=b.$attr,d=a.$attr,e=a.$$element;q(a,function(d,e){"$"!=e.charAt(0)&&(b[e]&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});q(b,function(b,g){"class"==g?(ma(e,b),a["class"]=(a["class"]?
a["class"]+" ":"")+b):"style"==g?(e.attr("style",e.attr("style")+";"+b),a.style=(a.style?a.style+";":"")+b):"$"==g.charAt(0)||a.hasOwnProperty(g)||(a[g]=b,d[g]=c[g])})}function C(a,b,c,d,e,g,f,l){var k=[],m,r,z=b[0],u=a.shift(),F=D({},u,{templateUrl:null,transclude:null,replace:null,$$originalDirective:u}),x=P(u.templateUrl)?u.templateUrl(b,c):u.templateUrl;b.empty();n.get(v.getTrustedResourceUrl(x),{cache:p}).success(function(n){var p,J;n=Y(n);if(u.replace){n=Cb.test(n)?y(n):[];p=n[0];if(1!=n.length||
1!==p.nodeType)throw ja("tplrt",u.name,x);n={$attr:{}};mb(d,b,p);var v=da(p,[],n);X(u.scope)&&pc(v);a=v.concat(a);B(c,n)}else p=z,b.html(n);a.unshift(F);m=ia(a,p,c,e,b,u,g,f,l);q(d,function(a,c){a==p&&(d[c]=b[0])});for(r=L(b[0].childNodes,e);k.length;){n=k.shift();J=k.shift();var A=k.shift(),R=k.shift(),v=b[0];if(J!==z){var H=J.className;l.hasElementTranscludeDirective&&u.replace||(v=Eb(p));mb(A,y(J),v);ma(y(v),H)}J=m.transclude?Q(n,m.transclude):R;m(r,n,v,d,J)}k=null}).error(function(a,b,c,d){throw ja("tpload",
d.url);});return function(a,b,c,d,e){k?(k.push(b),k.push(c),k.push(d),k.push(e)):m(r,b,c,d,e)}}function E(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function K(a,b,c,d){if(b)throw ja("multidir",b.name,c.name,a,ha(d));}function t(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:aa(function(a,b){var c=b.parent(),e=c.data("$binding")||[];e.push(d);ma(c.data("$binding",e),"ng-binding");a.$watch(d,function(a){b[0].nodeValue=a})})})}function O(a,b){if("srcdoc"==
b)return v.HTML;var c=Ka(a);if("xlinkHref"==b||"FORM"==c&&"action"==b||"IMG"!=c&&("src"==b||"ngSrc"==b))return v.RESOURCE_URL}function N(a,c,d,e){var g=b(d,!0);if(g){if("multiple"===e&&"SELECT"===Ka(a))throw ja("selmulti",ha(a));c.push({priority:100,compile:function(){return{pre:function(c,d,l){d=l.$$observers||(l.$$observers={});if(f.test(e))throw ja("nodomevents");if(g=b(l[e],!0,O(a,e)))l[e]=g(c),(d[e]||(d[e]=[])).$$inter=!0,(l.$$observers&&l.$$observers[e].$$scope||c).$watch(g,function(a,b){"class"===
e&&a!=b?l.$updateClass(a,b):l.$set(e,a)})}}}})}}function mb(a,b,c){var d=b[0],e=b.length,g=d.parentNode,f,l;if(a)for(f=0,l=a.length;f<l;f++)if(a[f]==d){a[f++]=c;l=f+e-1;for(var k=a.length;f<k;f++,l++)l<k?a[f]=a[l]:delete a[f];a.length-=e-1;break}g&&g.replaceChild(c,d);a=U.createDocumentFragment();a.appendChild(d);c[y.expando]=d[y.expando];d=1;for(e=b.length;d<e;d++)g=b[d],y(g).remove(),a.appendChild(g),delete b[d];b[0]=c;b.length=1}function qc(a,b){return D(function(){return a.apply(null,arguments)},
a,b)}var Hb=function(a,b){this.$$element=a;this.$attr=b||{}};Hb.prototype={$normalize:na,$addClass:function(a){a&&0<a.length&&J.addClass(this.$$element,a)},$removeClass:function(a){a&&0<a.length&&J.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=rc(a,b),d=rc(b,a);0===c.length?J.removeClass(this.$$element,d):0===d.length?J.addClass(this.$$element,c):J.setClass(this.$$element,c,d)},$set:function(a,b,c,d){var e=mc(this.$$element[0],a);e&&(this.$$element.prop(a,b),d=e);this[a]=b;d?this.$attr[a]=
d:(d=this.$attr[a])||(this.$attr[a]=d=fb(a,"-"));e=Ka(this.$$element);if("A"===e&&"href"===a||"IMG"===e&&"src"===a)this[a]=b=A(b,"src"===a);!1!==c&&(null===b||b===s?this.$$element.removeAttr(d):this.$$element.attr(d,b));(c=this.$$observers)&&q(c[a],function(a){try{a(b)}catch(c){m(c)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers={}),e=d[a]||(d[a]=[]);e.push(b);u.$evalAsync(function(){e.$$inter||b(c[a])});return b}};var Z=b.startSymbol(),ra=b.endSymbol(),Y="{{"==Z||"}}"==ra?
Da:function(a){return a.replace(/\{\{/g,Z).replace(/}}/g,ra)},W=/^ngAttr[A-Z]/;return x}]}function na(b){return Ta(b.replace(te,""))}function rc(b,a){var c="",d=b.split(/\s+/),e=a.split(/\s+/),g=0;a:for(;g<d.length;g++){for(var f=d[g],h=0;h<e.length;h++)if(f==e[h])continue a;c+=(0<c.length?" ":"")+f}return c}function Od(){var b={},a=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(a,d){Aa(a,"controller");X(a)?D(b,a):b[a]=d};this.$get=["$injector","$window",function(c,d){return function(e,g){var f,
h,l;w(e)&&(f=e.match(a),h=f[1],l=f[3],e=b.hasOwnProperty(h)?b[h]:bc(g.$scope,h,!0)||bc(d,h,!0),Ra(e,h,!0));f=c.instantiate(e,g);if(l){if(!g||"object"!=typeof g.$scope)throw t("$controller")("noscp",h||e.name,l);g.$scope[l]=f}return f}}]}function Pd(){this.$get=["$window",function(b){return y(b.document)}]}function Qd(){this.$get=["$log",function(b){return function(a,c){b.error.apply(b,arguments)}}]}function sc(b){var a={},c,d,e;if(!b)return a;q(b.split("\n"),function(b){e=b.indexOf(":");c=K(ca(b.substr(0,
e)));d=ca(b.substr(e+1));c&&(a[c]=a[c]?a[c]+(", "+d):d)});return a}function tc(b){var a=X(b)?b:s;return function(c){a||(a=sc(b));return c?a[K(c)]||null:a}}function uc(b,a,c){if(P(c))return c(b,a);q(c,function(c){b=c(b,a)});return b}function Td(){var b=/^\s*(\[|\{[^\{])/,a=/[\}\]]\s*$/,c=/^\)\]\}',?\n/,d={"Content-Type":"application/json;charset=utf-8"},e=this.defaults={transformResponse:[function(d){w(d)&&(d=d.replace(c,""),b.test(d)&&a.test(d)&&(d=Wb(d)));return d}],transformRequest:[function(a){return X(a)&&
"[object File]"!==wa.call(a)&&"[object Blob]"!==wa.call(a)?qa(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ba(d),put:ba(d),patch:ba(d)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},g=this.interceptors=[],f=this.responseInterceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(a,b,c,d,n,p){function r(a){function c(a){var b=D({},a,{data:uc(a.data,a.headers,d.transformResponse)});return 200<=a.status&&300>a.status?
b:n.reject(b)}var d={method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse},g=function(a){function b(a){var c;q(a,function(b,d){P(b)&&(c=b(),null!=c?a[d]=c:delete a[d])})}var c=e.headers,d=D({},a.headers),g,f,c=D({},c.common,c[K(a.method)]);b(c);b(d);a:for(g in c){a=K(g);for(f in d)if(K(f)===a)continue a;d[g]=c[g]}return d}(a);D(d,a);d.headers=g;d.method=Fa(d.method);(a=Ib(d.url)?b.cookies()[d.xsrfCookieName||e.xsrfCookieName]:s)&&(g[d.xsrfHeaderName||e.xsrfHeaderName]=
a);var f=[function(a){g=a.headers;var b=uc(a.data,tc(g),a.transformRequest);E(a.data)&&q(g,function(a,b){"content-type"===K(b)&&delete g[b]});E(a.withCredentials)&&!E(e.withCredentials)&&(a.withCredentials=e.withCredentials);return z(a,b,g).then(c,c)},s],h=n.when(d);for(q(v,function(a){(a.request||a.requestError)&&f.unshift(a.request,a.requestError);(a.response||a.responseError)&&f.push(a.response,a.responseError)});f.length;){a=f.shift();var k=f.shift(),h=h.then(a,k)}h.success=function(a){h.then(function(b){a(b.data,
b.status,b.headers,d)});return h};h.error=function(a){h.then(null,function(b){a(b.data,b.status,b.headers,d)});return h};return h}function z(b,c,g){function f(a,b,c,e){v&&(200<=a&&300>a?v.put(s,[a,b,sc(c),e]):v.remove(s));l(b,a,c,e);d.$$phase||d.$apply()}function l(a,c,d,e){c=Math.max(c,0);(200<=c&&300>c?p.resolve:p.reject)({data:a,status:c,headers:tc(d),config:b,statusText:e})}function k(){var a=db(r.pendingRequests,b);-1!==a&&r.pendingRequests.splice(a,1)}var p=n.defer(),z=p.promise,v,q,s=u(b.url,
b.params);r.pendingRequests.push(b);z.then(k,k);(b.cache||e.cache)&&(!1!==b.cache&&"GET"==b.method)&&(v=X(b.cache)?b.cache:X(e.cache)?e.cache:F);if(v)if(q=v.get(s),B(q)){if(q.then)return q.then(k,k),q;M(q)?l(q[1],q[0],ba(q[2]),q[3]):l(q,200,{},"OK")}else v.put(s,z);E(q)&&a(b.method,s,c,f,g,b.timeout,b.withCredentials,b.responseType);return z}function u(a,b){if(!b)return a;var c=[];Sc(b,function(a,b){null===a||E(a)||(M(a)||(a=[a]),q(a,function(a){X(a)&&(a=qa(a));c.push(za(b)+"="+za(a))}))});0<c.length&&
(a+=(-1==a.indexOf("?")?"?":"&")+c.join("&"));return a}var F=c("$http"),v=[];q(g,function(a){v.unshift(w(a)?p.get(a):p.invoke(a))});q(f,function(a,b){var c=w(a)?p.get(a):p.invoke(a);v.splice(b,0,{response:function(a){return c(n.when(a))},responseError:function(a){return c(n.reject(a))}})});r.pendingRequests=[];(function(a){q(arguments,function(a){r[a]=function(b,c){return r(D(c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){q(arguments,function(a){r[a]=function(b,c,d){return r(D(d||
{},{method:a,url:b,data:c}))}})})("post","put");r.defaults=e;return r}]}function ue(b){if(8>=S&&(!b.match(/^(get|post|head|put|delete|options)$/i)||!O.XMLHttpRequest))return new O.ActiveXObject("Microsoft.XMLHTTP");if(O.XMLHttpRequest)return new O.XMLHttpRequest;throw t("$httpBackend")("noxhr");}function Ud(){this.$get=["$browser","$window","$document",function(b,a,c){return ve(b,ue,b.defer,a.angular.callbacks,c[0])}]}function ve(b,a,c,d,e){function g(a,b){var c=e.createElement("script"),d=function(){c.onreadystatechange=
c.onload=c.onerror=null;e.body.removeChild(c);b&&b()};c.type="text/javascript";c.src=a;S&&8>=S?c.onreadystatechange=function(){/loaded|complete/.test(c.readyState)&&d()}:c.onload=c.onerror=function(){d()};e.body.appendChild(c);return d}var f=-1;return function(e,l,k,m,n,p,r,z){function u(){v=f;A&&A();x&&x.abort()}function F(a,d,e,g,f){L&&c.cancel(L);A=x=null;0===d&&(d=e?200:"file"==sa(l).protocol?404:0);a(1223===d?204:d,e,g,f||"");b.$$completeOutstandingRequest(C)}var v;b.$$incOutstandingRequestCount();
l=l||b.url();if("jsonp"==K(e)){var J="_"+(d.counter++).toString(36);d[J]=function(a){d[J].data=a};var A=g(l.replace("JSON_CALLBACK","angular.callbacks."+J),function(){d[J].data?F(m,200,d[J].data):F(m,v||-2);d[J]=Ea.noop})}else{var x=a(e);x.open(e,l,!0);q(n,function(a,b){B(a)&&x.setRequestHeader(b,a)});x.onreadystatechange=function(){if(x&&4==x.readyState){var a=null,b=null;v!==f&&(a=x.getAllResponseHeaders(),b="response"in x?x.response:x.responseText);F(m,v||x.status,b,a,x.statusText||"")}};r&&(x.withCredentials=
!0);if(z)try{x.responseType=z}catch(s){if("json"!==z)throw s;}x.send(k||null)}if(0<p)var L=c(u,p);else p&&p.then&&p.then(u)}}function Rd(){var b="{{",a="}}";this.startSymbol=function(a){return a?(b=a,this):b};this.endSymbol=function(b){return b?(a=b,this):a};this.$get=["$parse","$exceptionHandler","$sce",function(c,d,e){function g(g,k,m){for(var n,p,r=0,z=[],u=g.length,F=!1,v=[];r<u;)-1!=(n=g.indexOf(b,r))&&-1!=(p=g.indexOf(a,n+f))?(r!=n&&z.push(g.substring(r,n)),z.push(r=c(F=g.substring(n+f,p))),
r.exp=F,r=p+h,F=!0):(r!=u&&z.push(g.substring(r)),r=u);(u=z.length)||(z.push(""),u=1);if(m&&1<z.length)throw vc("noconcat",g);if(!k||F)return v.length=u,r=function(a){try{for(var b=0,c=u,f;b<c;b++)"function"==typeof(f=z[b])&&(f=f(a),f=m?e.getTrusted(m,f):e.valueOf(f),null===f||E(f)?f="":"string"!=typeof f&&(f=qa(f))),v[b]=f;return v.join("")}catch(h){a=vc("interr",g,h.toString()),d(a)}},r.exp=g,r.parts=z,r}var f=b.length,h=a.length;g.startSymbol=function(){return b};g.endSymbol=function(){return a};
return g}]}function Sd(){this.$get=["$rootScope","$window","$q",function(b,a,c){function d(d,f,h,l){var k=a.setInterval,m=a.clearInterval,n=c.defer(),p=n.promise,r=0,z=B(l)&&!l;h=B(h)?h:0;p.then(null,null,d);p.$$intervalId=k(function(){n.notify(r++);0<h&&r>=h&&(n.resolve(r),m(p.$$intervalId),delete e[p.$$intervalId]);z||b.$apply()},f);e[p.$$intervalId]=n;return p}var e={};d.cancel=function(a){return a&&a.$$intervalId in e?(e[a.$$intervalId].reject("canceled"),clearInterval(a.$$intervalId),delete e[a.$$intervalId],
!0):!1};return d}]}function ad(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"\u00a4",posSuf:"",negPre:"(\u00a4",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January February March April May June July August September October November December".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(b){return 1===b?"one":"other"}}}}function wc(b){b=b.split("/");for(var a=b.length;a--;)b[a]=wb(b[a]);return b.join("/")}function xc(b,a,c){b=sa(b,c);a.$$protocol=
b.protocol;a.$$host=b.hostname;a.$$port=Y(b.port)||we[b.protocol]||null}function yc(b,a,c){var d="/"!==b.charAt(0);d&&(b="/"+b);b=sa(b,c);a.$$path=decodeURIComponent(d&&"/"===b.pathname.charAt(0)?b.pathname.substring(1):b.pathname);a.$$search=Yb(b.search);a.$$hash=decodeURIComponent(b.hash);a.$$path&&"/"!=a.$$path.charAt(0)&&(a.$$path="/"+a.$$path)}function oa(b,a){if(0===a.indexOf(b))return a.substr(b.length)}function Ya(b){var a=b.indexOf("#");return-1==a?b:b.substr(0,a)}function Jb(b){return b.substr(0,
Ya(b).lastIndexOf("/")+1)}function zc(b,a){this.$$html5=!0;a=a||"";var c=Jb(b);xc(b,this,b);this.$$parse=function(a){var e=oa(c,a);if(!w(e))throw Kb("ipthprfx",a,c);yc(e,this,b);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Zb(this.$$search),b=this.$$hash?"#"+wb(this.$$hash):"";this.$$url=wc(this.$$path)+(a?"?"+a:"")+b;this.$$absUrl=c+this.$$url.substr(1)};this.$$rewrite=function(d){var e;if((e=oa(b,d))!==s)return d=e,(e=oa(a,e))!==s?c+(oa("/",e)||e):b+d;if((e=oa(c,
d))!==s)return c+e;if(c==d+"/")return c}}function Lb(b,a){var c=Jb(b);xc(b,this,b);this.$$parse=function(d){var e=oa(b,d)||oa(c,d),e="#"==e.charAt(0)?oa(a,e):this.$$html5?e:"";if(!w(e))throw Kb("ihshprfx",d,a);yc(e,this,b);d=this.$$path;var g=/^\/?.*?:(\/.*)/;0===e.indexOf(b)&&(e=e.replace(b,""));g.exec(e)||(d=(e=g.exec(d))?e[1]:d);this.$$path=d;this.$$compose()};this.$$compose=function(){var c=Zb(this.$$search),e=this.$$hash?"#"+wb(this.$$hash):"";this.$$url=wc(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=
b+(this.$$url?a+this.$$url:"")};this.$$rewrite=function(a){if(Ya(b)==Ya(a))return a}}function Ac(b,a){this.$$html5=!0;Lb.apply(this,arguments);var c=Jb(b);this.$$rewrite=function(d){var e;if(b==Ya(d))return d;if(e=oa(c,d))return b+a+e;if(c===d+"/")return c}}function nb(b){return function(){return this[b]}}function Bc(b,a){return function(c){if(E(c))return this[b];this[b]=a(c);this.$$compose();return this}}function Vd(){var b="",a=!1;this.hashPrefix=function(a){return B(a)?(b=a,this):b};this.html5Mode=
function(b){return B(b)?(a=b,this):a};this.$get=["$rootScope","$browser","$sniffer","$rootElement",function(c,d,e,g){function f(a){c.$broadcast("$locationChangeSuccess",h.absUrl(),a)}var h,l=d.baseHref(),k=d.url();a?(l=k.substring(0,k.indexOf("/",k.indexOf("//")+2))+(l||"/"),e=e.history?zc:Ac):(l=Ya(k),e=Lb);h=new e(l,"#"+b);h.$$parse(h.$$rewrite(k));g.on("click",function(a){if(!a.ctrlKey&&!a.metaKey&&2!=a.which){for(var b=y(a.target);"a"!==K(b[0].nodeName);)if(b[0]===g[0]||!(b=b.parent())[0])return;
var e=b.prop("href");X(e)&&"[object SVGAnimatedString]"===e.toString()&&(e=sa(e.animVal).href);var f=h.$$rewrite(e);e&&(!b.attr("target")&&f&&!a.isDefaultPrevented())&&(a.preventDefault(),f!=d.url()&&(h.$$parse(f),c.$apply(),O.angular["ff-684208-preventDefault"]=!0))}});h.absUrl()!=k&&d.url(h.absUrl(),!0);d.onUrlChange(function(a){h.absUrl()!=a&&(c.$evalAsync(function(){var b=h.absUrl();h.$$parse(a);c.$broadcast("$locationChangeStart",a,b).defaultPrevented?(h.$$parse(b),d.url(b)):f(b)}),c.$$phase||
c.$digest())});var m=0;c.$watch(function(){var a=d.url(),b=h.$$replace;m&&a==h.absUrl()||(m++,c.$evalAsync(function(){c.$broadcast("$locationChangeStart",h.absUrl(),a).defaultPrevented?h.$$parse(a):(d.url(h.absUrl(),b),f(a))}));h.$$replace=!1;return m});return h}]}function Wd(){var b=!0,a=this;this.debugEnabled=function(a){return B(a)?(b=a,this):b};this.$get=["$window",function(c){function d(a){a instanceof Error&&(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:
a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=c.console||{},e=b[a]||b.log||C;a=!1;try{a=!!e.apply}catch(l){}return a?function(){var a=[];q(arguments,function(b){a.push(d(b))});return e.apply(b,a)}:function(a,b){e(a,null==b?"":b)}}return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){b&&c.apply(a,arguments)}}()}}]}function fa(b,a){if("constructor"===b)throw Ba("isecfld",a);return b}function Za(b,
a){if(b){if(b.constructor===b)throw Ba("isecfn",a);if(b.document&&b.location&&b.alert&&b.setInterval)throw Ba("isecwindow",a);if(b.children&&(b.nodeName||b.prop&&b.attr&&b.find))throw Ba("isecdom",a);}return b}function ob(b,a,c,d,e){e=e||{};a=a.split(".");for(var g,f=0;1<a.length;f++){g=fa(a.shift(),d);var h=b[g];h||(h={},b[g]=h);b=h;b.then&&e.unwrapPromises&&(ta(d),"$$v"in b||function(a){a.then(function(b){a.$$v=b})}(b),b.$$v===s&&(b.$$v={}),b=b.$$v)}g=fa(a.shift(),d);return b[g]=c}function Cc(b,
a,c,d,e,g,f){fa(b,g);fa(a,g);fa(c,g);fa(d,g);fa(e,g);return f.unwrapPromises?function(f,l){var k=l&&l.hasOwnProperty(b)?l:f,m;if(null==k)return k;(k=k[b])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);if(!a)return k;if(null==k)return s;(k=k[a])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);if(!c)return k;if(null==k)return s;(k=k[c])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);if(!d)return k;if(null==
k)return s;(k=k[d])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);if(!e)return k;if(null==k)return s;(k=k[e])&&k.then&&(ta(g),"$$v"in k||(m=k,m.$$v=s,m.then(function(a){m.$$v=a})),k=k.$$v);return k}:function(g,f){var k=f&&f.hasOwnProperty(b)?f:g;if(null==k)return k;k=k[b];if(!a)return k;if(null==k)return s;k=k[a];if(!c)return k;if(null==k)return s;k=k[c];if(!d)return k;if(null==k)return s;k=k[d];return e?null==k?s:k=k[e]:k}}function xe(b,a){fa(b,a);return function(a,
d){return null==a?s:(d&&d.hasOwnProperty(b)?d:a)[b]}}function ye(b,a,c){fa(b,c);fa(a,c);return function(c,e){if(null==c)return s;c=(e&&e.hasOwnProperty(b)?e:c)[b];return null==c?s:c[a]}}function Dc(b,a,c){if(Mb.hasOwnProperty(b))return Mb[b];var d=b.split("."),e=d.length,g;if(a.unwrapPromises||1!==e)if(a.unwrapPromises||2!==e)if(a.csp)g=6>e?Cc(d[0],d[1],d[2],d[3],d[4],c,a):function(b,g){var f=0,h;do h=Cc(d[f++],d[f++],d[f++],d[f++],d[f++],c,a)(b,g),g=s,b=h;while(f<e);return h};else{var f="var p;\n";
q(d,function(b,d){fa(b,c);f+="if(s == null) return undefined;\ns="+(d?"s":'((k&&k.hasOwnProperty("'+b+'"))?k:s)')+'["'+b+'"];\n'+(a.unwrapPromises?'if (s && s.then) {\n pw("'+c.replace(/(["\r\n])/g,"\\$1")+'");\n if (!("$$v" in s)) {\n p=s;\n p.$$v = undefined;\n p.then(function(v) {p.$$v=v;});\n}\n s=s.$$v\n}\n':"")});var f=f+"return s;",h=new Function("s","k","pw",f);h.toString=aa(f);g=a.unwrapPromises?function(a,b){return h(a,b,ta)}:h}else g=ye(d[0],d[1],c);else g=xe(d[0],c);"hasOwnProperty"!==
b&&(Mb[b]=g);return g}function Xd(){var b={},a={csp:!1,unwrapPromises:!1,logPromiseWarnings:!0};this.unwrapPromises=function(b){return B(b)?(a.unwrapPromises=!!b,this):a.unwrapPromises};this.logPromiseWarnings=function(b){return B(b)?(a.logPromiseWarnings=b,this):a.logPromiseWarnings};this.$get=["$filter","$sniffer","$log",function(c,d,e){a.csp=d.csp;ta=function(b){a.logPromiseWarnings&&!Ec.hasOwnProperty(b)&&(Ec[b]=!0,e.warn("[$parse] Promise found in the expression `"+b+"`. Automatic unwrapping of promises in Angular expressions is deprecated."))};
return function(d){var e;switch(typeof d){case "string":if(b.hasOwnProperty(d))return b[d];e=new Nb(a);e=(new $a(e,c,a)).parse(d,!1);"hasOwnProperty"!==d&&(b[d]=e);return e;case "function":return d;default:return C}}}]}function Zd(){this.$get=["$rootScope","$exceptionHandler",function(b,a){return ze(function(a){b.$evalAsync(a)},a)}]}function ze(b,a){function c(a){return a}function d(a){return f(a)}var e=function(){var f=[],k,m;return m={resolve:function(a){if(f){var c=f;f=s;k=g(a);c.length&&b(function(){for(var a,
b=0,d=c.length;b<d;b++)a=c[b],k.then(a[0],a[1],a[2])})}},reject:function(a){m.resolve(h(a))},notify:function(a){if(f){var c=f;f.length&&b(function(){for(var b,d=0,e=c.length;d<e;d++)b=c[d],b[2](a)})}},promise:{then:function(b,g,h){var m=e(),u=function(d){try{m.resolve((P(b)?b:c)(d))}catch(e){m.reject(e),a(e)}},F=function(b){try{m.resolve((P(g)?g:d)(b))}catch(c){m.reject(c),a(c)}},v=function(b){try{m.notify((P(h)?h:c)(b))}catch(d){a(d)}};f?f.push([u,F,v]):k.then(u,F,v);return m.promise},"catch":function(a){return this.then(null,
a)},"finally":function(a){function b(a,c){var d=e();c?d.resolve(a):d.reject(a);return d.promise}function d(e,g){var f=null;try{f=(a||c)()}catch(h){return b(h,!1)}return f&&P(f.then)?f.then(function(){return b(e,g)},function(a){return b(a,!1)}):b(e,g)}return this.then(function(a){return d(a,!0)},function(a){return d(a,!1)})}}}},g=function(a){return a&&P(a.then)?a:{then:function(c){var d=e();b(function(){d.resolve(c(a))});return d.promise}}},f=function(a){var b=e();b.reject(a);return b.promise},h=function(c){return{then:function(g,
f){var h=e();b(function(){try{h.resolve((P(f)?f:d)(c))}catch(b){h.reject(b),a(b)}});return h.promise}}};return{defer:e,reject:f,when:function(h,k,m,n){var p=e(),r,z=function(b){try{return(P(k)?k:c)(b)}catch(d){return a(d),f(d)}},u=function(b){try{return(P(m)?m:d)(b)}catch(c){return a(c),f(c)}},F=function(b){try{return(P(n)?n:c)(b)}catch(d){a(d)}};b(function(){g(h).then(function(a){r||(r=!0,p.resolve(g(a).then(z,u,F)))},function(a){r||(r=!0,p.resolve(u(a)))},function(a){r||p.notify(F(a))})});return p.promise},
all:function(a){var b=e(),c=0,d=M(a)?[]:{};q(a,function(a,e){c++;g(a).then(function(a){d.hasOwnProperty(e)||(d[e]=a,--c||b.resolve(d))},function(a){d.hasOwnProperty(e)||b.reject(a)})});0===c&&b.resolve(d);return b.promise}}}function fe(){this.$get=["$window","$timeout",function(b,a){var c=b.requestAnimationFrame||b.webkitRequestAnimationFrame||b.mozRequestAnimationFrame,d=b.cancelAnimationFrame||b.webkitCancelAnimationFrame||b.mozCancelAnimationFrame||b.webkitCancelRequestAnimationFrame,e=!!c,g=e?
function(a){var b=c(a);return function(){d(b)}}:function(b){var c=a(b,16.66,!1);return function(){a.cancel(c)}};g.supported=e;return g}]}function Yd(){var b=10,a=t("$rootScope"),c=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$injector","$exceptionHandler","$parse","$browser",function(d,e,g,f){function h(){this.$id=bb();this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this["this"]=this.$root=this;
this.$$destroyed=!1;this.$$asyncQueue=[];this.$$postDigestQueue=[];this.$$listeners={};this.$$listenerCount={};this.$$isolateBindings={}}function l(b){if(p.$$phase)throw a("inprog",p.$$phase);p.$$phase=b}function k(a,b){var c=g(a);Ra(c,b);return c}function m(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function n(){}h.prototype={constructor:h,$new:function(a){a?(a=new h,a.$root=this.$root,a.$$asyncQueue=this.$$asyncQueue,a.$$postDigestQueue=
this.$$postDigestQueue):(a=function(){},a.prototype=this,a=new a,a.$id=bb());a["this"]=a;a.$$listeners={};a.$$listenerCount={};a.$parent=this;a.$$watchers=a.$$nextSibling=a.$$childHead=a.$$childTail=null;a.$$prevSibling=this.$$childTail;this.$$childHead?this.$$childTail=this.$$childTail.$$nextSibling=a:this.$$childHead=this.$$childTail=a;return a},$watch:function(a,b,d){var e=k(a,"watch"),g=this.$$watchers,f={fn:b,last:n,get:e,exp:a,eq:!!d};c=null;if(!P(b)){var h=k(b||C,"listener");f.fn=function(a,
b,c){h(c)}}if("string"==typeof a&&e.constant){var l=f.fn;f.fn=function(a,b,c){l.call(this,a,b,c);Oa(g,f)}}g||(g=this.$$watchers=[]);g.unshift(f);return function(){Oa(g,f);c=null}},$watchCollection:function(a,b){var c=this,d,e,f,h=1<b.length,l=0,k=g(a),m=[],n={},p=!0,q=0;return this.$watch(function(){d=k(c);var a,b;if(X(d))if(ab(d))for(e!==m&&(e=m,q=e.length=0,l++),a=d.length,q!==a&&(l++,e.length=q=a),b=0;b<a;b++)e[b]!==e[b]&&d[b]!==d[b]||e[b]===d[b]||(l++,e[b]=d[b]);else{e!==n&&(e=n={},q=0,l++);a=
0;for(b in d)d.hasOwnProperty(b)&&(a++,e.hasOwnProperty(b)?e[b]!==d[b]&&(l++,e[b]=d[b]):(q++,e[b]=d[b],l++));if(q>a)for(b in l++,e)e.hasOwnProperty(b)&&!d.hasOwnProperty(b)&&(q--,delete e[b])}else e!==d&&(e=d,l++);return l},function(){p?(p=!1,b(d,d,c)):b(d,f,c);if(h)if(X(d))if(ab(d)){f=Array(d.length);for(var a=0;a<d.length;a++)f[a]=d[a]}else for(a in f={},d)Fc.call(d,a)&&(f[a]=d[a]);else f=d})},$digest:function(){var d,g,f,h,k=this.$$asyncQueue,m=this.$$postDigestQueue,q,x,s=b,L,Q=[],y,H,R;l("$digest");
c=null;do{x=!1;for(L=this;k.length;){try{R=k.shift(),R.scope.$eval(R.expression)}catch(B){p.$$phase=null,e(B)}c=null}a:do{if(h=L.$$watchers)for(q=h.length;q--;)try{if(d=h[q])if((g=d.get(L))!==(f=d.last)&&!(d.eq?xa(g,f):"number"==typeof g&&"number"==typeof f&&isNaN(g)&&isNaN(f)))x=!0,c=d,d.last=d.eq?ba(g):g,d.fn(g,f===n?g:f,L),5>s&&(y=4-s,Q[y]||(Q[y]=[]),H=P(d.exp)?"fn: "+(d.exp.name||d.exp.toString()):d.exp,H+="; newVal: "+qa(g)+"; oldVal: "+qa(f),Q[y].push(H));else if(d===c){x=!1;break a}}catch(w){p.$$phase=
null,e(w)}if(!(h=L.$$childHead||L!==this&&L.$$nextSibling))for(;L!==this&&!(h=L.$$nextSibling);)L=L.$parent}while(L=h);if((x||k.length)&&!s--)throw p.$$phase=null,a("infdig",b,qa(Q));}while(x||k.length);for(p.$$phase=null;m.length;)try{m.shift()()}catch(T){e(T)}},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this!==p&&(q(this.$$listenerCount,eb(null,m,this)),a.$$childHead==this&&(a.$$childHead=this.$$nextSibling),a.$$childTail==this&&
(a.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=null,this.$$listeners={},this.$$watchers=this.$$asyncQueue=this.$$postDigestQueue=[],this.$destroy=this.$digest=this.$apply=C,this.$on=this.$watch=function(){return C})}},$eval:function(a,b){return g(a)(this,b)},$evalAsync:function(a){p.$$phase||
p.$$asyncQueue.length||f.defer(function(){p.$$asyncQueue.length&&p.$digest()});this.$$asyncQueue.push({scope:this,expression:a})},$$postDigest:function(a){this.$$postDigestQueue.push(a)},$apply:function(a){try{return l("$apply"),this.$eval(a)}catch(b){e(b)}finally{p.$$phase=null;try{p.$digest()}catch(c){throw e(c),c;}}},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);
var e=this;return function(){c[db(c,b)]=null;m(e,1,a)}},$emit:function(a,b){var c=[],d,g=this,f=!1,h={name:a,targetScope:g,stopPropagation:function(){f=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},l=[h].concat(ya.call(arguments,1)),k,m;do{d=g.$$listeners[a]||c;h.currentScope=g;k=0;for(m=d.length;k<m;k++)if(d[k])try{d[k].apply(null,l)}catch(n){e(n)}else d.splice(k,1),k--,m--;if(f)break;g=g.$parent}while(g);return h},$broadcast:function(a,b){for(var c=this,d=this,g={name:a,
targetScope:this,preventDefault:function(){g.defaultPrevented=!0},defaultPrevented:!1},f=[g].concat(ya.call(arguments,1)),h,k;c=d;){g.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,f)}catch(l){e(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}return g}};var p=new h;return p}]}function bd(){var b=/^\s*(https?|ftp|mailto|tel|file):/,a=/^\s*(https?|ftp|file):|data:image\//;
this.aHrefSanitizationWhitelist=function(a){return B(a)?(b=a,this):b};this.imgSrcSanitizationWhitelist=function(b){return B(b)?(a=b,this):a};this.$get=function(){return function(c,d){var e=d?a:b,g;if(!S||8<=S)if(g=sa(c).href,""!==g&&!g.match(e))return"unsafe:"+g;return c}}}function Ae(b){if("self"===b)return b;if(w(b)){if(-1<b.indexOf("***"))throw ua("iwcard",b);b=b.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08").replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*");return RegExp("^"+
b+"$")}if(cb(b))return RegExp("^"+b.source+"$");throw ua("imatcher");}function Gc(b){var a=[];B(b)&&q(b,function(b){a.push(Ae(b))});return a}function ae(){this.SCE_CONTEXTS=ga;var b=["self"],a=[];this.resourceUrlWhitelist=function(a){arguments.length&&(b=Gc(a));return b};this.resourceUrlBlacklist=function(b){arguments.length&&(a=Gc(b));return a};this.$get=["$injector",function(c){function d(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=
function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var e=function(a){throw ua("unsafe");};c.has("$sanitize")&&(e=c.get("$sanitize"));var g=d(),f={};f[ga.HTML]=d(g);f[ga.CSS]=d(g);f[ga.URL]=d(g);f[ga.JS]=d(g);f[ga.RESOURCE_URL]=d(f[ga.URL]);return{trustAs:function(a,b){var c=f.hasOwnProperty(a)?f[a]:null;if(!c)throw ua("icontext",a,b);if(null===b||b===s||""===b)return b;if("string"!==typeof b)throw ua("itype",a);return new c(b)},
getTrusted:function(c,d){if(null===d||d===s||""===d)return d;var g=f.hasOwnProperty(c)?f[c]:null;if(g&&d instanceof g)return d.$$unwrapTrustedValue();if(c===ga.RESOURCE_URL){var g=sa(d.toString()),m,n,p=!1;m=0;for(n=b.length;m<n;m++)if("self"===b[m]?Ib(g):b[m].exec(g.href)){p=!0;break}if(p)for(m=0,n=a.length;m<n;m++)if("self"===a[m]?Ib(g):a[m].exec(g.href)){p=!1;break}if(p)return d;throw ua("insecurl",d.toString());}if(c===ga.HTML)return e(d);throw ua("unsafe");},valueOf:function(a){return a instanceof
g?a.$$unwrapTrustedValue():a}}}]}function $d(){var b=!0;this.enabled=function(a){arguments.length&&(b=!!a);return b};this.$get=["$parse","$sniffer","$sceDelegate",function(a,c,d){if(b&&c.msie&&8>c.msieDocumentMode)throw ua("iequirks");var e=ba(ga);e.isEnabled=function(){return b};e.trustAs=d.trustAs;e.getTrusted=d.getTrusted;e.valueOf=d.valueOf;b||(e.trustAs=e.getTrusted=function(a,b){return b},e.valueOf=Da);e.parseAs=function(b,c){var d=a(c);return d.literal&&d.constant?d:function(a,c){return e.getTrusted(b,
d(a,c))}};var g=e.parseAs,f=e.getTrusted,h=e.trustAs;q(ga,function(a,b){var c=K(b);e[Ta("parse_as_"+c)]=function(b){return g(a,b)};e[Ta("get_trusted_"+c)]=function(b){return f(a,b)};e[Ta("trust_as_"+c)]=function(b){return h(a,b)}});return e}]}function be(){this.$get=["$window","$document",function(b,a){var c={},d=Y((/android (\d+)/.exec(K((b.navigator||{}).userAgent))||[])[1]),e=/Boxee/i.test((b.navigator||{}).userAgent),g=a[0]||{},f=g.documentMode,h,l=/^(Moz|webkit|O|ms)(?=[A-Z])/,k=g.body&&g.body.style,
m=!1,n=!1;if(k){for(var p in k)if(m=l.exec(p)){h=m[0];h=h.substr(0,1).toUpperCase()+h.substr(1);break}h||(h="WebkitOpacity"in k&&"webkit");m=!!("transition"in k||h+"Transition"in k);n=!!("animation"in k||h+"Animation"in k);!d||m&&n||(m=w(g.body.style.webkitTransition),n=w(g.body.style.webkitAnimation))}return{history:!(!b.history||!b.history.pushState||4>d||e),hashchange:"onhashchange"in b&&(!f||7<f),hasEvent:function(a){if("input"==a&&9==S)return!1;if(E(c[a])){var b=g.createElement("div");c[a]="on"+
a in b}return c[a]},csp:Vb(),vendorPrefix:h,transitions:m,animations:n,android:d,msie:S,msieDocumentMode:f}}]}function de(){this.$get=["$rootScope","$browser","$q","$exceptionHandler",function(b,a,c,d){function e(e,h,l){var k=c.defer(),m=k.promise,n=B(l)&&!l;h=a.defer(function(){try{k.resolve(e())}catch(a){k.reject(a),d(a)}finally{delete g[m.$$timeoutId]}n||b.$apply()},h);m.$$timeoutId=h;g[h]=k;return m}var g={};e.cancel=function(b){return b&&b.$$timeoutId in g?(g[b.$$timeoutId].reject("canceled"),
delete g[b.$$timeoutId],a.defer.cancel(b.$$timeoutId)):!1};return e}]}function sa(b,a){var c=b;S&&(W.setAttribute("href",c),c=W.href);W.setAttribute("href",c);return{href:W.href,protocol:W.protocol?W.protocol.replace(/:$/,""):"",host:W.host,search:W.search?W.search.replace(/^\?/,""):"",hash:W.hash?W.hash.replace(/^#/,""):"",hostname:W.hostname,port:W.port,pathname:"/"===W.pathname.charAt(0)?W.pathname:"/"+W.pathname}}function Ib(b){b=w(b)?sa(b):b;return b.protocol===Hc.protocol&&b.host===Hc.host}
function ee(){this.$get=aa(O)}function gc(b){function a(d,e){if(X(d)){var g={};q(d,function(b,c){g[c]=a(c,b)});return g}return b.factory(d+c,e)}var c="Filter";this.register=a;this.$get=["$injector",function(a){return function(b){return a.get(b+c)}}];a("currency",Ic);a("date",Jc);a("filter",Be);a("json",Ce);a("limitTo",De);a("lowercase",Ee);a("number",Kc);a("orderBy",Lc);a("uppercase",Fe)}function Be(){return function(b,a,c){if(!M(b))return b;var d=typeof c,e=[];e.check=function(a){for(var b=0;b<e.length;b++)if(!e[b](a))return!1;
return!0};"function"!==d&&(c="boolean"===d&&c?function(a,b){return Ea.equals(a,b)}:function(a,b){if(a&&b&&"object"===typeof a&&"object"===typeof b){for(var d in a)if("$"!==d.charAt(0)&&Fc.call(a,d)&&c(a[d],b[d]))return!0;return!1}b=(""+b).toLowerCase();return-1<(""+a).toLowerCase().indexOf(b)});var g=function(a,b){if("string"==typeof b&&"!"===b.charAt(0))return!g(a,b.substr(1));switch(typeof a){case "boolean":case "number":case "string":return c(a,b);case "object":switch(typeof b){case "object":return c(a,
b);default:for(var d in a)if("$"!==d.charAt(0)&&g(a[d],b))return!0}return!1;case "array":for(d=0;d<a.length;d++)if(g(a[d],b))return!0;return!1;default:return!1}};switch(typeof a){case "boolean":case "number":case "string":a={$:a};case "object":for(var f in a)(function(b){"undefined"!=typeof a[b]&&e.push(function(c){return g("$"==b?c:c&&c[b],a[b])})})(f);break;case "function":e.push(a);break;default:return b}d=[];for(f=0;f<b.length;f++){var h=b[f];e.check(h)&&d.push(h)}return d}}function Ic(b){var a=
b.NUMBER_FORMATS;return function(b,d){E(d)&&(d=a.CURRENCY_SYM);return Mc(b,a.PATTERNS[1],a.GROUP_SEP,a.DECIMAL_SEP,2).replace(/\u00A4/g,d)}}function Kc(b){var a=b.NUMBER_FORMATS;return function(b,d){return Mc(b,a.PATTERNS[0],a.GROUP_SEP,a.DECIMAL_SEP,d)}}function Mc(b,a,c,d,e){if(null==b||!isFinite(b)||X(b))return"";var g=0>b;b=Math.abs(b);var f=b+"",h="",l=[],k=!1;if(-1!==f.indexOf("e")){var m=f.match(/([\d\.]+)e(-?)(\d+)/);m&&"-"==m[2]&&m[3]>e+1?f="0":(h=f,k=!0)}if(k)0<e&&(-1<b&&1>b)&&(h=b.toFixed(e));
else{f=(f.split(Nc)[1]||"").length;E(e)&&(e=Math.min(Math.max(a.minFrac,f),a.maxFrac));f=Math.pow(10,e);b=Math.round(b*f)/f;b=(""+b).split(Nc);f=b[0];b=b[1]||"";var m=0,n=a.lgSize,p=a.gSize;if(f.length>=n+p)for(m=f.length-n,k=0;k<m;k++)0===(m-k)%p&&0!==k&&(h+=c),h+=f.charAt(k);for(k=m;k<f.length;k++)0===(f.length-k)%n&&0!==k&&(h+=c),h+=f.charAt(k);for(;b.length<e;)b+="0";e&&"0"!==e&&(h+=d+b.substr(0,e))}l.push(g?a.negPre:a.posPre);l.push(h);l.push(g?a.negSuf:a.posSuf);return l.join("")}function Ob(b,
a,c){var d="";0>b&&(d="-",b=-b);for(b=""+b;b.length<a;)b="0"+b;c&&(b=b.substr(b.length-a));return d+b}function $(b,a,c,d){c=c||0;return function(e){e=e["get"+b]();if(0<c||e>-c)e+=c;0===e&&-12==c&&(e=12);return Ob(e,a,d)}}function pb(b,a){return function(c,d){var e=c["get"+b](),g=Fa(a?"SHORT"+b:b);return d[g][e]}}function Jc(b){function a(a){var b;if(b=a.match(c)){a=new Date(0);var g=0,f=0,h=b[8]?a.setUTCFullYear:a.setFullYear,l=b[8]?a.setUTCHours:a.setHours;b[9]&&(g=Y(b[9]+b[10]),f=Y(b[9]+b[11]));
h.call(a,Y(b[1]),Y(b[2])-1,Y(b[3]));g=Y(b[4]||0)-g;f=Y(b[5]||0)-f;h=Y(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));l.call(a,g,f,h,b)}return a}var c=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,e){var g="",f=[],h,l;e=e||"mediumDate";e=b.DATETIME_FORMATS[e]||e;w(c)&&(c=Ge.test(c)?Y(c):a(c));vb(c)&&(c=new Date(c));if(!Na(c))return c;for(;e;)(l=He.exec(e))?(f=f.concat(ya.call(l,1)),e=f.pop()):(f.push(e),e=null);q(f,function(a){h=
Ie[a];g+=h?h(c,b.DATETIME_FORMATS):a.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function Ce(){return function(b){return qa(b,!0)}}function De(){return function(b,a){if(!M(b)&&!w(b))return b;a=Y(a);if(w(b))return a?0<=a?b.slice(0,a):b.slice(a,b.length):"";var c=[],d,e;a>b.length?a=b.length:a<-b.length&&(a=-b.length);0<a?(d=0,e=a):(d=b.length+a,e=b.length);for(;d<e;d++)c.push(b[d]);return c}}function Lc(b){return function(a,c,d){function e(a,b){return Qa(b)?function(b,c){return a(c,b)}:a}
function g(a,b){var c=typeof a,d=typeof b;return c==d?("string"==c&&(a=a.toLowerCase(),b=b.toLowerCase()),a===b?0:a<b?-1:1):c<d?-1:1}if(!M(a)||!c)return a;c=M(c)?c:[c];c=Uc(c,function(a){var c=!1,d=a||Da;if(w(a)){if("+"==a.charAt(0)||"-"==a.charAt(0))c="-"==a.charAt(0),a=a.substring(1);d=b(a);if(d.constant){var f=d();return e(function(a,b){return g(a[f],b[f])},c)}}return e(function(a,b){return g(d(a),d(b))},c)});for(var f=[],h=0;h<a.length;h++)f.push(a[h]);return f.sort(e(function(a,b){for(var d=
0;d<c.length;d++){var e=c[d](a,b);if(0!==e)return e}return 0},d))}}function va(b){P(b)&&(b={link:b});b.restrict=b.restrict||"AC";return aa(b)}function Oc(b,a,c,d){function e(a,c){c=c?"-"+fb(c,"-"):"";d.removeClass(b,(a?qb:rb)+c);d.addClass(b,(a?rb:qb)+c)}var g=this,f=b.parent().controller("form")||sb,h=0,l=g.$error={},k=[];g.$name=a.name||a.ngForm;g.$dirty=!1;g.$pristine=!0;g.$valid=!0;g.$invalid=!1;f.$addControl(g);b.addClass(La);e(!0);g.$addControl=function(a){Aa(a.$name,"input");k.push(a);a.$name&&
(g[a.$name]=a)};g.$removeControl=function(a){a.$name&&g[a.$name]===a&&delete g[a.$name];q(l,function(b,c){g.$setValidity(c,!0,a)});Oa(k,a)};g.$setValidity=function(a,b,c){var d=l[a];if(b)d&&(Oa(d,c),d.length||(h--,h||(e(b),g.$valid=!0,g.$invalid=!1),l[a]=!1,e(!0,a),f.$setValidity(a,!0,g)));else{h||e(b);if(d){if(-1!=db(d,c))return}else l[a]=d=[],h++,e(!1,a),f.$setValidity(a,!1,g);d.push(c);g.$valid=!1;g.$invalid=!0}};g.$setDirty=function(){d.removeClass(b,La);d.addClass(b,tb);g.$dirty=!0;g.$pristine=
!1;f.$setDirty()};g.$setPristine=function(){d.removeClass(b,tb);d.addClass(b,La);g.$dirty=!1;g.$pristine=!0;q(k,function(a){a.$setPristine()})}}function pa(b,a,c,d){b.$setValidity(a,c);return c?d:s}function Je(b,a,c){var d=c.prop("validity");X(d)&&b.$parsers.push(function(c){if(b.$error[a]||!(d.badInput||d.customError||d.typeMismatch)||d.valueMissing)return c;b.$setValidity(a,!1)})}function ub(b,a,c,d,e,g){var f=a.prop("validity");if(!e.android){var h=!1;a.on("compositionstart",function(a){h=!0});
a.on("compositionend",function(){h=!1;l()})}var l=function(){if(!h){var e=a.val();Qa(c.ngTrim||"T")&&(e=ca(e));if(d.$viewValue!==e||f&&""===e&&!f.valueMissing)b.$$phase?d.$setViewValue(e):b.$apply(function(){d.$setViewValue(e)})}};if(e.hasEvent("input"))a.on("input",l);else{var k,m=function(){k||(k=g.defer(function(){l();k=null}))};a.on("keydown",function(a){a=a.keyCode;91===a||(15<a&&19>a||37<=a&&40>=a)||m()});if(e.hasEvent("paste"))a.on("paste cut",m)}a.on("change",l);d.$render=function(){a.val(d.$isEmpty(d.$viewValue)?
"":d.$viewValue)};var n=c.ngPattern;n&&((e=n.match(/^\/(.*)\/([gim]*)$/))?(n=RegExp(e[1],e[2]),e=function(a){return pa(d,"pattern",d.$isEmpty(a)||n.test(a),a)}):e=function(c){var e=b.$eval(n);if(!e||!e.test)throw t("ngPattern")("noregexp",n,e,ha(a));return pa(d,"pattern",d.$isEmpty(c)||e.test(c),c)},d.$formatters.push(e),d.$parsers.push(e));if(c.ngMinlength){var p=Y(c.ngMinlength);e=function(a){return pa(d,"minlength",d.$isEmpty(a)||a.length>=p,a)};d.$parsers.push(e);d.$formatters.push(e)}if(c.ngMaxlength){var r=
Y(c.ngMaxlength);e=function(a){return pa(d,"maxlength",d.$isEmpty(a)||a.length<=r,a)};d.$parsers.push(e);d.$formatters.push(e)}}function Pb(b,a){b="ngClass"+b;return["$animate",function(c){function d(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],m=0;m<b.length;m++)if(e==b[m])continue a;c.push(e)}return c}function e(a){if(!M(a)){if(w(a))return a.split(" ");if(X(a)){var b=[];q(a,function(a,c){a&&b.push(c)});return b}}return a}return{restrict:"AC",link:function(g,f,h){function l(a,b){var c=
f.data("$classCounts")||{},d=[];q(a,function(a){if(0<b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});f.data("$classCounts",c);return d.join(" ")}function k(b){if(!0===a||g.$index%2===a){var k=e(b||[]);if(!m){var r=l(k,1);h.$addClass(r)}else if(!xa(b,m)){var q=e(m),r=d(k,q),k=d(q,k),k=l(k,-1),r=l(r,1);0===r.length?c.removeClass(f,k):0===k.length?c.addClass(f,r):c.setClass(f,r,k)}}m=ba(b)}var m;g.$watch(h[b],k,!0);h.$observe("class",function(a){k(g.$eval(h[b]))});"ngClass"!==b&&g.$watch("$index",
function(c,d){var f=c&1;if(f!==d&1){var k=e(g.$eval(h[b]));f===a?(f=l(k,1),h.$addClass(f)):(f=l(k,-1),h.$removeClass(f))}})}}}]}var K=function(b){return w(b)?b.toLowerCase():b},Fc=Object.prototype.hasOwnProperty,Fa=function(b){return w(b)?b.toUpperCase():b},S,y,Ga,ya=[].slice,Ke=[].push,wa=Object.prototype.toString,Pa=t("ng"),Ea=O.angular||(O.angular={}),Sa,Ka,ka=["0","0","0"];S=Y((/msie (\d+)/.exec(K(navigator.userAgent))||[])[1]);isNaN(S)&&(S=Y((/trident\/.*; rv:(\d+)/.exec(K(navigator.userAgent))||
[])[1]));C.$inject=[];Da.$inject=[];var ca=function(){return String.prototype.trim?function(b){return w(b)?b.trim():b}:function(b){return w(b)?b.replace(/^\s\s*/,"").replace(/\s\s*$/,""):b}}();Ka=9>S?function(b){b=b.nodeName?b:b[0];return b.scopeName&&"HTML"!=b.scopeName?Fa(b.scopeName+":"+b.nodeName):b.nodeName}:function(b){return b.nodeName?b.nodeName:b[0].nodeName};var Xc=/[A-Z]/g,$c={full:"1.2.16",major:1,minor:2,dot:16,codeName:"badger-enumeration"},Ua=N.cache={},gb=N.expando="ng-"+(new Date).getTime(),
me=1,Pc=O.document.addEventListener?function(b,a,c){b.addEventListener(a,c,!1)}:function(b,a,c){b.attachEvent("on"+a,c)},Fb=O.document.removeEventListener?function(b,a,c){b.removeEventListener(a,c,!1)}:function(b,a,c){b.detachEvent("on"+a,c)};N._data=function(b){return this.cache[b[this.expando]]||{}};var he=/([\:\-\_]+(.))/g,ie=/^moz([A-Z])/,Bb=t("jqLite"),je=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,Cb=/<|&#?\w+;/,ke=/<([\w:]+)/,le=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ea=
{option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ea.optgroup=ea.option;ea.tbody=ea.tfoot=ea.colgroup=ea.caption=ea.thead;ea.th=ea.td;var Ja=N.prototype={ready:function(b){function a(){c||(c=!0,b())}var c=!1;"complete"===U.readyState?setTimeout(a):(this.on("DOMContentLoaded",a),N(O).on("load",a))},toString:function(){var b=
[];q(this,function(a){b.push(""+a)});return"["+b.join(", ")+"]"},eq:function(b){return 0<=b?y(this[b]):y(this[this.length+b])},length:0,push:Ke,sort:[].sort,splice:[].splice},kb={};q("multiple selected checked disabled readOnly required open".split(" "),function(b){kb[K(b)]=b});var nc={};q("input select option textarea button form details".split(" "),function(b){nc[Fa(b)]=!0});q({data:jc,inheritedData:jb,scope:function(b){return y(b).data("$scope")||jb(b.parentNode||b,["$isolateScope","$scope"])},
isolateScope:function(b){return y(b).data("$isolateScope")||y(b).data("$isolateScopeNoTemplate")},controller:kc,injector:function(b){return jb(b,"$injector")},removeAttr:function(b,a){b.removeAttribute(a)},hasClass:Gb,css:function(b,a,c){a=Ta(a);if(B(c))b.style[a]=c;else{var d;8>=S&&(d=b.currentStyle&&b.currentStyle[a],""===d&&(d="auto"));d=d||b.style[a];8>=S&&(d=""===d?s:d);return d}},attr:function(b,a,c){var d=K(a);if(kb[d])if(B(c))c?(b[a]=!0,b.setAttribute(a,d)):(b[a]=!1,b.removeAttribute(d));
else return b[a]||(b.attributes.getNamedItem(a)||C).specified?d:s;else if(B(c))b.setAttribute(a,c);else if(b.getAttribute)return b=b.getAttribute(a,2),null===b?s:b},prop:function(b,a,c){if(B(c))b[a]=c;else return b[a]},text:function(){function b(b,d){var e=a[b.nodeType];if(E(d))return e?b[e]:"";b[e]=d}var a=[];9>S?(a[1]="innerText",a[3]="nodeValue"):a[1]=a[3]="textContent";b.$dv="";return b}(),val:function(b,a){if(E(a)){if("SELECT"===Ka(b)&&b.multiple){var c=[];q(b.options,function(a){a.selected&&
c.push(a.value||a.text)});return 0===c.length?null:c}return b.value}b.value=a},html:function(b,a){if(E(a))return b.innerHTML;for(var c=0,d=b.childNodes;c<d.length;c++)Ha(d[c]);b.innerHTML=a},empty:lc},function(b,a){N.prototype[a]=function(a,d){var e,g;if(b!==lc&&(2==b.length&&b!==Gb&&b!==kc?a:d)===s){if(X(a)){for(e=0;e<this.length;e++)if(b===jc)b(this[e],a);else for(g in a)b(this[e],g,a[g]);return this}e=b.$dv;g=e===s?Math.min(this.length,1):this.length;for(var f=0;f<g;f++){var h=b(this[f],a,d);e=
e?e+h:h}return e}for(e=0;e<this.length;e++)b(this[e],a,d);return this}});q({removeData:hc,dealoc:Ha,on:function a(c,d,e,g){if(B(g))throw Bb("onargs");var f=la(c,"events"),h=la(c,"handle");f||la(c,"events",f={});h||la(c,"handle",h=ne(c,f));q(d.split(" "),function(d){var g=f[d];if(!g){if("mouseenter"==d||"mouseleave"==d){var m=U.body.contains||U.body.compareDocumentPosition?function(a,c){var d=9===a.nodeType?a.documentElement:a,e=c&&c.parentNode;return a===e||!!(e&&1===e.nodeType&&(d.contains?d.contains(e):
a.compareDocumentPosition&&a.compareDocumentPosition(e)&16))}:function(a,c){if(c)for(;c=c.parentNode;)if(c===a)return!0;return!1};f[d]=[];a(c,{mouseleave:"mouseout",mouseenter:"mouseover"}[d],function(a){var c=a.relatedTarget;c&&(c===this||m(this,c))||h(a,d)})}else Pc(c,d,h),f[d]=[];g=f[d]}g.push(e)})},off:ic,one:function(a,c,d){a=y(a);a.on(c,function g(){a.off(c,d);a.off(c,g)});a.on(c,d)},replaceWith:function(a,c){var d,e=a.parentNode;Ha(a);q(new N(c),function(c){d?e.insertBefore(c,d.nextSibling):
e.replaceChild(c,a);d=c})},children:function(a){var c=[];q(a.childNodes,function(a){1===a.nodeType&&c.push(a)});return c},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,c){q(new N(c),function(c){1!==a.nodeType&&11!==a.nodeType||a.appendChild(c)})},prepend:function(a,c){if(1===a.nodeType){var d=a.firstChild;q(new N(c),function(c){a.insertBefore(c,d)})}},wrap:function(a,c){c=y(c)[0];var d=a.parentNode;d&&d.replaceChild(c,a);c.appendChild(a)},remove:function(a){Ha(a);
var c=a.parentNode;c&&c.removeChild(a)},after:function(a,c){var d=a,e=a.parentNode;q(new N(c),function(a){e.insertBefore(a,d.nextSibling);d=a})},addClass:ib,removeClass:hb,toggleClass:function(a,c,d){c&&q(c.split(" "),function(c){var g=d;E(g)&&(g=!Gb(a,c));(g?ib:hb)(a,c)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){if(a.nextElementSibling)return a.nextElementSibling;for(a=a.nextSibling;null!=a&&1!==a.nodeType;)a=a.nextSibling;return a},find:function(a,c){return a.getElementsByTagName?
a.getElementsByTagName(c):[]},clone:Eb,triggerHandler:function(a,c,d){c=(la(a,"events")||{})[c];d=d||[];var e=[{preventDefault:C,stopPropagation:C}];q(c,function(c){c.apply(a,e.concat(d))})}},function(a,c){N.prototype[c]=function(c,e,g){for(var f,h=0;h<this.length;h++)E(f)?(f=a(this[h],c,e,g),B(f)&&(f=y(f))):Db(f,a(this[h],c,e,g));return B(f)?f:this};N.prototype.bind=N.prototype.on;N.prototype.unbind=N.prototype.off});Va.prototype={put:function(a,c){this[Ia(a)]=c},get:function(a){return this[Ia(a)]},
remove:function(a){var c=this[a=Ia(a)];delete this[a];return c}};var pe=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,qe=/,/,re=/^\s*(_?)(\S+?)\1\s*$/,oe=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Wa=t("$injector"),Le=t("$animate"),Ld=["$provide",function(a){this.$$selectors={};this.register=function(c,d){var e=c+"-animation";if(c&&"."!=c.charAt(0))throw Le("notcsel",c);this.$$selectors[c.substr(1)]=e;a.factory(e,d)};this.classNameFilter=function(a){1===arguments.length&&(this.$$classNameFilter=a instanceof RegExp?
a:null);return this.$$classNameFilter};this.$get=["$timeout","$$asyncCallback",function(a,d){return{enter:function(a,c,f,h){f?f.after(a):(c&&c[0]||(c=f.parent()),c.append(a));h&&d(h)},leave:function(a,c){a.remove();c&&d(c)},move:function(a,c,d,h){this.enter(a,c,d,h)},addClass:function(a,c,f){c=w(c)?c:M(c)?c.join(" "):"";q(a,function(a){ib(a,c)});f&&d(f)},removeClass:function(a,c,f){c=w(c)?c:M(c)?c.join(" "):"";q(a,function(a){hb(a,c)});f&&d(f)},setClass:function(a,c,f,h){q(a,function(a){ib(a,c);hb(a,
f)});h&&d(h)},enabled:C}}]}],ja=t("$compile");cc.$inject=["$provide","$$sanitizeUriProvider"];var te=/^(x[\:\-_]|data[\:\-_])/i,vc=t("$interpolate"),Me=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,we={http:80,https:443,ftp:21},Kb=t("$location");Ac.prototype=Lb.prototype=zc.prototype={$$html5:!1,$$replace:!1,absUrl:nb("$$absUrl"),url:function(a,c){if(E(a))return this.$$url;var d=Me.exec(a);d[1]&&this.path(decodeURIComponent(d[1]));(d[2]||d[1])&&this.search(d[3]||"");this.hash(d[5]||"",c);return this},protocol:nb("$$protocol"),
host:nb("$$host"),port:nb("$$port"),path:Bc("$$path",function(a){return"/"==a.charAt(0)?a:"/"+a}),search:function(a,c){switch(arguments.length){case 0:return this.$$search;case 1:if(w(a))this.$$search=Yb(a);else if(X(a))this.$$search=a;else throw Kb("isrcharg");break;default:E(c)||null===c?delete this.$$search[a]:this.$$search[a]=c}this.$$compose();return this},hash:Bc("$$hash",Da),replace:function(){this.$$replace=!0;return this}};var Ba=t("$parse"),Ec={},ta,Ma={"null":function(){return null},"true":function(){return!0},
"false":function(){return!1},undefined:C,"+":function(a,c,d,e){d=d(a,c);e=e(a,c);return B(d)?B(e)?d+e:d:B(e)?e:s},"-":function(a,c,d,e){d=d(a,c);e=e(a,c);return(B(d)?d:0)-(B(e)?e:0)},"*":function(a,c,d,e){return d(a,c)*e(a,c)},"/":function(a,c,d,e){return d(a,c)/e(a,c)},"%":function(a,c,d,e){return d(a,c)%e(a,c)},"^":function(a,c,d,e){return d(a,c)^e(a,c)},"=":C,"===":function(a,c,d,e){return d(a,c)===e(a,c)},"!==":function(a,c,d,e){return d(a,c)!==e(a,c)},"==":function(a,c,d,e){return d(a,c)==e(a,
c)},"!=":function(a,c,d,e){return d(a,c)!=e(a,c)},"<":function(a,c,d,e){return d(a,c)<e(a,c)},">":function(a,c,d,e){return d(a,c)>e(a,c)},"<=":function(a,c,d,e){return d(a,c)<=e(a,c)},">=":function(a,c,d,e){return d(a,c)>=e(a,c)},"&&":function(a,c,d,e){return d(a,c)&&e(a,c)},"||":function(a,c,d,e){return d(a,c)||e(a,c)},"&":function(a,c,d,e){return d(a,c)&e(a,c)},"|":function(a,c,d,e){return e(a,c)(a,c,d(a,c))},"!":function(a,c,d){return!d(a,c)}},Ne={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},
Nb=function(a){this.options=a};Nb.prototype={constructor:Nb,lex:function(a){this.text=a;this.index=0;this.ch=s;this.lastCh=":";this.tokens=[];var c;for(a=[];this.index<this.text.length;){this.ch=this.text.charAt(this.index);if(this.is("\"'"))this.readString(this.ch);else if(this.isNumber(this.ch)||this.is(".")&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(this.ch))this.readIdent(),this.was("{,")&&("{"===a[0]&&(c=this.tokens[this.tokens.length-1]))&&(c.json=-1===c.text.indexOf("."));
else if(this.is("(){}[].,;:?"))this.tokens.push({index:this.index,text:this.ch,json:this.was(":[,")&&this.is("{[")||this.is("}]:,")}),this.is("{[")&&a.unshift(this.ch),this.is("}]")&&a.shift(),this.index++;else if(this.isWhitespace(this.ch)){this.index++;continue}else{var d=this.ch+this.peek(),e=d+this.peek(2),g=Ma[this.ch],f=Ma[d],h=Ma[e];h?(this.tokens.push({index:this.index,text:e,fn:h}),this.index+=3):f?(this.tokens.push({index:this.index,text:d,fn:f}),this.index+=2):g?(this.tokens.push({index:this.index,
text:this.ch,fn:g,json:this.was("[,:")&&this.is("+-")}),this.index+=1):this.throwError("Unexpected next character ",this.index,this.index+1)}this.lastCh=this.ch}return this.tokens},is:function(a){return-1!==a.indexOf(this.ch)},was:function(a){return-1!==a.indexOf(this.lastCh)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a},isWhitespace:function(a){return" "===a||"\r"===a||"\t"===a||"\n"===a||"\v"===a||"\u00a0"===
a},isIdent:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,c,d){d=d||this.index;c=B(c)?"s "+c+"-"+this.index+" ["+this.text.substring(c,d)+"]":" "+d;throw Ba("lexerr",a,c,this.text);},readNumber:function(){for(var a="",c=this.index;this.index<this.text.length;){var d=K(this.text.charAt(this.index));if("."==d||this.isNumber(d))a+=d;else{var e=this.peek();if("e"==d&&this.isExpOperator(e))a+=
d;else if(this.isExpOperator(d)&&e&&this.isNumber(e)&&"e"==a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||e&&this.isNumber(e)||"e"!=a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}a*=1;this.tokens.push({index:c,text:a,json:!0,fn:function(){return a}})},readIdent:function(){for(var a=this,c="",d=this.index,e,g,f,h;this.index<this.text.length;){h=this.text.charAt(this.index);if("."===h||this.isIdent(h)||this.isNumber(h))"."===h&&(e=this.index),c+=h;else break;
this.index++}if(e)for(g=this.index;g<this.text.length;){h=this.text.charAt(g);if("("===h){f=c.substr(e-d+1);c=c.substr(0,e-d);this.index=g;break}if(this.isWhitespace(h))g++;else break}d={index:d,text:c};if(Ma.hasOwnProperty(c))d.fn=Ma[c],d.json=Ma[c];else{var l=Dc(c,this.options,this.text);d.fn=D(function(a,c){return l(a,c)},{assign:function(d,e){return ob(d,c,e,a.text,a.options)}})}this.tokens.push(d);f&&(this.tokens.push({index:e,text:".",json:!1}),this.tokens.push({index:e+1,text:f,json:!1}))},
readString:function(a){var c=this.index;this.index++;for(var d="",e=a,g=!1;this.index<this.text.length;){var f=this.text.charAt(this.index),e=e+f;if(g)"u"===f?(f=this.text.substring(this.index+1,this.index+5),f.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+f+"]"),this.index+=4,d+=String.fromCharCode(parseInt(f,16))):d=(g=Ne[f])?d+g:d+f,g=!1;else if("\\"===f)g=!0;else{if(f===a){this.index++;this.tokens.push({index:c,text:e,string:d,json:!0,fn:function(){return d}});return}d+=
f}this.index++}this.throwError("Unterminated quote",c)}};var $a=function(a,c,d){this.lexer=a;this.$filter=c;this.options=d};$a.ZERO=D(function(){return 0},{constant:!0});$a.prototype={constructor:$a,parse:function(a,c){this.text=a;this.json=c;this.tokens=this.lexer.lex(a);c&&(this.assignment=this.logicalOR,this.functionCall=this.fieldAccess=this.objectIndex=this.filterChain=function(){this.throwError("is not valid json",{text:a,index:0})});var d=c?this.primary():this.statements();0!==this.tokens.length&&
this.throwError("is an unexpected token",this.tokens[0]);d.literal=!!d.literal;d.constant=!!d.constant;return d},primary:function(){var a;if(this.expect("("))a=this.filterChain(),this.consume(")");else if(this.expect("["))a=this.arrayDeclaration();else if(this.expect("{"))a=this.object();else{var c=this.expect();(a=c.fn)||this.throwError("not a primary expression",c);c.json&&(a.constant=!0,a.literal=!0)}for(var d;c=this.expect("(","[",".");)"("===c.text?(a=this.functionCall(a,d),d=null):"["===c.text?
(d=a,a=this.objectIndex(a)):"."===c.text?(d=a,a=this.fieldAccess(a)):this.throwError("IMPOSSIBLE");return a},throwError:function(a,c){throw Ba("syntax",c.text,a,c.index+1,this.text,this.text.substring(c.index));},peekToken:function(){if(0===this.tokens.length)throw Ba("ueoe",this.text);return this.tokens[0]},peek:function(a,c,d,e){if(0<this.tokens.length){var g=this.tokens[0],f=g.text;if(f===a||f===c||f===d||f===e||!(a||c||d||e))return g}return!1},expect:function(a,c,d,e){return(a=this.peek(a,c,d,
e))?(this.json&&!a.json&&this.throwError("is not valid json",a),this.tokens.shift(),a):!1},consume:function(a){this.expect(a)||this.throwError("is unexpected, expecting ["+a+"]",this.peek())},unaryFn:function(a,c){return D(function(d,e){return a(d,e,c)},{constant:c.constant})},ternaryFn:function(a,c,d){return D(function(e,g){return a(e,g)?c(e,g):d(e,g)},{constant:a.constant&&c.constant&&d.constant})},binaryFn:function(a,c,d){return D(function(e,g){return c(e,g,a,d)},{constant:a.constant&&d.constant})},
statements:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.filterChain()),!this.expect(";"))return 1===a.length?a[0]:function(c,d){for(var e,g=0;g<a.length;g++){var f=a[g];f&&(e=f(c,d))}return e}},filterChain:function(){for(var a=this.expression(),c;;)if(c=this.expect("|"))a=this.binaryFn(a,c.fn,this.filter());else return a},filter:function(){for(var a=this.expect(),c=this.$filter(a.text),d=[];;)if(a=this.expect(":"))d.push(this.expression());else{var e=
function(a,e,h){h=[h];for(var l=0;l<d.length;l++)h.push(d[l](a,e));return c.apply(a,h)};return function(){return e}}},expression:function(){return this.assignment()},assignment:function(){var a=this.ternary(),c,d;return(d=this.expect("="))?(a.assign||this.throwError("implies assignment but ["+this.text.substring(0,d.index)+"] can not be assigned to",d),c=this.ternary(),function(d,g){return a.assign(d,c(d,g),g)}):a},ternary:function(){var a=this.logicalOR(),c,d;if(this.expect("?")){c=this.ternary();
if(d=this.expect(":"))return this.ternaryFn(a,c,this.ternary());this.throwError("expected :",d)}else return a},logicalOR:function(){for(var a=this.logicalAND(),c;;)if(c=this.expect("||"))a=this.binaryFn(a,c.fn,this.logicalAND());else return a},logicalAND:function(){var a=this.equality(),c;if(c=this.expect("&&"))a=this.binaryFn(a,c.fn,this.logicalAND());return a},equality:function(){var a=this.relational(),c;if(c=this.expect("==","!=","===","!=="))a=this.binaryFn(a,c.fn,this.equality());return a},
relational:function(){var a=this.additive(),c;if(c=this.expect("<",">","<=",">="))a=this.binaryFn(a,c.fn,this.relational());return a},additive:function(){for(var a=this.multiplicative(),c;c=this.expect("+","-");)a=this.binaryFn(a,c.fn,this.multiplicative());return a},multiplicative:function(){for(var a=this.unary(),c;c=this.expect("*","/","%");)a=this.binaryFn(a,c.fn,this.unary());return a},unary:function(){var a;return this.expect("+")?this.primary():(a=this.expect("-"))?this.binaryFn($a.ZERO,a.fn,
this.unary()):(a=this.expect("!"))?this.unaryFn(a.fn,this.unary()):this.primary()},fieldAccess:function(a){var c=this,d=this.expect().text,e=Dc(d,this.options,this.text);return D(function(c,d,h){return e(h||a(c,d))},{assign:function(e,f,h){return ob(a(e,h),d,f,c.text,c.options)}})},objectIndex:function(a){var c=this,d=this.expression();this.consume("]");return D(function(e,g){var f=a(e,g),h=d(e,g),l;if(!f)return s;(f=Za(f[h],c.text))&&(f.then&&c.options.unwrapPromises)&&(l=f,"$$v"in f||(l.$$v=s,l.then(function(a){l.$$v=
a})),f=f.$$v);return f},{assign:function(e,g,f){var h=d(e,f);return Za(a(e,f),c.text)[h]=g}})},functionCall:function(a,c){var d=[];if(")"!==this.peekToken().text){do d.push(this.expression());while(this.expect(","))}this.consume(")");var e=this;return function(g,f){for(var h=[],l=c?c(g,f):g,k=0;k<d.length;k++)h.push(d[k](g,f));k=a(g,f,l)||C;Za(l,e.text);Za(k,e.text);h=k.apply?k.apply(l,h):k(h[0],h[1],h[2],h[3],h[4]);return Za(h,e.text)}},arrayDeclaration:function(){var a=[],c=!0;if("]"!==this.peekToken().text){do{if(this.peek("]"))break;
var d=this.expression();a.push(d);d.constant||(c=!1)}while(this.expect(","))}this.consume("]");return D(function(c,d){for(var f=[],h=0;h<a.length;h++)f.push(a[h](c,d));return f},{literal:!0,constant:c})},object:function(){var a=[],c=!0;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;var d=this.expect(),d=d.string||d.text;this.consume(":");var e=this.expression();a.push({key:d,value:e});e.constant||(c=!1)}while(this.expect(","))}this.consume("}");return D(function(c,d){for(var e={},l=0;l<
a.length;l++){var k=a[l];e[k.key]=k.value(c,d)}return e},{literal:!0,constant:c})}};var Mb={},ua=t("$sce"),ga={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},W=U.createElement("a"),Hc=sa(O.location.href,!0);gc.$inject=["$provide"];Ic.$inject=["$locale"];Kc.$inject=["$locale"];var Nc=".",Ie={yyyy:$("FullYear",4),yy:$("FullYear",2,0,!0),y:$("FullYear",1),MMMM:pb("Month"),MMM:pb("Month",!0),MM:$("Month",2,1),M:$("Month",1,1),dd:$("Date",2),d:$("Date",1),HH:$("Hours",2),H:$("Hours",
1),hh:$("Hours",2,-12),h:$("Hours",1,-12),mm:$("Minutes",2),m:$("Minutes",1),ss:$("Seconds",2),s:$("Seconds",1),sss:$("Milliseconds",3),EEEE:pb("Day"),EEE:pb("Day",!0),a:function(a,c){return 12>a.getHours()?c.AMPMS[0]:c.AMPMS[1]},Z:function(a){a=-1*a.getTimezoneOffset();return a=(0<=a?"+":"")+(Ob(Math[0<a?"floor":"ceil"](a/60),2)+Ob(Math.abs(a%60),2))}},He=/((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,Ge=/^\-?\d+$/;Jc.$inject=["$locale"];var Ee=aa(K),Fe=aa(Fa);Lc.$inject=
["$parse"];var cd=aa({restrict:"E",compile:function(a,c){8>=S&&(c.href||c.name||c.$set("href",""),a.append(U.createComment("IE fix")));if(!c.href&&!c.xlinkHref&&!c.name)return function(a,c){var g="[object SVGAnimatedString]"===wa.call(c.prop("href"))?"xlink:href":"href";c.on("click",function(a){c.attr(g)||a.preventDefault()})}}}),zb={};q(kb,function(a,c){if("multiple"!=a){var d=na("ng-"+c);zb[d]=function(){return{priority:100,link:function(a,g,f){a.$watch(f[d],function(a){f.$set(c,!!a)})}}}}});q(["src",
"srcset","href"],function(a){var c=na("ng-"+a);zb[c]=function(){return{priority:99,link:function(d,e,g){var f=a,h=a;"href"===a&&"[object SVGAnimatedString]"===wa.call(e.prop("href"))&&(h="xlinkHref",g.$attr[h]="xlink:href",f=null);g.$observe(c,function(a){a&&(g.$set(h,a),S&&f&&e.prop(f,g[h]))})}}}});var sb={$addControl:C,$removeControl:C,$setValidity:C,$setDirty:C,$setPristine:C};Oc.$inject=["$element","$attrs","$scope","$animate"];var Qc=function(a){return["$timeout",function(c){return{name:"form",
restrict:a?"EAC":"E",controller:Oc,compile:function(){return{pre:function(a,e,g,f){if(!g.action){var h=function(a){a.preventDefault?a.preventDefault():a.returnValue=!1};Pc(e[0],"submit",h);e.on("$destroy",function(){c(function(){Fb(e[0],"submit",h)},0,!1)})}var l=e.parent().controller("form"),k=g.name||g.ngForm;k&&ob(a,k,f,k);if(l)e.on("$destroy",function(){l.$removeControl(f);k&&ob(a,k,s,k);D(f,sb)})}}}}}]},dd=Qc(),qd=Qc(!0),Oe=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,
Pe=/^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*$/i,Qe=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,Rc={text:ub,number:function(a,c,d,e,g,f){ub(a,c,d,e,g,f);e.$parsers.push(function(a){var c=e.$isEmpty(a);if(c||Qe.test(a))return e.$setValidity("number",!0),""===a?null:c?a:parseFloat(a);e.$setValidity("number",!1);return s});Je(e,"number",c);e.$formatters.push(function(a){return e.$isEmpty(a)?"":""+a});d.min&&(a=function(a){var c=parseFloat(d.min);return pa(e,"min",e.$isEmpty(a)||a>=c,a)},e.$parsers.push(a),
e.$formatters.push(a));d.max&&(a=function(a){var c=parseFloat(d.max);return pa(e,"max",e.$isEmpty(a)||a<=c,a)},e.$parsers.push(a),e.$formatters.push(a));e.$formatters.push(function(a){return pa(e,"number",e.$isEmpty(a)||vb(a),a)})},url:function(a,c,d,e,g,f){ub(a,c,d,e,g,f);a=function(a){return pa(e,"url",e.$isEmpty(a)||Oe.test(a),a)};e.$formatters.push(a);e.$parsers.push(a)},email:function(a,c,d,e,g,f){ub(a,c,d,e,g,f);a=function(a){return pa(e,"email",e.$isEmpty(a)||Pe.test(a),a)};e.$formatters.push(a);
e.$parsers.push(a)},radio:function(a,c,d,e){E(d.name)&&c.attr("name",bb());c.on("click",function(){c[0].checked&&a.$apply(function(){e.$setViewValue(d.value)})});e.$render=function(){c[0].checked=d.value==e.$viewValue};d.$observe("value",e.$render)},checkbox:function(a,c,d,e){var g=d.ngTrueValue,f=d.ngFalseValue;w(g)||(g=!0);w(f)||(f=!1);c.on("click",function(){a.$apply(function(){e.$setViewValue(c[0].checked)})});e.$render=function(){c[0].checked=e.$viewValue};e.$isEmpty=function(a){return a!==g};
e.$formatters.push(function(a){return a===g});e.$parsers.push(function(a){return a?g:f})},hidden:C,button:C,submit:C,reset:C,file:C},dc=["$browser","$sniffer",function(a,c){return{restrict:"E",require:"?ngModel",link:function(d,e,g,f){f&&(Rc[K(g.type)]||Rc.text)(d,e,g,f,c,a)}}}],rb="ng-valid",qb="ng-invalid",La="ng-pristine",tb="ng-dirty",Re=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate",function(a,c,d,e,g,f){function h(a,c){c=c?"-"+fb(c,"-"):"";f.removeClass(e,(a?qb:rb)+c);
f.addClass(e,(a?rb:qb)+c)}this.$modelValue=this.$viewValue=Number.NaN;this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$name=d.name;var l=g(d.ngModel),k=l.assign;if(!k)throw t("ngModel")("nonassign",d.ngModel,ha(e));this.$render=C;this.$isEmpty=function(a){return E(a)||""===a||null===a||a!==a};var m=e.inheritedData("$formController")||sb,n=0,p=this.$error={};e.addClass(La);h(!0);this.$setValidity=function(a,c){p[a]!==
!c&&(c?(p[a]&&n--,n||(h(!0),this.$valid=!0,this.$invalid=!1)):(h(!1),this.$invalid=!0,this.$valid=!1,n++),p[a]=!c,h(c,a),m.$setValidity(a,c,this))};this.$setPristine=function(){this.$dirty=!1;this.$pristine=!0;f.removeClass(e,tb);f.addClass(e,La)};this.$setViewValue=function(d){this.$viewValue=d;this.$pristine&&(this.$dirty=!0,this.$pristine=!1,f.removeClass(e,La),f.addClass(e,tb),m.$setDirty());q(this.$parsers,function(a){d=a(d)});this.$modelValue!==d&&(this.$modelValue=d,k(a,d),q(this.$viewChangeListeners,
function(a){try{a()}catch(d){c(d)}}))};var r=this;a.$watch(function(){var c=l(a);if(r.$modelValue!==c){var d=r.$formatters,e=d.length;for(r.$modelValue=c;e--;)c=d[e](c);r.$viewValue!==c&&(r.$viewValue=c,r.$render())}return c})}],Fd=function(){return{require:["ngModel","^?form"],controller:Re,link:function(a,c,d,e){var g=e[0],f=e[1]||sb;f.$addControl(g);a.$on("$destroy",function(){f.$removeControl(g)})}}},Hd=aa({require:"ngModel",link:function(a,c,d,e){e.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),
ec=function(){return{require:"?ngModel",link:function(a,c,d,e){if(e){d.required=!0;var g=function(a){if(d.required&&e.$isEmpty(a))e.$setValidity("required",!1);else return e.$setValidity("required",!0),a};e.$formatters.push(g);e.$parsers.unshift(g);d.$observe("required",function(){g(e.$viewValue)})}}}},Gd=function(){return{require:"ngModel",link:function(a,c,d,e){var g=(a=/\/(.*)\//.exec(d.ngList))&&RegExp(a[1])||d.ngList||",";e.$parsers.push(function(a){if(!E(a)){var c=[];a&&q(a.split(g),function(a){a&&
c.push(ca(a))});return c}});e.$formatters.push(function(a){return M(a)?a.join(", "):s});e.$isEmpty=function(a){return!a||!a.length}}}},Se=/^(true|false|\d+)$/,Id=function(){return{priority:100,compile:function(a,c){return Se.test(c.ngValue)?function(a,c,g){g.$set("value",a.$eval(g.ngValue))}:function(a,c,g){a.$watch(g.ngValue,function(a){g.$set("value",a)})}}}},id=va(function(a,c,d){c.addClass("ng-binding").data("$binding",d.ngBind);a.$watch(d.ngBind,function(a){c.text(a==s?"":a)})}),kd=["$interpolate",
function(a){return function(c,d,e){c=a(d.attr(e.$attr.ngBindTemplate));d.addClass("ng-binding").data("$binding",c);e.$observe("ngBindTemplate",function(a){d.text(a)})}}],jd=["$sce","$parse",function(a,c){return function(d,e,g){e.addClass("ng-binding").data("$binding",g.ngBindHtml);var f=c(g.ngBindHtml);d.$watch(function(){return(f(d)||"").toString()},function(c){e.html(a.getTrustedHtml(f(d))||"")})}}],ld=Pb("",!0),nd=Pb("Odd",0),md=Pb("Even",1),od=va({compile:function(a,c){c.$set("ngCloak",s);a.removeClass("ng-cloak")}}),
pd=[function(){return{scope:!0,controller:"@",priority:500}}],fc={};q("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var c=na("ng-"+a);fc[c]=["$parse",function(d){return{compile:function(e,g){var f=d(g[c]);return function(c,d,e){d.on(K(a),function(a){c.$apply(function(){f(c,{$event:a})})})}}}}]});var sd=["$animate",function(a){return{transclude:"element",priority:600,terminal:!0,restrict:"A",
$$tlb:!0,link:function(c,d,e,g,f){var h,l,k;c.$watch(e.ngIf,function(g){Qa(g)?l||(l=c.$new(),f(l,function(c){c[c.length++]=U.createComment(" end ngIf: "+e.ngIf+" ");h={clone:c};a.enter(c,d.parent(),d)})):(k&&(k.remove(),k=null),l&&(l.$destroy(),l=null),h&&(k=yb(h.clone),a.leave(k,function(){k=null}),h=null))})}}}],td=["$http","$templateCache","$anchorScroll","$animate","$sce",function(a,c,d,e,g){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Ea.noop,compile:function(f,
h){var l=h.ngInclude||h.src,k=h.onload||"",m=h.autoscroll;return function(f,h,q,s,u){var F=0,v,y,A,x=function(){y&&(y.remove(),y=null);v&&(v.$destroy(),v=null);A&&(e.leave(A,function(){y=null}),y=A,A=null)};f.$watch(g.parseAsResourceUrl(l),function(g){var l=function(){!B(m)||m&&!f.$eval(m)||d()},q=++F;g?(a.get(g,{cache:c}).success(function(a){if(q===F){var c=f.$new();s.template=a;a=u(c,function(a){x();e.enter(a,null,h,l)});v=c;A=a;v.$emit("$includeContentLoaded");f.$eval(k)}}).error(function(){q===
F&&x()}),f.$emit("$includeContentRequested")):(x(),s.template=null)})}}}}],Jd=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(c,d,e,g){d.html(g.template);a(d.contents())(c)}}}],ud=va({priority:450,compile:function(){return{pre:function(a,c,d){a.$eval(d.ngInit)}}}}),vd=va({terminal:!0,priority:1E3}),wd=["$locale","$interpolate",function(a,c){var d=/{}/g;return{restrict:"EA",link:function(e,g,f){var h=f.count,l=f.$attr.when&&g.attr(f.$attr.when),k=f.offset||
0,m=e.$eval(l)||{},n={},p=c.startSymbol(),r=c.endSymbol(),s=/^when(Minus)?(.+)$/;q(f,function(a,c){s.test(c)&&(m[K(c.replace("when","").replace("Minus","-"))]=g.attr(f.$attr[c]))});q(m,function(a,e){n[e]=c(a.replace(d,p+h+"-"+k+r))});e.$watch(function(){var c=parseFloat(e.$eval(h));if(isNaN(c))return"";c in m||(c=a.pluralCat(c-k));return n[c](e,g,!0)},function(a){g.text(a)})}}}],xd=["$parse","$animate",function(a,c){var d=t("ngRepeat");return{transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,
link:function(e,g,f,h,l){var k=f.ngRepeat,m=k.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),n,p,r,s,u,F,v={$id:Ia};if(!m)throw d("iexp",k);f=m[1];h=m[2];(m=m[3])?(n=a(m),p=function(a,c,d){F&&(v[F]=a);v[u]=c;v.$index=d;return n(e,v)}):(r=function(a,c){return Ia(c)},s=function(a){return a});m=f.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);if(!m)throw d("iidexp",f);u=m[3]||m[1];F=m[2];var B={};e.$watchCollection(h,function(a){var f,h,m=g[0],n,v={},H,R,w,C,T,t,
E=[];if(ab(a))T=a,n=p||r;else{n=p||s;T=[];for(w in a)a.hasOwnProperty(w)&&"$"!=w.charAt(0)&&T.push(w);T.sort()}H=T.length;h=E.length=T.length;for(f=0;f<h;f++)if(w=a===T?f:T[f],C=a[w],C=n(w,C,f),Aa(C,"`track by` id"),B.hasOwnProperty(C))t=B[C],delete B[C],v[C]=t,E[f]=t;else{if(v.hasOwnProperty(C))throw q(E,function(a){a&&a.scope&&(B[a.id]=a)}),d("dupes",k,C);E[f]={id:C};v[C]=!1}for(w in B)B.hasOwnProperty(w)&&(t=B[w],f=yb(t.clone),c.leave(f),q(f,function(a){a.$$NG_REMOVED=!0}),t.scope.$destroy());
f=0;for(h=T.length;f<h;f++){w=a===T?f:T[f];C=a[w];t=E[f];E[f-1]&&(m=E[f-1].clone[E[f-1].clone.length-1]);if(t.scope){R=t.scope;n=m;do n=n.nextSibling;while(n&&n.$$NG_REMOVED);t.clone[0]!=n&&c.move(yb(t.clone),null,y(m));m=t.clone[t.clone.length-1]}else R=e.$new();R[u]=C;F&&(R[F]=w);R.$index=f;R.$first=0===f;R.$last=f===H-1;R.$middle=!(R.$first||R.$last);R.$odd=!(R.$even=0===(f&1));t.scope||l(R,function(a){a[a.length++]=U.createComment(" end ngRepeat: "+k+" ");c.enter(a,null,y(m));m=a;t.scope=R;t.clone=
a;v[t.id]=t})}B=v})}}}],yd=["$animate",function(a){return function(c,d,e){c.$watch(e.ngShow,function(c){a[Qa(c)?"removeClass":"addClass"](d,"ng-hide")})}}],rd=["$animate",function(a){return function(c,d,e){c.$watch(e.ngHide,function(c){a[Qa(c)?"addClass":"removeClass"](d,"ng-hide")})}}],zd=va(function(a,c,d){a.$watch(d.ngStyle,function(a,d){d&&a!==d&&q(d,function(a,d){c.css(d,"")});a&&c.css(a)},!0)}),Ad=["$animate",function(a){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases=
{}}],link:function(c,d,e,g){var f,h,l,k=[];c.$watch(e.ngSwitch||e.on,function(d){var n,p=k.length;if(0<p){if(l){for(n=0;n<p;n++)l[n].remove();l=null}l=[];for(n=0;n<p;n++){var r=h[n];k[n].$destroy();l[n]=r;a.leave(r,function(){l.splice(n,1);0===l.length&&(l=null)})}}h=[];k=[];if(f=g.cases["!"+d]||g.cases["?"])c.$eval(e.change),q(f,function(d){var e=c.$new();k.push(e);d.transclude(e,function(c){var e=d.element;h.push(c);a.enter(c,e.parent(),e)})})})}}}],Bd=va({transclude:"element",priority:800,require:"^ngSwitch",
link:function(a,c,d,e,g){e.cases["!"+d.ngSwitchWhen]=e.cases["!"+d.ngSwitchWhen]||[];e.cases["!"+d.ngSwitchWhen].push({transclude:g,element:c})}}),Cd=va({transclude:"element",priority:800,require:"^ngSwitch",link:function(a,c,d,e,g){e.cases["?"]=e.cases["?"]||[];e.cases["?"].push({transclude:g,element:c})}}),Ed=va({link:function(a,c,d,e,g){if(!g)throw t("ngTransclude")("orphan",ha(c));g(function(a){c.empty();c.append(a)})}}),ed=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(c,
d){"text/ng-template"==d.type&&a.put(d.id,c[0].text)}}}],Te=t("ngOptions"),Dd=aa({terminal:!0}),fd=["$compile","$parse",function(a,c){var d=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,e={$setViewValue:C};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(a,c,d){var l=this,k={},m=e,n;l.databound=
d.ngModel;l.init=function(a,c,d){m=a;n=d};l.addOption=function(c){Aa(c,'"option value"');k[c]=!0;m.$viewValue==c&&(a.val(c),n.parent()&&n.remove())};l.removeOption=function(a){this.hasOption(a)&&(delete k[a],m.$viewValue==a&&this.renderUnknownOption(a))};l.renderUnknownOption=function(c){c="? "+Ia(c)+" ?";n.val(c);a.prepend(n);a.val(c);n.prop("selected",!0)};l.hasOption=function(a){return k.hasOwnProperty(a)};c.$on("$destroy",function(){l.renderUnknownOption=C})}],link:function(e,f,h,l){function k(a,
c,d,e){d.$render=function(){var a=d.$viewValue;e.hasOption(a)?(A.parent()&&A.remove(),c.val(a),""===a&&w.prop("selected",!0)):E(a)&&w?c.val(""):e.renderUnknownOption(a)};c.on("change",function(){a.$apply(function(){A.parent()&&A.remove();d.$setViewValue(c.val())})})}function m(a,c,d){var e;d.$render=function(){var a=new Va(d.$viewValue);q(c.find("option"),function(c){c.selected=B(a.get(c.value))})};a.$watch(function(){xa(e,d.$viewValue)||(e=ba(d.$viewValue),d.$render())});c.on("change",function(){a.$apply(function(){var a=
[];q(c.find("option"),function(c){c.selected&&a.push(c.value)});d.$setViewValue(a)})})}function n(e,f,g){function h(){var a={"":[]},c=[""],d,k,s,t,z;t=g.$modelValue;z=y(e)||[];var E=n?Qb(z):z,F,I,A;I={};s=!1;var D,H;if(r)if(w&&M(t))for(s=new Va([]),A=0;A<t.length;A++)I[m]=t[A],s.put(w(e,I),t[A]);else s=new Va(t);for(A=0;F=E.length,A<F;A++){k=A;if(n){k=E[A];if("$"===k.charAt(0))continue;I[n]=k}I[m]=z[k];d=p(e,I)||"";(k=a[d])||(k=a[d]=[],c.push(d));r?d=B(s.remove(w?w(e,I):q(e,I))):(w?(d={},d[m]=t,d=
w(e,d)===w(e,I)):d=t===q(e,I),s=s||d);D=l(e,I);D=B(D)?D:"";k.push({id:w?w(e,I):n?E[A]:A,label:D,selected:d})}r||(u||null===t?a[""].unshift({id:"",label:"",selected:!s}):s||a[""].unshift({id:"?",label:"",selected:!0}));I=0;for(E=c.length;I<E;I++){d=c[I];k=a[d];x.length<=I?(t={element:C.clone().attr("label",d),label:k.label},z=[t],x.push(z),f.append(t.element)):(z=x[I],t=z[0],t.label!=d&&t.element.attr("label",t.label=d));D=null;A=0;for(F=k.length;A<F;A++)s=k[A],(d=z[A+1])?(D=d.element,d.label!==s.label&&
D.text(d.label=s.label),d.id!==s.id&&D.val(d.id=s.id),d.selected!==s.selected&&D.prop("selected",d.selected=s.selected)):(""===s.id&&u?H=u:(H=v.clone()).val(s.id).attr("selected",s.selected).text(s.label),z.push({element:H,label:s.label,id:s.id,selected:s.selected}),D?D.after(H):t.element.append(H),D=H);for(A++;z.length>A;)z.pop().element.remove()}for(;x.length>I;)x.pop()[0].element.remove()}var k;if(!(k=t.match(d)))throw Te("iexp",t,ha(f));var l=c(k[2]||k[1]),m=k[4]||k[6],n=k[5],p=c(k[3]||""),q=
c(k[2]?k[1]:m),y=c(k[7]),w=k[8]?c(k[8]):null,x=[[{element:f,label:""}]];u&&(a(u)(e),u.removeClass("ng-scope"),u.remove());f.empty();f.on("change",function(){e.$apply(function(){var a,c=y(e)||[],d={},h,k,l,p,t,v,u;if(r)for(k=[],p=0,v=x.length;p<v;p++)for(a=x[p],l=1,t=a.length;l<t;l++){if((h=a[l].element)[0].selected){h=h.val();n&&(d[n]=h);if(w)for(u=0;u<c.length&&(d[m]=c[u],w(e,d)!=h);u++);else d[m]=c[h];k.push(q(e,d))}}else{h=f.val();if("?"==h)k=s;else if(""===h)k=null;else if(w)for(u=0;u<c.length;u++){if(d[m]=
c[u],w(e,d)==h){k=q(e,d);break}}else d[m]=c[h],n&&(d[n]=h),k=q(e,d);1<x[0].length&&x[0][1].id!==h&&(x[0][1].selected=!1)}g.$setViewValue(k)})});g.$render=h;e.$watch(h)}if(l[1]){var p=l[0];l=l[1];var r=h.multiple,t=h.ngOptions,u=!1,w,v=y(U.createElement("option")),C=y(U.createElement("optgroup")),A=v.clone();h=0;for(var x=f.children(),D=x.length;h<D;h++)if(""===x[h].value){w=u=x.eq(h);break}p.init(l,u,A);r&&(l.$isEmpty=function(a){return!a||0===a.length});t?n(e,f,l):r?m(e,f,l):k(e,f,l,p)}}}}],hd=["$interpolate",
function(a){var c={addOption:C,removeOption:C};return{restrict:"E",priority:100,compile:function(d,e){if(E(e.value)){var g=a(d.text(),!0);g||e.$set("value",d.text())}return function(a,d,e){var k=d.parent(),m=k.data("$selectController")||k.parent().data("$selectController");m&&m.databound?d.prop("selected",!1):m=c;g?a.$watch(g,function(a,c){e.$set("value",a);a!==c&&m.removeOption(c);m.addOption(a)}):m.addOption(e.value);d.on("$destroy",function(){m.removeOption(e.value)})}}}}],gd=aa({restrict:"E",
terminal:!0});O.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):((Ga=O.jQuery)?(y=Ga,D(Ga.fn,{scope:Ja.scope,isolateScope:Ja.isolateScope,controller:Ja.controller,injector:Ja.injector,inheritedData:Ja.inheritedData}),Ab("remove",!0,!0,!1),Ab("empty",!1,!1,!1),Ab("html",!1,!1,!0)):y=N,Ea.element=y,Zc(Ea),y(U).ready(function(){Wc(U,$b)}))})(window,document);!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}</style>');
//# sourceMappingURL=angular.min.js.map

/**!
 * AngularJS file upload/drop directive with http post and progress
 * @author  Danial  <danial.farid@gmail.com>
 * @version 1.6.5
 */
(function() {

var angularFileUpload = angular.module('angularFileUpload', []);

angularFileUpload.service('$upload', ['$http', '$q', '$timeout', function($http, $q, $timeout) {
	function sendHttp(config) {
		config.method = config.method || 'POST';
		config.headers = config.headers || {};
		config.transformRequest = config.transformRequest || function(data, headersGetter) {
			if (window.ArrayBuffer && data instanceof window.ArrayBuffer) {
				return data;
			}
			return $http.defaults.transformRequest[0](data, headersGetter);
		};
		var deferred = $q.defer();

		if (window.XMLHttpRequest.__isShim) {
			config.headers['__setXHR_'] = function() {
				return function(xhr) {
					if (!xhr) return;
					config.__XHR = xhr;
					config.xhrFn && config.xhrFn(xhr);
					xhr.upload.addEventListener('progress', function(e) {
						deferred.notify(e);
					}, false);
					//fix for firefox not firing upload progress end, also IE8-9
					xhr.upload.addEventListener('load', function(e) {
						if (e.lengthComputable) {
							deferred.notify(e);
						}
					}, false);
				};
			};
		}

		$http(config).then(function(r){deferred.resolve(r)}, function(e){deferred.reject(e)}, function(n){deferred.notify(n)});
		
		var promise = deferred.promise;
		promise.success = function(fn) {
			promise.then(function(response) {
				fn(response.data, response.status, response.headers, config);
			});
			return promise;
		};

		promise.error = function(fn) {
			promise.then(null, function(response) {
				fn(response.data, response.status, response.headers, config);
			});
			return promise;
		};

		promise.progress = function(fn) {
			promise.then(null, null, function(update) {
				fn(update);
			});
			return promise;
		};
		promise.abort = function() {
			if (config.__XHR) {
				$timeout(function() {
					config.__XHR.abort();
				});
			}
			return promise;
		};
		promise.xhr = function(fn) {
			config.xhrFn = (function(origXhrFn) {
				return function() {
					origXhrFn && origXhrFn.apply(promise, arguments);
					fn.apply(promise, arguments);
				}
			})(config.xhrFn);
			return promise;
		};
		
		return promise;
	}

	this.upload = function(config) {
		config.headers = config.headers || {};
		config.headers['Content-Type'] = undefined;
		config.transformRequest = config.transformRequest || $http.defaults.transformRequest;
		var formData = new FormData();
		var origTransformRequest = config.transformRequest;
		var origData = config.data;
		config.transformRequest = function(formData, headerGetter) {
			if (origData) {
				if (config.formDataAppender) {
					for (var key in origData) {
						var val = origData[key];
						config.formDataAppender(formData, key, val);
					}
				} else {
					for (var key in origData) {
						var val = origData[key];
						if (typeof origTransformRequest == 'function') {
							val = origTransformRequest(val, headerGetter);
						} else {
							for (var i = 0; i < origTransformRequest.length; i++) {
								var transformFn = origTransformRequest[i];
								if (typeof transformFn == 'function') {
									val = transformFn(val, headerGetter);
								}
							}
						}
						formData.append(key, val);
					}
				}
			}

			if (config.file != null) {
				var fileFormName = config.fileFormDataName || 'file';

				if (Object.prototype.toString.call(config.file) === '[object Array]') {
					var isFileFormNameString = Object.prototype.toString.call(fileFormName) === '[object String]';
					for (var i = 0; i < config.file.length; i++) {
						formData.append(isFileFormNameString ? fileFormName : fileFormName[i], config.file[i], 
								(config.fileName && config.fileName[i]) || config.file[i].name);
					}
				} else {
					formData.append(fileFormName, config.file, config.fileName || config.file.name);
				}
			}
			return formData;
		};

		config.data = formData;

		return sendHttp(config);
	};

	this.http = function(config) {
		return sendHttp(config);
	}
}]);

angularFileUpload.directive('ngFileSelect', [ '$parse', '$timeout', function($parse, $timeout) {
	return function(scope, elem, attr) {
		var fn = $parse(attr['ngFileSelect']);
		if (elem[0].tagName.toLowerCase() !== 'input' || (elem.attr('type') && elem.attr('type').toLowerCase()) !== 'file') {
			var fileElem = angular.element('<input type="file">')
			for (var i = 0; i < elem[0].attributes.length; i++) {
				fileElem.attr(elem[0].attributes[i].name, elem[0].attributes[i].value);
			}
			if (elem.attr("data-multiple")) fileElem.attr("multiple", "true");
			fileElem.css("top", 0).css("bottom", 0).css("left", 0).css("right", 0).css("width", "100%").
					css("opacity", 0).css("position", "absolute").css('filter', 'alpha(opacity=0)');
			elem.append(fileElem);
			if (elem.css("position") === '' || elem.css("position") === 'static') {
				elem.css("position", "relative");
			}
			elem = fileElem;
		}
		elem.bind('change', function(evt) {
			var files = [], fileList, i;
			fileList = evt.__files_ || evt.target.files;
			if (fileList != null) {
				for (i = 0; i < fileList.length; i++) {
					files.push(fileList.item(i));
				}
			}
			$timeout(function() {
				fn(scope, {
					$files : files,
					$event : evt
				});
			});
		});
		// removed this since it was confusing if the user click on browse and then cancel #181
//		elem.bind('click', function(){
//			this.value = null;
//		});

		// removed because of #253 bug
		// touch screens
//		if (('ontouchstart' in window) ||
//				(navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)) {
//			elem.bind('touchend', function(e) {
//				e.preventDefault();
//				e.target.click();
//			});
//		}
	};
} ]);

angularFileUpload.directive('ngFileDropAvailable', [ '$parse', '$timeout', function($parse, $timeout) {
	return function(scope, elem, attr) {
		if ('draggable' in document.createElement('span')) {
			var fn = $parse(attr['ngFileDropAvailable']);
			$timeout(function() {
				fn(scope);
			});
		}
	};
} ]);

angularFileUpload.directive('ngFileDrop', [ '$parse', '$timeout', '$location', function($parse, $timeout, $location) {
	return function(scope, elem, attr) {
		if ('draggable' in document.createElement('span')) {
			var leaveTimeout = null;
			elem[0].addEventListener("dragover", function(evt) {
				evt.stopPropagation();
				evt.preventDefault();
				$timeout.cancel(leaveTimeout);
				if (!elem[0].__drag_over_class_) {
					if (attr['ngFileDragOverClass'].search(/\) *$/) > -1) {
						dragOverClassFn = $parse(attr['ngFileDragOverClass']);
						var dragOverClass = dragOverClassFn(scope, {
							$event : evt
						});					
						elem[0].__drag_over_class_ = dragOverClass; 
					} else {
						elem[0].__drag_over_class_ = attr['ngFileDragOverClass'] || "dragover";
					}
				}
				elem.addClass(elem[0].__drag_over_class_);
			}, false);
			elem[0].addEventListener("dragenter", function(evt) {
				evt.stopPropagation();
				evt.preventDefault();
			}, false);
			elem[0].addEventListener("dragleave", function(evt) {
				leaveTimeout = $timeout(function() {
					elem.removeClass(elem[0].__drag_over_class_);
					elem[0].__drag_over_class_ = null;
				}, attr['ngFileDragOverDelay'] || 1);
			}, false);
			var fn = $parse(attr['ngFileDrop']);
			elem[0].addEventListener("drop", function(evt) {
				evt.stopPropagation();
				evt.preventDefault();
				elem.removeClass(elem[0].__drag_over_class_);
				elem[0].__drag_over_class_ = null;
				extractFiles(evt, function(files) {
					fn(scope, {
						$files : files,
						$event : evt
					});					
				});
			}, false);
						
			function isASCII(str) {
				return /^[\000-\177]*$/.test(str);
			}

			function extractFiles(evt, callback) {
				var files = [], items = evt.dataTransfer.items;
				if (items && items.length > 0 && items[0].webkitGetAsEntry && $location.protocol() != 'file') {
					for (var i = 0; i < items.length; i++) {
						var entry = items[i].webkitGetAsEntry();
						if (entry != null) {
							//fix for chrome bug https://code.google.com/p/chromium/issues/detail?id=149735
							if (isASCII(entry.name)) {
								traverseFileTree(files, entry);
							} else if (!items[i].webkitGetAsEntry().isDirectory) {
								files.push(items[i].getAsFile());
							}
						}
					}
				} else {
					var fileList = evt.dataTransfer.files;
					if (fileList != null) {
						for (var i = 0; i < fileList.length; i++) {
							files.push(fileList.item(i));
						}
					}
				}
				(function waitForProcess(delay) {
					$timeout(function() {
						if (!processing) {
							callback(files);
						} else {
							waitForProcess(10);
						}
					}, delay || 0)
				})();
			}
			
			var processing = 0;
			function traverseFileTree(files, entry, path) {
				if (entry != null) {
					if (entry.isDirectory) {
						var dirReader = entry.createReader();
						processing++;
						dirReader.readEntries(function(entries) {
							for (var i = 0; i < entries.length; i++) {
								traverseFileTree(files, entries[i], (path ? path : "") + entry.name + "/");
							}
							processing--;
						});
					} else {
						processing++;
						entry.file(function(file) {
							processing--;
							file._relativePath = (path ? path : "") + file.name;
							files.push(file);
						});
					}
				}
			}
		}
	};
} ]);

})();

/*
 AngularJS v1.2.16
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(n,e,A){'use strict';function x(s,g,k){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(a,c,b,f,w){function y(){p&&(p.remove(),p=null);h&&(h.$destroy(),h=null);l&&(k.leave(l,function(){p=null}),p=l,l=null)}function v(){var b=s.current&&s.current.locals;if(e.isDefined(b&&b.$template)){var b=a.$new(),d=s.current;l=w(b,function(d){k.enter(d,null,l||c,function(){!e.isDefined(t)||t&&!a.$eval(t)||g()});y()});h=d.scope=b;h.$emit("$viewContentLoaded");h.$eval(u)}else y()}
var h,l,p,t=b.autoscroll,u=b.onload||"";a.$on("$routeChangeSuccess",v);v()}}}function z(e,g,k){return{restrict:"ECA",priority:-400,link:function(a,c){var b=k.current,f=b.locals;c.html(f.$template);var w=e(c.contents());b.controller&&(f.$scope=a,f=g(b.controller,f),b.controllerAs&&(a[b.controllerAs]=f),c.data("$ngControllerController",f),c.children().data("$ngControllerController",f));w(a)}}}n=e.module("ngRoute",["ng"]).provider("$route",function(){function s(a,c){return e.extend(new (e.extend(function(){},
{prototype:a})),c)}function g(a,e){var b=e.caseInsensitiveMatch,f={originalPath:a,regexp:a},k=f.keys=[];a=a.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)([\?\*])?/g,function(a,e,b,c){a="?"===c?c:null;c="*"===c?c:null;k.push({name:b,optional:!!a});e=e||"";return""+(a?"":e)+"(?:"+(a?e:"")+(c&&"(.+?)"||"([^/]+)")+(a||"")+")"+(a||"")}).replace(/([\/$\*])/g,"\\$1");f.regexp=RegExp("^"+a+"$",b?"i":"");return f}var k={};this.when=function(a,c){k[a]=e.extend({reloadOnSearch:!0},c,a&&g(a,c));if(a){var b=
"/"==a[a.length-1]?a.substr(0,a.length-1):a+"/";k[b]=e.extend({redirectTo:a},g(b,c))}return this};this.otherwise=function(a){this.when(null,a);return this};this.$get=["$rootScope","$location","$routeParams","$q","$injector","$http","$templateCache","$sce",function(a,c,b,f,g,n,v,h){function l(){var d=p(),m=r.current;if(d&&m&&d.$$route===m.$$route&&e.equals(d.pathParams,m.pathParams)&&!d.reloadOnSearch&&!u)m.params=d.params,e.copy(m.params,b),a.$broadcast("$routeUpdate",m);else if(d||m)u=!1,a.$broadcast("$routeChangeStart",
d,m),(r.current=d)&&d.redirectTo&&(e.isString(d.redirectTo)?c.path(t(d.redirectTo,d.params)).search(d.params).replace():c.url(d.redirectTo(d.pathParams,c.path(),c.search())).replace()),f.when(d).then(function(){if(d){var a=e.extend({},d.resolve),c,b;e.forEach(a,function(d,c){a[c]=e.isString(d)?g.get(d):g.invoke(d)});e.isDefined(c=d.template)?e.isFunction(c)&&(c=c(d.params)):e.isDefined(b=d.templateUrl)&&(e.isFunction(b)&&(b=b(d.params)),b=h.getTrustedResourceUrl(b),e.isDefined(b)&&(d.loadedTemplateUrl=
b,c=n.get(b,{cache:v}).then(function(a){return a.data})));e.isDefined(c)&&(a.$template=c);return f.all(a)}}).then(function(c){d==r.current&&(d&&(d.locals=c,e.copy(d.params,b)),a.$broadcast("$routeChangeSuccess",d,m))},function(c){d==r.current&&a.$broadcast("$routeChangeError",d,m,c)})}function p(){var a,b;e.forEach(k,function(f,k){var q;if(q=!b){var g=c.path();q=f.keys;var l={};if(f.regexp)if(g=f.regexp.exec(g)){for(var h=1,p=g.length;h<p;++h){var n=q[h-1],r="string"==typeof g[h]?decodeURIComponent(g[h]):
g[h];n&&r&&(l[n.name]=r)}q=l}else q=null;else q=null;q=a=q}q&&(b=s(f,{params:e.extend({},c.search(),a),pathParams:a}),b.$$route=f)});return b||k[null]&&s(k[null],{params:{},pathParams:{}})}function t(a,c){var b=[];e.forEach((a||"").split(":"),function(a,d){if(0===d)b.push(a);else{var e=a.match(/(\w+)(.*)/),f=e[1];b.push(c[f]);b.push(e[2]||"");delete c[f]}});return b.join("")}var u=!1,r={routes:k,reload:function(){u=!0;a.$evalAsync(l)}};a.$on("$locationChangeSuccess",l);return r}]});n.provider("$routeParams",
function(){this.$get=function(){return{}}});n.directive("ngView",x);n.directive("ngView",z);x.$inject=["$route","$anchorScroll","$animate"];z.$inject=["$compile","$controller","$route"]})(window,window.angular);
//# sourceMappingURL=angular-route.min.js.map

/*
 AngularJS v1.2.16
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(p,f,n){'use strict';f.module("ngCookies",["ng"]).factory("$cookies",["$rootScope","$browser",function(e,b){var c={},g={},h,k=!1,l=f.copy,m=f.isUndefined;b.addPollFn(function(){var a=b.cookies();h!=a&&(h=a,l(a,g),l(a,c),k&&e.$apply())})();k=!0;e.$watch(function(){var a,d,e;for(a in g)m(c[a])&&b.cookies(a,n);for(a in c)d=c[a],f.isString(d)||(d=""+d,c[a]=d),d!==g[a]&&(b.cookies(a,d),e=!0);if(e)for(a in d=b.cookies(),c)c[a]!==d[a]&&(m(d[a])?delete c[a]:c[a]=d[a])});return c}]).factory("$cookieStore",
["$cookies",function(e){return{get:function(b){return(b=e[b])?f.fromJson(b):b},put:function(b,c){e[b]=f.toJson(c)},remove:function(b){delete e[b]}}}])})(window,window.angular);
//# sourceMappingURL=angular-cookies.min.js.map

/*!
 * Bootstrap v3.2.0 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.2.0",d.prototype.close=function(b){function c(){f.detach().trigger("closed.bs.alert").remove()}var d=a(this),e=d.attr("data-target");e||(e=d.attr("href"),e=e&&e.replace(/.*(?=#[^\s]*$)/,""));var f=a(e);b&&b.preventDefault(),f.length||(f=d.hasClass("alert")?d:d.parent()),f.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",c).emulateTransitionEnd(150):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.2.0",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),d[e](null==f[b]?this.options[b]:f[b]),setTimeout(a.proxy(function(){"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")&&(c.prop("checked")&&this.$element.hasClass("active")?a=!1:b.find(".active").removeClass("active")),a&&c.prop("checked",!this.$element.hasClass("active")).trigger("change")}a&&this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target);d.hasClass("btn")||(d=d.closest(".btn")),b.call(d,"toggle"),c.preventDefault()})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b).on("keydown.bs.carousel",a.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.2.0",c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},c.prototype.keydown=function(a){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.to=function(b){var c=this,d=this.getItemIndex(this.$active=this.$element.find(".item.active"));return b>this.$items.length-1||0>b?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){c.to(b)}):d==b?this.pause().cycle():this.slide(b>d?"next":"prev",a(this.$items[b]))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){return this.sliding?void 0:this.slide("next")},c.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},c.prototype.slide=function(b,c){var d=this.$element.find(".item.active"),e=c||d[b](),f=this.interval,g="next"==b?"left":"right",h="next"==b?"first":"last",i=this;if(!e.length){if(!this.options.wrap)return;e=this.$element.find(".item")[h]()}if(e.hasClass("active"))return this.sliding=!1;var j=e[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:g});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,f&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(e)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:g});return a.support.transition&&this.$element.hasClass("slide")?(e.addClass(b),e[0].offsetWidth,d.addClass(g),e.addClass(g),d.one("bsTransitionEnd",function(){e.removeClass([b,g].join(" ")).addClass("active"),d.removeClass(["active",g].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(1e3*d.css("transition-duration").slice(0,-1))):(d.removeClass("active"),e.addClass("active"),this.sliding=!1,this.$element.trigger(m)),f&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this},a(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}}),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.collapse"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b);!e&&f.toggle&&"show"==b&&(b=!b),e||d.data("bs.collapse",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.transitioning=null,this.options.parent&&(this.$parent=a(this.options.parent)),this.options.toggle&&this.toggle()};c.VERSION="3.2.0",c.DEFAULTS={toggle:!0},c.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},c.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var c=a.Event("show.bs.collapse");if(this.$element.trigger(c),!c.isDefaultPrevented()){var d=this.$parent&&this.$parent.find("> .panel > .in");if(d&&d.length){var e=d.data("bs.collapse");if(e&&e.transitioning)return;b.call(d,"hide"),e||d.data("bs.collapse",null)}var f=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[f](0),this.transitioning=1;var g=function(){this.$element.removeClass("collapsing").addClass("collapse in")[f](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return g.call(this);var h=a.camelCase(["scroll",f].join("-"));this.$element.one("bsTransitionEnd",a.proxy(g,this)).emulateTransitionEnd(350)[f](this.$element[0][h])}}},c.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var d=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(d,this)).emulateTransitionEnd(350):d.call(this)}}},c.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var d=a.fn.collapse;a.fn.collapse=b,a.fn.collapse.Constructor=c,a.fn.collapse.noConflict=function(){return a.fn.collapse=d,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(c){var d,e=a(this),f=e.attr("data-target")||c.preventDefault()||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""),g=a(f),h=g.data("bs.collapse"),i=h?"toggle":e.data(),j=e.attr("data-parent"),k=j&&a(j);h&&h.transitioning||(k&&k.find('[data-toggle="collapse"][data-parent="'+j+'"]').not(e).addClass("collapsed"),e[g.hasClass("in")?"addClass":"removeClass"]("collapsed")),b.call(g,i)})}(jQuery),+function(a){"use strict";function b(b){b&&3===b.which||(a(e).remove(),a(f).each(function(){var d=c(a(this)),e={relatedTarget:this};d.hasClass("open")&&(d.trigger(b=a.Event("hide.bs.dropdown",e)),b.isDefaultPrevented()||d.removeClass("open").trigger("hidden.bs.dropdown",e))}))}function c(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.2.0",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=c(e),g=f.hasClass("open");if(b(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click",b);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus"),f.toggleClass("open").trigger("shown.bs.dropdown",h)}return!1}},g.prototype.keydown=function(b){if(/(38|40|27)/.test(b.keyCode)){var d=a(this);if(b.preventDefault(),b.stopPropagation(),!d.is(".disabled, :disabled")){var e=c(d),g=e.hasClass("open");if(!g||g&&27==b.keyCode)return 27==b.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.divider):visible a",i=e.find('[role="menu"]'+h+', [role="listbox"]'+h);if(i.length){var j=i.index(i.filter(":focus"));38==b.keyCode&&j>0&&j--,40==b.keyCode&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",b).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f+', [role="menu"], [role="listbox"]',g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.2.0",c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var c=this,d=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(d),this.isShown||d.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.backdrop(function(){var d=a.support.transition&&c.$element.hasClass("fade");c.$element.parent().length||c.$element.appendTo(c.$body),c.$element.show().scrollTop(0),d&&c.$element[0].offsetWidth,c.$element.addClass("in").attr("aria-hidden",!1),c.enforceFocus();var e=a.Event("shown.bs.modal",{relatedTarget:b});d?c.$element.find(".modal-dialog").one("bsTransitionEnd",function(){c.$element.trigger("focus").trigger(e)}).emulateTransitionEnd(300):c.$element.trigger("focus").trigger(e)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var c=this,d=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var e=a.support.transition&&d;if(this.$backdrop=a('<div class="modal-backdrop '+d+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),e&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;e?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(150):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var f=function(){c.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",f).emulateTransitionEnd(150):f()}else b&&b()},c.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;(e||"destroy"!=b)&&(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",a,b)};c.VERSION="3.2.0",c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(this.options.viewport.selector||this.options.viewport);for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show()},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var c=a.contains(document.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!c)return;var d=this,e=this.tip(),f=this.getUID(this.type);this.setContent(),e.attr("id",f),this.$element.attr("aria-describedby",f),this.options.animation&&e.addClass("fade");var g="function"==typeof this.options.placement?this.options.placement.call(this,e[0],this.$element[0]):this.options.placement,h=/\s?auto?\s?/i,i=h.test(g);i&&(g=g.replace(h,"")||"top"),e.detach().css({top:0,left:0,display:"block"}).addClass(g).data("bs."+this.type,this),this.options.container?e.appendTo(this.options.container):e.insertAfter(this.$element);var j=this.getPosition(),k=e[0].offsetWidth,l=e[0].offsetHeight;if(i){var m=g,n=this.$element.parent(),o=this.getPosition(n);g="bottom"==g&&j.top+j.height+l-o.scroll>o.height?"top":"top"==g&&j.top-o.scroll-l<0?"bottom":"right"==g&&j.right+k>o.width?"left":"left"==g&&j.left-k<o.left?"right":g,e.removeClass(m).addClass(g)}var p=this.getCalculatedOffset(g,j,k,l);this.applyPlacement(p,g);var q=function(){d.$element.trigger("shown.bs."+d.type),d.hoverState=null};a.support.transition&&this.$tip.hasClass("fade")?e.one("bsTransitionEnd",q).emulateTransitionEnd(150):q()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top=b.top+g,b.left=b.left+h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=k.left?2*k.left-e+i:2*k.top-f+j,m=k.left?"left":"top",n=k.left?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(l,d[0][n],m)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c,a?50*(1-a/b)+"%":"")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(){function b(){"in"!=c.hoverState&&d.detach(),c.$element.trigger("hidden.bs."+c.type)}var c=this,d=this.tip(),e=a.Event("hide.bs."+this.type);return this.$element.removeAttr("aria-describedby"),this.$element.trigger(e),e.isDefaultPrevented()?void 0:(d.removeClass("in"),a.support.transition&&this.$tip.hasClass("fade")?d.one("bsTransitionEnd",b).emulateTransitionEnd(150):b(),this.hoverState=null,this)},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName;return a.extend({},"function"==typeof c.getBoundingClientRect?c.getBoundingClientRect():null,{scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop(),width:d?a(window).width():b.outerWidth(),height:d?a(window).height():b.outerHeight()},d?{top:0,left:0}:b.offset())},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.width&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;(e||"destroy"!=b)&&(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.2.0",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").empty()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},c.prototype.tip=function(){return this.$tip||(this.$tip=a(this.options.template)),this.$tip};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){var e=a.proxy(this.process,this);this.$body=a("body"),this.$scrollElement=a(a(c).is("body")?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",e),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.2.0",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b="offset",c=0;a.isWindow(this.$scrollElement[0])||(b="position",c=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var d=this;this.$body.find(this.selector).map(function(){var d=a(this),e=d.data("target")||d.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[b]().top+c,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){d.offsets.push(this[0]),d.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<=e[0])return g!=(a=f[0])&&this.activate(a);for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(!e[a+1]||b<=e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,a(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.2.0",c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a")[0],f=a.Event("show.bs.tab",{relatedTarget:e});if(b.trigger(f),!f.isDefaultPrevented()){var g=a(d);this.activate(b.closest("li"),c),this.activate(g,g.parent(),function(){b.trigger({type:"shown.bs.tab",relatedTarget:e})})}}},c.prototype.activate=function(b,c,d){function e(){f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),b.addClass("active"),g?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu")&&b.closest("li.dropdown").addClass("active"),d&&d()}var f=c.find("> .active"),g=d&&a.support.transition&&f.hasClass("fade");g?f.one("bsTransitionEnd",e).emulateTransitionEnd(150):e(),f.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this},a(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(c){c.preventDefault(),b.call(a(this),"show")})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.2.0",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=a(document).height(),d=this.$target.scrollTop(),e=this.$element.offset(),f=this.options.offset,g=f.top,h=f.bottom;"object"!=typeof f&&(h=g=f),"function"==typeof g&&(g=f.top(this.$element)),"function"==typeof h&&(h=f.bottom(this.$element));var i=null!=this.unpin&&d+this.unpin<=e.top?!1:null!=h&&e.top+this.$element.height()>=b-h?"bottom":null!=g&&g>=d?"top":!1;if(this.affixed!==i){null!=this.unpin&&this.$element.css("top","");var j="affix"+(i?"-"+i:""),k=a.Event(j+".bs.affix");this.$element.trigger(k),k.isDefaultPrevented()||(this.affixed=i,this.unpin="bottom"==i?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(j).trigger(a.Event(j.replace("affix","affixed"))),"bottom"==i&&this.$element.offset({top:b-this.$element.height()-h}))}}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},d.offsetBottom&&(d.offset.bottom=d.offsetBottom),d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
/**
 * Application base
 * @author Martin Vach
 */

//Define an angular module for our app
var myApp = angular.module('myApp', [
    'ngRoute',
    'ngCookies',
    'myAppConfig',
    'myAppController',
    'myAppFactory',
    'myAppService',
    'colorpicker.module',
    'angularFileUpload'

]);

//Define Routing for app
myApp.config(['$routeProvider', function($routeProvider) {
        var cfg = config_data.cfg;
        $routeProvider.
                // Login
                when('/', {
                    //redirectTo: '/elements/dashboard/1'
                    templateUrl: 'app/views/login/login.html'
                }).
                 // Home
                when('/home', {
                   redirectTo: '/elements/dashboard/1'
                }).
                // Elements
                when('/elements/:filter?/:val?/:name?', {
                    templateUrl: 'app/views/elements/elements.html',
                    requireLogin: true
                }).
                // Element
                when('/element/:id', {
                    templateUrl: 'app/views/elements/element.html',
                    requireLogin: true,
                    roles: cfg.role_access.element
                }).
                // Rooms
                when('/rooms', {
                    templateUrl: 'app/views/rooms/rooms.html',
                    requireLogin: true,
                    roles: cfg.role_access.rooms
                }).
                // Events
                when('/events/:param?/:val?', {
                    templateUrl: 'app/views/events/events.html',
                     requireLogin: true
                }).
                //Admin
                when('/admin', {
                    templateUrl: 'app/views/admin/admin.html',
                    requireLogin: true,
                    roles: cfg.role_access.admin
                }).
                //Admin detail
                when('/admin/user/:id', {
                    templateUrl: 'app/views/admin/admin_user.html',
                    requireLogin: true,
                    roles: cfg.role_access.admin_user
                }).
                //My Access
                when('/myaccess', {
                    templateUrl: 'app/views/myaccess/myaccess.html',
                    requireLogin: true,
                    roles: cfg.role_access.myaccess
                }).
                //Apps
                when('/apps', { 
                    templateUrl: 'app/views/apps/apps.html',
                     requireLogin: true,
                    roles: cfg.role_access.apps
                }).
                //Apps - local detail
                when('/apps/local/:id', {
                    templateUrl: 'app/views/apps/app_local_detail.html',
                    requireLogin: true,
                    roles: cfg.role_access.apps_local
                }).
                //Apps - online detail
                when('/apps/online/:id', {
                    templateUrl: 'app/views/apps/app_online_detail.html',
                    requireLogin: true,
                   roles: cfg.role_access.apps_online
                }).
                //Module
                when('/module/:action/:id', {
                    templateUrl: 'app/views/apps/app_module_alpaca.html',
                    requireLogin: true,
                    roles: cfg.role_access.module
                }).
                //Devices_
                when('/devices', {
                    templateUrl: 'app/views/devices/devices.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //Zwave device
                when('/devices/zwave/:brandname?', {
                    templateUrl: 'app/views/devices/devices_zwave.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //IP camera device
                when('/devices/ipcamera', {
                    templateUrl: 'app/views/devices/devices_ipcamera.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //IP camera device
               /* when('/devices/enocean/:brandname?', {
                    templateUrl: 'app/views/devices/devices_enocean.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).*/
                //Include Zwave device
                when('/include/:device?', {
                    templateUrl: 'app/views/devices/device_include.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices_include
                }).
                //Enocean Devices
                when('/enocean/devices/:brandname?', {
                    templateUrl: 'app/views/enocean/devices.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //Enocean Teach-In
                when('/enocean/teachin/:device', {
                    templateUrl: 'app/views/enocean/teachin.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //Enocean devices
                when('/enocean/manage', {
                    templateUrl: 'app/views/enocean/manage.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //Enocean device manage
                when('/enocean/manage/:deviceId', {
                    templateUrl: 'app/views/enocean/manage_detail.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //Enocean controller
                when('/enocean/controller', {
                    templateUrl: 'app/views/enocean/controller.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //Enocean assign profile
                when('/enocean/assign', {
                    templateUrl: 'app/views/enocean/assign.html',
                    requireLogin: true,
                    roles: cfg.role_access.devices
                }).
                //Rooms
                when('/config-rooms', {
                    templateUrl: 'app/views/rooms/config_rooms.html',
                    requireLogin: true,
                    roles: cfg.role_access.config_rooms
                }).
                when('/config-rooms/:id', {
                    templateUrl: 'app/views/rooms/config_rooms_edit.html',
                    requireLogin: true,
                    roles: cfg.role_access.config_rooms_id
                }).
                //Network
                when('/network', {
                    templateUrl: 'app/views/network/network.html',
                    requireLogin: true
                }).
                //Network config
                when('/network/config/:nodeId', {
                    templateUrl: 'app/views/network/config.html',
                    requireLogin: true,
                    roles: cfg.role_access.network_config_id
                }).
                //Device configuration
                when('/deviceconfig/:nodeId', {
                    templateUrl: 'app/views/expertui/configuration.html',
                    requireLogin: true
                }).
                //Report
                when('/report', {
                    templateUrl: 'app/views/report/report.html',
                    requireLogin: true
                }).
                //Login
                when('/login', {
                    redirectTo: '/'
                    //templateUrl: 'app/views/login/login.html',
                }).
                //Login
                when('/logout', {
                    templateUrl: 'app/views/login/logout.html',
                    requireLogin: true
                }).
                // Error page
                when('/error/:code?', {
                    templateUrl: 'app/views/error.html'
                }).
                // Test
                when('/test', {
                    templateUrl: 'app/views/test.html'
                }).
                otherwise({
                    redirectTo: '/error/404'
                });
    }]);

/**
 * App configuration
 */

//myApp.config([
//    "$routeProvider",
//    "$httpProvider",
//    function($routeProvider, $httpProvider){
//        $httpProvider.defaults.headers.common['Access-Control-Allow-Headers'] = '*';
//    }
//]);

var config_module = angular.module('myAppConfig', []);

angular.forEach(config_data, function(key, value) {
    config_module.constant(value, key);
});

/**
 * Route Access Control and Authentication
 */
myApp.run(function($rootScope, $location, dataService) {
    $rootScope.$on("$routeChangeStart", function(event, next, current) {
        var user;
        if (next.requireLogin) {
            user = dataService.getUser();
            if (!user) {
                //alert('You need to be authenticated to see this page!');
                //event.preventDefault();
                $location.path('/');
                return;
            }
            if (next.roles && angular.isArray(next.roles)) {
                if (next.roles.indexOf(user.role) === -1) {
                    //alert('You have no permissions to see this page!');
                    //$location.path('/elements');
                     $location.path('/error/403');
                    return;
                }
            }
        }
    });
});

// Intercepting HTTP calls with AngularJS.
myApp.config(function($provide, $httpProvider) {
    $httpProvider.defaults.timeout = 5000;
    // Intercept http calls.
    $provide.factory('MyHttpInterceptor', function($q,$location,dataService) {
         var path = $location.path().split('/');
        return {
            // On request success
            request: function(config) {
                // Return the config or wrap it in a promise if blank.
                return config || $q.when(config);
            },
            // On request failure
            requestError: function(rejection) {
                // Return the promise rejection.
                return $q.reject(rejection);
            },
            // On response success
            response: function(response) {
                // Return the response or promise.
                return response || $q.when(response);
            },
            // On response failture
            responseError: function(rejection) {
                dataService.logError(rejection);
               if(rejection.status == 401){
                  
                   //$cookies.user = undefined;
                   if(path[1] !== ''){
                        dataService.logOut();
                   }
                   return $q.reject(rejection);
                    
                }else if(rejection.status == 403){
                    $location.path('/error/403');
                    return $q.reject(rejection);
                }else{
                    // Return the promise rejection.
                    return $q.reject(rejection);
                }
                //
                
            }
        };
    });

    // Add the interceptor to the $httpProvider.
    $httpProvider.interceptors.push('MyHttpInterceptor');

});



/**
 * Application factories
 * @author Martin Vach
 */
var myAppFactory = angular.module('myAppFactory', []);

/**
 * Caching the river...
 */
myAppFactory.factory('myCache', function($cacheFactory) {
    return $cacheFactory('myData');
});

/**
 * Main data factory
 */
myAppFactory.factory('dataFactory', function($http, $filter, $q, myCache, dataService, cfg) {
    var updatedTime = Math.round(+new Date() / 1000);
    var lang = cfg.lang;
    var ZWAYSession = dataService.getZWAYSession();
    var user = dataService.getUser();
    if (user) {
        lang = user.lang;

    }
    return({
        logInApi: logInApi,
        getApiLocal: getApiLocal,
        getApi: getApi,
        deleteApi: deleteApi,
        postApi: postApi,
        putApi: putApi,
        storeApi: storeApi,
        runApiCmd: runApiCmd,
        getRemoteData: getRemoteData,
        refreshApi: refreshApi,
        runExpertCmd: runExpertCmd,
        xmlToJson: xmlToJson,
        uploadApiFile: uploadApiFile,
        putCfgXml: putCfgXml,
        //getJSCmd: getJSCmd,
        refreshZwaveApiData: refreshZwaveApiData,
        getSystemCmd: getSystemCmd,
        getLanguageFile: getLanguageFile,
        loadZwaveApiData: loadZwaveApiData,
        joinedZwaveData: joinedZwaveData,
        runZwaveCmd: runZwaveCmd,
        loadEnoceanDevices: loadEnoceanDevices,
        runEnoceanCmd: runEnoceanCmd,
        dataEnoceanCmd: dataEnoceanCmd,
        refreshEnoceanDevices: refreshEnoceanDevices,
        getLicense: getLicense,
        zmeCapabilities: zmeCapabilities,
        postReport: postReport,
        installOnlineModule: installOnlineModule,
        restoreFromBck: restoreFromBck
    });

    /// --- Public functions --- ///

    // Post api data
    function logInApi(data) {
        return $http({
            method: "post",
            data: data,
            url: cfg.server_url + cfg.api['login']
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong
            //return response;
            return $q.reject(response);
        });
    }

    /**
     * Gets api local data
     */
    function getApiLocal(file) {
        return $http({
            method: 'get',
            url: cfg.local_data_url + file
        }).then(function(response) {
            if (typeof response.data === 'object') {
                return response;
            } else {// invalid response
                return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });

    }

    /**
     * API data
     */
    // Get api data
    function getApi(api, params, noCache) {
        // Cached data
        var cacheName = api + (params || '');
        var cached = myCache.get(cacheName);

        if (!noCache && cached) {
            var deferred = $q.defer();
            deferred.resolve(cached);
            return deferred.promise;
        }
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.api[api] + (params ? params : ''),
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
                        //'Accept-Encoding': 'gzip, deflate',
                        //'Allow-compression': 'gz' 
            }
        }).then(function(response) {
            if (!angular.isDefined(response.data)) {
                return $q.reject(response);
            }
            if (typeof response.data === 'object') {
                myCache.put(cacheName, response);
                return response;
            } else {// invalid response
                return $q.reject(response);
            }

        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }
    // Post api data
    function postApi(api, data, params) {
        return $http({
            method: "post",
            data: data,
            url: cfg.server_url + cfg.api[api] + (params ? params : ''),
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    // Put api data
    function putApi(api, id, data, params) {
        return $http({
            method: "put",
            data: data,
            url: cfg.server_url + cfg.api[api] + (id ? '/' + id : '') + (params ? params : ''),
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong

            return $q.reject(response);
        });
    }

    // POST/PUT api data
    function storeApi(api, id, data, params) {
        return $http({
            method: id ? 'put' : 'post',
            data: data,
            url: cfg.server_url + cfg.api[api] + (id ? '/' + id : '') + (params ? params : ''),
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong

            return $q.reject(response);
        });
    }

    // Delete api data
    function deleteApi(api, id, params) {
        return $http({
            method: 'delete',
            url: cfg.server_url + cfg.api[api] + "/" + id + (params ? params : ''),
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong

            return $q.reject(response);
        });

    }

    /**
     * Run api command
     */
    function runApiCmd(cmd) {
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.api_url + "devices/" + cmd,
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            if (response.data.code == 200) {
                return response;
            } else {// invalid response
                return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    // Run expert cmd
    function runExpertCmd(param) {
        return $http({
            method: 'post',
            url: cfg.server_url + cfg.zwaveapi_run_url + param
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong

            return $q.reject(response);
        });

    }

    /**
     * Get config XML file
     */
    function xmlToJson(url, noCache) {
        // Cached data
        var cacheName = 'cache_' + url;
        var cached = myCache.get(cacheName);

        if (!noCache && cached) {
            var deferred = $q.defer();
            deferred.resolve(cached);
            return deferred.promise;
        }
        // NOT Cached data
        return $http({
            method: 'get',
            url: url
        }).then(function(response) {
            var x2js = new X2JS();
            var json = x2js.xml_str2json(response.data);
            if (json) {
                myCache.put(cacheName, json);
                return json;
            } else {// invalid response
                return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    /**
     * Put config XML file
     */
    function putCfgXml(data) {
        return $http({
            method: "PUT",
            url: cfg.server_url + cfg.cfg_xml_url,
            data: data,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong

            return $q.reject(response);
        });
        return;
    }
    /**
     * Get api js command
     */
//    function getJSCmd(cmd) {
//        return $http({
//            method: 'get',
//            url: cfg.server_url + cfg.zwave_jsrun_url + cmd
//        }).then(function(response) {
//            //return response;
//            if (typeof response.data === 'string') {
//                return response;
//            } else {// invalid response
//                return $q.reject(response);
//            }
//        }, function(response) {// something went wrong
//            return $q.reject(response);
//        });
//    }


    /**
     * Get remote data
     */
    // Get
    function getRemoteData(url, noCache) {
        // Cached data
        var cacheName = 'cache_' + url;
        var cached = myCache.get(cacheName);

        if (!noCache && cached) {
            var deferred = $q.defer();
            deferred.resolve(cached);
            return deferred.promise;
        }
        // NOT Cached data
        return $http({
            method: 'get',
            url: url,
            headers: {
                'Accept-Language': lang
            }
        }).then(function(response) {
            return response;
        }, function(error) {// something went wrong

            return $q.reject(error);
        });
    }

    // Refresh api data
    function refreshApi(api, params) {
        //console.log('?since=' + updatedTime)
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.api[api] + '?since=' + updatedTime + (params ? params : ''),
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            if (typeof response.data === 'object') {
                updatedTime = ($filter('hasNode')(response.data, 'data.updateTime') || Math.round(+new Date() / 1000));
                return response;
            } else {// invalid response
                return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    /**
     * Upload file
     */
    function uploadApiFile(cmd, data) {
        var uploadUrl = cfg.server_url + cmd;
        return  $http.post(uploadUrl, data, {
            transformRequest: angular.identity,
            headers: {
                'Content-Type': undefined,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            if (typeof response.data === 'object') {
                return response;
            } else {// invalid response
                return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });

    }

    /**
     * Get system cmd
     */
    function getSystemCmd(cmd) {
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.zwave_api_url + cmd,
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            if (typeof response.data === 'object') {
                return response;
            } else {// invalid response
                return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }


    /**
     * Load language file
     */
    function getLanguageFile(lang) {
        var langFile = lang + '.json';
        var cached = myCache.get(langFile);

        if (cached) {
            var deferred = $q.defer();
            deferred.resolve(cached);
            return deferred.promise;
        }
        return $http({
            method: 'get',
            url: cfg.lang_dir + langFile
        }).then(function(response) {
            if (typeof response.data === 'object') {
                myCache.put(langFile, response);
                return response;
            } else {
                return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    /**
     * Load ZwaveApiData 
     */
    function loadZwaveApiData(noCache) {
        // Cached data
        var cacheName = 'cache_zwaveapidata';
        var cached = myCache.get(cacheName);
        if (!noCache && cached) {
            var deferred = $q.defer();
            deferred.resolve(cached);
            return deferred.promise;
        }
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.zwave_api_url + 'Data/0'
        }).then(function(response) {
            if (typeof response.data === 'object') {
                myCache.put(cacheName, response.data);
                return response.data;
            } else {
                // invalid response
                return $q.reject(response);
            }
        }, function(response) {
            // something went wrong
            return $q.reject(response);
        });
    }

    /**
     * Refresh ZwaveApiData 
     */
    function refreshZwaveApiData() {
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.zwave_api_url + 'Data/' + updatedTime
        }).then(function(response) {
            if (typeof response.data === 'object') {
                updatedTime = ($filter('hasNode')(response, 'data.updateTime') || Math.round(+new Date() / 1000));
                return response;
            } else {
                // invalid response
                return $q.reject(response);
            }
        }, function(response) {
            // something went wrong
            return $q.reject(response);
        });
    }

    /**
     * Get updated data and join with ZwaveData
     */
    function  joinedZwaveData(ZWaveAPIData) {
        var time = Math.round(+new Date() / 1000);
        var cacheName = 'cache_zwaveapidata';
        var apiData = myCache.get(cacheName) || ZWaveAPIData;
        //console.log(apiData)
        var result = {};
        return $http({
            method: 'post',
            url: cfg.server_url + cfg.zwave_api_url + 'Data/' + updatedTime
        }).then(function(response) {
            if (typeof response.data === 'object' && apiData) {
                time = response.data.updateTime;
                angular.forEach(response.data, function(obj, path) {
                    if (!angular.isString(path)) {
                        return;
                    }
                    var pobj = apiData;
                    var pe_arr = path.split('.');
                    for (var pe in pe_arr.slice(0, -1)) {
                        pobj = pobj[pe_arr[pe]];
                    }
                    pobj[pe_arr.slice(-1)] = obj;
                });
                result = {
                    "joined": apiData,
                    "update": response.data
                };
                response.data = result;
                updatedTime = ($filter('hasNode')(response, 'data.updateTime') || Math.round(+new Date() / 1000));
                myCache.put(cacheName, apiData);
                return response;
            } else {
                // invalid response
                return $q.reject(response);
            }
        }, function(response) {
            // something went wrong
            return $q.reject(response);
        });
        return;
    }


    /**
     * Run ExpertUI command
     */
    function runZwaveCmd(cmd) {
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.zwave_api_url + "Run/" + cmd
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    //getEnoceanData: getEnoceanData,
    //runEnoceanCmd: runEnoceanCmd,

    /**
     * Load Enocean devices 
     */
    function loadEnoceanDevices(noCache) {
        // Cached data
        var cacheName = 'cache_enocean';
        var cached = myCache.get(cacheName);
        if (!noCache && cached) {
            var deferred = $q.defer();
            deferred.resolve(cached);
            return deferred.promise;
        }
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.enocean_run_url + 'devices'
        }).then(function(response) {
            if (typeof response.data === 'object') {
                myCache.put(cacheName, response.data);
                return response.data;
            } else {
                // invalid response
                return $q.reject(response);
            }
        }, function(response) {
            // something went wrong
            return $q.reject(response);
        });
    }
    /**
     * Run Enocean command
     */
    function runEnoceanCmd(cmd) {
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.enocean_run_url + cmd
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    /**
     * Data Enocean command
     */
    function dataEnoceanCmd() {
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.enocean_data_url
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    // Refresh Enocean devices 
    function refreshEnoceanDevices() {
        //console.log('?since=' + updatedTime)
        return $http({
            method: 'get',
            url: cfg.server_url + cfg.enocean_run_url + 'data(' + updatedTime + ')',
            /*headers: {
             'Accept-Language': lang,
             'ZWAYSession': ZWAYSession
             }*/
        }).then(function(response) {
            if (typeof response.data === 'object') {
                updatedTime = ($filter('hasNode')(response.data, 'data.updateTime') || Math.round(+new Date() / 1000));
                return response;
            } else {// invalid response
                return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
    }

    /**
     * Get license key
     */
    function getLicense(data) {
        return $http({
            method: 'post',
            url: cfg.license_url,
            data: $.param(data),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        }).then(function(response) {
            if (response.data.license.length > 1) {
                return response.data.license;
            } else {
                // invalid response
                return $q.reject(response);
            }
        }, function(response) {
            // something went wrong
            return $q.reject(response);
        });
    }

    /**
     * Set ZME Capabilities
     */
    function zmeCapabilities(data) {
//        return $q.reject(data); // Test error response
//        var deferred = $q.defer();
//        deferred.resolve(data);
//        return deferred.promise;// Test success response

        return $http({
            method: 'POST',
            url: cfg.server_url + cfg.license_load_url,
            data: $.param({license: data.toString()}),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        }).then(function(response) {
            return response;
        }, function(response) {
            // something went wrong
            return $q.reject(response);
        });

    }
    /**
     * Post report data
     */
    function postReport(data) {
        return $http({
            method: "POST",
            url: cfg.post_report_url,
            data: $.param(data),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
                        //'ZWAYSession': ZWAYSession 
            }
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
        return;
    }
    
    /**
     * Install online module
     */
    function installOnlineModule(data) {
        return $http({
            method: "POST",
             url: cfg.server_url + cfg.api['online_install'],
            data: $.param(data),
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                 'Accept-Language': lang,
                'ZWAYSession': ZWAYSession
            }
        }).then(function(response) {
            return response;
        }, function(response) {// something went wrong
            return $q.reject(response);
        });
        return;
    }

    /**
     * Restore from backup
     */
    function restoreFromBck(data,chip) {
        var uploadUrl = cfg.server_url + cfg.zwave_api_url + 'Restore?restore_chip_info=' + chip;
        return  $http.post(uploadUrl, data, {
            transformRequest: angular.identity,
            headers: {
                'Content-Type': undefined
            }
        }).then(function(response) {
            if (response.data && response.data.replace(/(<([^>]+)>)/ig, "") === "null") {
                return response;
            }else {//Error
                 return $q.reject(response);
            }
        }, function(response) {// something went wrong
            return $q.reject(response);
        });

    }
});


/**
 * Application services
 * @author Martin Vach
 */
var myAppService = angular.module('myAppService', []);

/**
 * Device service
 */
myAppService.service('dataService', function($filter, $log, $cookies, $location, $window,myCache, cfg) {
    /// --- Public functions --- ///
    /**
     * Get language line by key
     */
    this.getLangLine = function(key, languages) {
        if (angular.isObject(languages)) {
            if (angular.isDefined(languages[key])) {
                return languages[key] !== '' ? languages[key] : key;
            }
        }
        return key;
    };
    /**
     * Show connection error
     */
    this.showConnectionError = function(error) {
        $('#update_time_tick').html('<i class="fa fa-minus-circle fa-lg text-danger"></i>');
        return this.logError(error, 'Unable to recieve HTTP data');
    };

    /**
     * Show connection spinner
     */
    this.showConnectionSpinner = function() {
        $('#update_time_tick').html('<i class="fa fa-spinner fa-spin fa-lg text-success"></i>');
        //return this.logError(error,'Unable to recieve HTTP data');
    };

    /**
     * Update time tick
     */
    this.updateTimeTick = function(time) {

        time = (time || Math.round(+new Date() / 1000));
        $('#update_time_tick').html('<i class="fa fa-clock-o text-success"></i> <span class="text-success">' + $filter('getCurrentTime')(time)) + '</span>';
    };


    /**
     * Log error
     */
    this.logError = function(error, message) {
        message = message || 'ERROR:';
        $log.error('---------- ' + message + ' ----------', error);
    };
    /**
     * Log info
     */
    this.logInfo = function(info, message) {
        message = message || 'INFO:';
        $log.info('---------- ' + message + ' ----------', info);
    };


    /**
     * Mobile device detect
     */
    this.isMobile = function(a) {
        return isMobile(a);
    };


    /**
     * Get user data
     */
    this.getUser = function(data) {
        return getUser(data);
    };

    /**
     * Set user data
     */
    this.setUser = function(data) {
        return setUser(data);
    };
    
     /**
     * Get user SID (token)
     */
    this.getZWAYSession = function() {
        return getZWAYSession();
    };
    /**
     * Set user SID (token)
     */
    this.setZWAYSession = function(sid) {
        return setZWAYSession(sid);
    };
     /**
     * Get last login
     */
    this.getLastLogin = function() {
       return getLastLogin();
   };
    
   /*
    * Set last login
    */
   this.setLastLogin = function(val) {
       return setLastLogin(val);
   };
   
   /**
     * Logout
     */
    this.logOut = function() {
        return logOut();

    };

    /**
     * Get data or filtered data
     */
    this.getData = function(data, filter) {
        return getData(data, filter);
    };

    /**
     * Get device data
     */
    this.getDevices = function(data, filter, positions, instances, location) {
        return getDevices(data, filter, positions, instances, location);
    };

    /**
     * Get device types
     */
    this.getDeviceType = function(data) {
        return getDeviceType(data);
    };

    /**
     * Update devices
     */
    this.updateDevices = function(data) {
        return updateDevices(data);
    };

    /**
     * Get chart data
     */
    this.getChartData = function(data, colors) {
        return getChartData(data, colors);
    };

    /**
     * Get tags
     */
    this.getTags = function(data) {
        return getTags(data);
    };

    /**
     * Get instances
     */
    this.getInstances = function(data, modules) {
        return getInstances(data, modules);
    };

    /**
     * Get module form data
     */
    this.getModuleFormData = function(module, data, namespaces) {
        return getModuleFormData(module, data, namespaces);
    };

    /**
     * Get module config input
     */
    this.getModuleConfigInputs = function(module, params, namespaces) {
        return getModuleConfigInputs(module, params, namespaces);
    };

    /**
     * Set array value
     */
    this.setArrayValue = function(data, key, add) {
        return setArrayValue(data, key, add);
    };

    /**
     * Get event level
     */
    this.getEventLevel = function(data, set) {
        return getEventLevel(data, set);
    };

    /**
     * Get pairs
     */
    this.getPairs = function(data, key, val, cache) {
        return getPairs(data, key, val, cache);
    };

    /**
     * Get row by
     */
    this.getRowBy = function(data, key, val, cache) {
        return getRowBy(data, key, val, cache);
    };

    /**
     * Get config navigation devices
     */
    this.configGetNav = function(ZWaveAPIData) {
        return configGetNav(ZWaveAPIData);
    };
    
     /**
     * Set EnOcean profile
     */
    this.setEnoProfile = function(data) {
        return setEnoProfile(data);
    };

    /// --- Private functions --- ///

    /**
     * Mobile device detect
     */
    function isMobile(a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Get user data
     */
    function getUser() {
        var user = ($cookies.user !== 'undefined' ? angular.fromJson($cookies.user) : false);
        return user;
    }

    /**
     * Set user data
     */
    function setUser(data) {
         if(!data){
            delete $cookies['user'];
            return;
        }
        $cookies.user = angular.toJson(data);
        return data;

    }
    /**
     * Get user SID (token)
     */
    function getZWAYSession() {
         return $cookies.ZWAYSession;

    }
    /**
     * Set user SID (token)
     */
    function setZWAYSession(sid) {
        if(!sid){
            delete $cookies['ZWAYSession'];
            return;
        }
        $cookies.ZWAYSession = sid;

    }
    
    /**
     * Get last login
     */
    function getLastLogin() {
        return $cookies.lastLogin !== 'undefined' ? $cookies.lastLogin : false;

    }
    
    /**
     * Set last login
     */
    function setLastLogin(val) {
        $cookies.lastLogin = val;

    }
    
    /**
     * Logout
     */
    function logOut() {
        setUser(null);
        setZWAYSession(null);
        $window.location.href = '#/';
        $window.location.reload();

    }


    /**
     * Get API data or filtered data
     */
    function getData(data, filter) {
        if (!filter) {
            return data;
        }
        var collection = [];
        var addToCollection = false;
        angular.forEach(data, function(v, k) {
            if (angular.isArray(v[filter.filter])) {
                addToCollection = (filter.not ? v[filter.filter].indexOf(filter.val) === -1 : v[filter.filter].indexOf(filter.val) > -1);
                if (addToCollection) {
                    collection.push(v);
                }
            } else {
                addToCollection = (filter.not ? v[filter.filter] != filter.val : v[filter.filter] == filter.val);
                if (addToCollection) {
                    collection.push(v);
                }
            }
        });
        return collection;
    }

    /**
     * Get device data
     */
    function getDevices(data, filter, dashboard, instances, location) {
       var obj;
        var collection = [];
        var onDashboard = false;
        var findZwaveStr = "ZWayVDev_zway_";

        angular.forEach(data, function(v, k) {
            var instance; 
            var hasInstance = false;
            var zwaveId = false;
            var level = $filter('numberFixedLen')(v.metrics.level);
            var rgbColors = false;
            if (v.permanently_hidden || v.deviceType == 'battery') {
                return;
            }
            if (location === 'post' && v.location) {
                return;
            }
            if (location > 0) {
                if (v.location != location && v.location) {
                    return;
                }
            }
           if(instances){
               if (v.id.indexOf(findZwaveStr) > -1) {
                zwaveId = v.id.split(findZwaveStr)[1].split('-')[0];
            } else {
                instance = getRowBy(instances, 'id', v.creatorId);
                if (instance && instance['moduleId'] != 'ZWave') {
                    hasInstance = instance;

                }
            }
           }
            
            if (dashboard && dashboard.indexOf(v.id) !== -1) {
                var onDashboard = true;
            }

            if (v.metrics.color) {
                rgbColors = 'rgb(' + v.metrics.color.r + ',' + v.metrics.color.g + ',' + v.metrics.color.b + ')';
            }
            //console.log('Device id %s has history %s',v.id,v.hasHistory)
            obj = {
                'id': v.id,
                'zwaveId': zwaveId,
                'title': v.metrics.title,
                'metrics': v.metrics,
                'rgbColors': rgbColors,
                'rgbColorsSDefault': rgbColors,
                'tags': v.tags,
                'permanently_hidden': v.permanently_hidden,
                'level': level,
                'icon': v.metrics.icon,
                'probeTitle': v.metrics.probeTitle,
                'scaleTitle': v.metrics.scaleTitle,
                'deviceType': v.deviceType,
                'location': v.location,
                'creatorID': v.creatorId,
                'updateTime': v.updateTime,
                'onDashboard': onDashboard,
                'imgTrans': false,
                'visibility': v.visibility,
                'hasHistory': (v.hasHistory === true ? true : false), 
                'cfg': {
                    'zwaveId': zwaveId,
                    'hasInstance': hasInstance
                }
            };
            if (filter) {
                if (angular.isArray(obj[filter.filter])) {
                    if (obj[filter.filter].indexOf(filter.val) > -1) {
                        collection.push(obj);
                    }
                } else {
                    if (obj[filter.filter] == filter.val) {
                        collection.push(obj);
                    }
                }

            } else {
                collection.push(obj);
            }

        });
        return collection;
    }

    /**
     * Update devices
     */
    function updateDevices(data) {
        var devices = data.data.devices;
        var widgetId;
        if (devices.length > 0) {
            angular.forEach(devices, function(v, k) {
                widgetId = '#Widget_' + v.id;
                updateDeviceLevel(widgetId, v);
                updateDeviceTime(widgetId, v);
                updateDeviceIcon(widgetId, v);
                updateDeviceBtn(widgetId, v);
                //console.log('Update device ID: ' + v.id + ' - level: ' + v.metrics.level)

            });
        }

    }
    /**
     * Update device level
     */
    function updateDeviceLevel(widgetId, v) {
        var level = $filter('numberFixedLen')(v.metrics.level);
        var val;
        if (level !== undefined) {
            switch (v.deviceType) {
                case 'switchMultilevel':
                    val = $filter('getMaxLevel')(level);
                    break;
                default:
                    val = level;
                    break;
            }
            $(widgetId + ' .widget-level').html(val);
            $(widgetId + ' .widget-level-knob').val(val);
        }
        console.log(Math.round(+new Date() / 1000) + ' Update device: ID: ' + v.id + ' - level: ' + val)

    }

    /**
     * Update device time
     */
    function updateDeviceTime(widgetId, v) {
        var time = $filter('isToday')(v.updateTime, true);
        if (time) {
            $(widgetId + ' .widget-update-time').html(time);
        }
        //console.log('Update device: ID: ' + v.id + ' - time: ' + time)
    }

    /**
     * Update device icon
     */
    function updateDeviceIcon(widgetId, v) {

        var icon = $filter('getElementIcon')(v.metrics.icon, v, v.metrics.level);
        if (icon) {
            $(widgetId + ' .widget-image').attr('src', icon);
            $(widgetId + ' .widget-image').removeClass('trans-true');
        }
        //if (v.id == 'ZWayVDev_zway_14-0-37') {
        //console.log('Level: ' + v.metrics.level)
        //console.log('Update device: ' + v.id + ' - icon: ' + icon)
        //}

    }

    /**
     * Update device button
     */
    function updateDeviceBtn(widgetId, v) {
        var status = false;
        switch (v.deviceType) {
            case 'doorlock':
                if (v.metrics.level == 'open') {
                    status = 'on';
                } else {
                    status = 'off';
                }
                break;
            default:
                if (v.metrics.level == 'on') {
                    status = 'on';
                } else {
                    status = 'off';
                }
                break;
        }
        if (status == false) {
            return;
        }
        // if (v.deviceType == 'switchBinary' || v.deviceType == 'switchRGBW') {
        if (status == 'on') {
            $(widgetId + ' .widget-btn-on').removeClass('btn-default').addClass('btn-primary');
            $(widgetId + ' .widget-btn-off').removeClass('btn-primary').addClass('btn-default');
        } else {
            $(widgetId + ' .widget-btn-on').removeClass('btn-primary').addClass('btn-default');
            $(widgetId + ' .widget-btn-off').removeClass('btn-default').addClass('btn-primary');
        }
        //console.log('Update device: ID: ' + v.id + ' - button ' + v.metrics.level)
        //}

    }

    /**
     * Get chart data
     */
    function getChartData(data, colors) {
       
        if (!angular.isObject(data, colors)) {
            return null;
        }
        var currTime = (Math.round(+new Date() / 1000) - 86400);
        var out = {
            labels: [],
            datasets: [{
                    fillColor: colors.fillColor,
                    strokeColor: colors.strokeColor,
                    pointColor: colors.pointColor,
                    pointStrokeColor: colors.pointStrokeColor,
                    data: []
                }]
        };
        var cnt = 0;
        angular.forEach(data, function(v, k) {
            cnt++;
            var time = $filter('date')(((v.id) * 1000), 'H:mm');
            //if (v.id > currTime && out.labels.indexOf(time) === -1) {
            //if (v.id > currTime && (cnt % 2)) {
            if (v.id > currTime && (cnt % 2) === 0) {
                out.labels.push(time);
                //out.labels.push($filter('date')(v.timestamp,'dd.MM.yyyy H:mm'));
                out.datasets[0].data.push(v.l);
            }

        });
        if (out.datasets[0].data.length > 0) {
            return out;
        }
        return null;

    }
    ;

    /**
     * Get instances data
     */
    function getInstances(data, modules) {
        var collection = [];
        var moduleOptions;
        var module;
        var moduleTitle;
        var params;
        angular.forEach(data, function(v, k) {
            params = (!v.params ? [] : v.params);
            module = getRowBy(modules, 'id', v.moduleId);
            if (module) {
                moduleTitle = $filter('hasNode')(module, 'defaults.title');
                moduleOptions = getModuleConfigOptions(module, params);
            }

            collection.push({
                'id': v.id,
                'moduleId': v.moduleId,
                'title': v.title,
                'moduleTitle': moduleTitle,
                'params': params,
                'description': v.description,
                'moduleData': module,
                'moduleOptions': moduleOptions,
                'moduleInput': getModuleConfigInputs(module, params)
            });

        });
        return collection;
    }

    /**
     * Get module form data
     */
    function getModuleFormData(module, data, namespaces) {
        var bind = setModuleFormData(module.options, module.schema, namespaces);
        var collection = {
            'options': bind.options,
            'schema': bind.schema,
            'data': data,
            'postRender': postRenderAlpaca
        };
        return collection;
    }

    /**
     * Set module form data
     */
    function setModuleFormData(options, schema, namespaces) {
        var collection = {
            'options': replaceModuleFormData(options, 'optionLabels', namespaces, 'deviceName'),
            'schema': replaceModuleFormData(schema, 'enum', namespaces, 'deviceId')
        };
        return collection;
    }
    /**
     * Replace module object
     */
    function replaceModuleFormData(obj, key, namespaces, namespaceKey) {
        var objects = [];
        for (var i in obj) {
            if (!obj.hasOwnProperty(i))
                continue;
            if (typeof obj[i] == 'object') {
                objects = objects.concat(replaceModuleFormData(obj[i], key, namespaces, namespaceKey));
            } else if (i == key && !angular.isArray(obj[key])) {
                obj[key] = buildArrayFromNamespaces(obj[key], namespaces, namespaceKey);
            }
        }
        return obj;
    }


    /**
     * Build an array from namespaces
     */
    function buildArrayFromNamespaces(enums, namespaces, namespaceKey) {

        var collection = [];
        var namesp = enums.split(',');
        if (!angular.isArray(namesp)) {
            return false;
        }
        angular.forEach(namesp, function(v, k) {
            var id = v.split(':');
            if (!angular.isArray(id)) {
                return false;
            }
            angular.forEach(namespaces, function(nm, km) {
                if (nm.id == id[1]) {
                    angular.forEach(nm.params, function(i, n) {
                        collection.push(i[namespaceKey]);
                    });
                }
            });
        });

        return collection;
    }
    /**
     * Get device type
     */
    function getDeviceType(data) {
        var collection = [];
        angular.forEach(data, function(v, k) {
            if (v.deviceType == 'battery') {
                return;
            }
            collection.push({
                'key': v.deviceType,
                'val': v.deviceType
            });
        });
        return $filter('unique')(collection, 'key');
    }

    /**
     * Get tags
     */
    function getTags(data) {
        var collection = [];
        angular.forEach(data, function(v, k) {
            if (v.deviceType == 'battery' || v.tags.length < 1) {
                return;
            }
            angular.forEach(v.tags, function(t, k) {
                collection.push({
                    'key': t,
                    'val': t
                });
            });
        });
        return $filter('unique')(collection, 'key');
    }

    /**
     * Set array value
     */
    function setArrayValue(data, key, add) {
        if (add) {
            return addArrayValue(data, key);
        } else {
            return removeArrayValue(data, key);
        }
    }

    /**
     * Add array value
     */
    function addArrayValue(data, key) {
        var collection = data;
        if (collection.indexOf(key) === -1) {
            collection.push(key);
        }
        return collection;
    }

    /**
     * Remove array value
     */
    function removeArrayValue(data, key) {
        var collection = [];
        angular.forEach(data, function(v, k) {
            if (v != key) {
                collection.push(v);
            }
        });
        return collection;
    }

    /**
     * Get event level
     */
    function getEventLevel(data, set) {
        var collection = (set ? set : []);
        angular.forEach(data, function(v, k) {
            collection.push({
                'key': v.level,
                'val': v.level
            });
        });

        return $filter('unique')(collection, 'key');
    }

    /**
     * Get pairs - key => value
     */
    function getPairs(data, key, val, cache) {
        var ret;
        var collection = [];
        var cached = myCache.get(cache);
        // Cached data
        if (cached) {
            return cached;
        }

        // Load data
        angular.forEach(data, function(v, k) {
            if (v[val] != '') {
                collection.push({
                    'key': v[key],
                    'val': v[val]
                });
            }

        });
        ret = $filter('unique')(collection, 'key');
        myCache.put(cache, ret);
        return ret;
    }

    /**
     * Get 1 row by - key => value
     */
    function getRowBy(data, key, val) {
        var collection = null;
        angular.forEach(data, function(v, k) {
            if (v[key] == val) {
                collection = v;
                return;
            }

        });
        return collection;
    }
    
    /**
     * Set EnOcean profile
     */
    function setEnoProfile(data){
        var profile = {};
        angular.forEach(data, function(v, k) {
                var profileId = parseInt(v._rorg, 16) + '_' + parseInt(v._func, 16) + '_' + parseInt(v._type, 16);
                profile[profileId] = v;
                profile[profileId]['id'] = profileId;
                profile[profileId]['rorgInt'] = parseInt(v._rorg, 16);
                profile[profileId]['funcInt'] = parseInt(v._func, 16);
                profile[profileId]['typeInt'] = parseInt(v._type, 16);
            });
        return profile;
    };
});

/**
 * Application directives
 * @author Martin Vach
 */
myApp.directive('testDir', function() {
    return {
        restrict: "E",
        replace: true,
        template: '<p>This is a test directive</p>'
    };
});

myApp.directive('logIt', function() {
    return {
        link: function(scope, elem, attrs) {
            console.log(attrs.logIt);
        }
    };
}
);
/**
 * History go back
 */
myApp.directive('bbGoBack', ['$window', function($window) {
        return {
            restrict: 'A',
            link: function(scope, elem, attrs) {
                elem.bind('click', function() {
                    $window.history.back();
                });
            }
        };
    }]);

/**
 * Page loader directive
 */
myApp.directive('bbLoader', function() {
    return {
        restrict: "E",
        replace: true,
        template: '<div id="loading" ng-show="loading" ng-class="loading.status"><div class="loading-in">'
                + '<i class="fa fa-lg" ng-class="loading.icon"></i> <span ng-bind-html="loading.message|toTrusted"></span>'
                + '</div></div>'
    };
});

/**
 * Alert directive
 */
myApp.directive('bbAlert', function() {
    return {
        restrict: "E",
        replace: true,
        scope: {alert: '='},
        template: '<div class="alert" ng-if="alert.message" ng-class="alert.status">'
                + '<i class="fa fa-lg" ng-class="alert.icon"></i> <span ng-bind-html="alert.message|toTrusted"></span>'
                + '</div>'
    };
});

/**
 * Show validation error
 */
myApp.directive('bbValidator', function($window) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            inputName: '=',
            trans: '=',
            hasBlur: '='
        },
        template: '<div class="valid-error text-danger" ng-if="inputName.$invalid && !inputName.$pristine && hasBlur">*{{trans}}</div>'
    };
});

/**
 * Hide collapsed navi after click on mobile devices
 */
myApp.directive('collapseNavbar', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            $(element).click(function() {
                $("#nav_collapse").removeClass("in").addClass("collapse");
            });
        }
    };
});
/**
 * Go back
 */
myApp.directive('goBack', ['$window', function($window) {
        return {
            restrict: 'A',
            link: function(scope, elem, attrs) {
                elem.bind('click', function() {
                    $window.history.back();
                });
            }
        };
    }]);

/**
 * Knob directive
 */
myApp.directive('knob', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            $(element).val(25).knob();
        }
    };
});

myApp.directive('myknob', ['$timeout', 'dataFactory', function($timeout, dataFactory, dataService) {
        'use strict';

        return {
            restrict: 'A',
            replace: true,
            //template: '<input class="dial" data-width="100" data-height="100" value="{{ knobData }}"/>',
            scope: {
                knobId: '=',
                knobData: '=',
                knobOptions: '&'
            },
            link: function($scope, $element) {
                var knobInit = $scope.knobOptions() || {};

                knobInit.release = function(newValue) {
                    $timeout(function() {
                        $scope.knobData = newValue;
                        runCmdExact($scope.knobId, newValue);
                        $scope.$apply();
                    });
                };

                $scope.$watch('knobData', function(newValue, oldValue) {
                    if (newValue != oldValue) {
                        $($element).val(newValue).change();
                    }
                });

                $($element).val($scope.knobData).knob(knobInit);
            }
        };

        /**
         * Run command exact value
         */
        function runCmdExact(id, val) {
            var cmd = id + '/command/exact?level=' + val;
            dataFactory.runApiCmd(cmd).then(function(response) {
            }, function(error) {
                dataService.logError(error);
            });
            return;
        }
        ;
    }]);
/**
 * Bootstrap tooltip
 */
myApp.directive('tooltip', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            $(element).hover(function() {
                // on mouseenter
                $(element).tooltip('show');
            }, function() {
                // on mouseleave
                $(element).tooltip('hide');
            });
        }
    };
});
/**
 * Bootstrap Popover window
 */
myApp.directive('customPopover', function() {
    return {
        restrict: 'A',
        template: '<span>{{label}}</span>',
        link: function(scope, el, attrs) {
            scope.label = attrs.popoverLabel;
            $(el).popover({
                trigger: 'click',
                html: true,
                content: attrs.popoverHtml,
                placement: attrs.popoverPlacement
            });
        }
    };
});
/**
 * Confirm dialog after click
 */
myApp.directive('ngConfirmClick', [
    function() {
        return {
            priority: -1,
            restrict: 'A',
            link: function(scope, element, attrs) {
                element.bind('click', function(e) {
                    var message = attrs.ngConfirmClick;
                    if (message && !confirm(message)) {
                        e.stopImmediatePropagation();
                        e.preventDefault();
                    }
                });
            }
        };
    }
]);

/**
 * Upload file
 */
myApp.directive('fileModel', ['$parse', function($parse) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                var model = $parse(attrs.fileModel);
                var modelSetter = model.assign;

                element.bind('change', function() {
                    scope.$apply(function() {
                        modelSetter(scope, element[0].files[0]);
                    });
                });
            }
        };
    }]);

myApp.directive('infiniteScroll', [
    '$rootScope', '$window', '$timeout', function($rootScope, $window, $timeout) {
        return {
            link: function(scope, elem, attrs) {
                var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
                $window = angular.element($window);
                scrollDistance = 0;
                if (attrs.infiniteScrollDistance != null) {
                    scope.$watch(attrs.infiniteScrollDistance, function(value) {
                        return scrollDistance = parseInt(value, 10);
                    });
                }
                scrollEnabled = true;
                checkWhenEnabled = false;
                if (attrs.infiniteScrollDisabled != null) {
                    scope.$watch(attrs.infiniteScrollDisabled, function(value) {
                        scrollEnabled = !value;
                        if (scrollEnabled && checkWhenEnabled) {
                            checkWhenEnabled = false;
                            return handler();
                        }
                    });
                }
                handler = function() {
                    var elementBottom, remaining, shouldScroll, windowBottom;
                    windowBottom = $window.height() + $window.scrollTop();
                    elementBottom = elem.offset().top + elem.height();
                    remaining = elementBottom - windowBottom;
                    shouldScroll = remaining <= $window.height() * scrollDistance;
                    if (shouldScroll && scrollEnabled) {
                        if ($rootScope.$$phase) {
                            return scope.$eval(attrs.infiniteScroll);
                        } else {
                            return scope.$apply(attrs.infiniteScroll);
                        }
                    } else if (shouldScroll) {
                        return checkWhenEnabled = true;
                    }
                };
                $window.on('scroll', handler);
                scope.$on('$destroy', function() {
                    return $window.off('scroll', handler);
                });
                return $timeout((function() {
                    if (attrs.infiniteScrollImmediateCheck) {
                        if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
                            return handler();
                        }
                    } else {
                        return handler();
                    }
                }), 0);
            }
        };
    }
]);
/**
 * Key event directive
 */
myApp.directive('bbKeyEvent', function() {
    return function(scope, element, attrs) {
        element.bind("keyup", function(event) {
            if (event.which !== 13) {
                scope.$apply(function() {
                    scope.$eval(attrs.bbKeyEvent);
                });

                event.preventDefault();
            }
        });
    };
});


/**
 * dirPagination - AngularJS module for paginating (almost) anything.
 * 
 * 
 * Credit to https://groups.google.com/d/msg/angular/an9QpzqIYiM/r8v-3W1X5vcJ
 * for the idea on how to dynamically invoke the ng-repeat directive.
 *
 * Created by Michael on 04/05/14.
 */

//angular.module('myApp')
//   .directive('dirPaginate', function($compile, $parse, $timeout, paginationService) {
myApp.directive('dirPaginate', function($compile, $parse, $timeout, paginationService) {
        return  {
            priority: 5000, //High priority means it will execute first
            terminal: true,
            compile: function(element, attrs){
                attrs.$set('ngRepeat', attrs.dirPaginate); //Add ng-repeat to the dom

                var expression = attrs.dirPaginate;
                // regex taken directly from https://github.com/angular/angular.js/blob/master/src/ng/directive/ngRepeat.js#L211
                var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

                var filterPattern = /\|\s*itemsPerPage:\s*\S+\s*/;
                if (match[2].match(filterPattern) === null) {
                    throw "pagination directive: the 'itemsPerPage' filter must be set.";
                }
                var itemsPerPageFilterRemoved = match[2].replace(filterPattern, '');
                var collectionGetter = $parse(itemsPerPageFilterRemoved);

                //Now that we added ng-repeat to the element, proceed with compilation
                //but skip directives with priority 5000 or above to avoid infinite
                //recursion (we don't want to compile ourselves again)
                var compiled =  $compile(element, null, 5000);

                paginationService.paginationDirectiveInitialized = true;

                return function(scope, element, attrs){
                    var currentPageGetter;
                    if (attrs.currentPage) {
                        currentPageGetter = $parse(attrs.currentPage);
                    } else {
                        // if the current-page attribute was not set, we'll make our own
                        scope.__currentPage = 1;
                        currentPageGetter = $parse('__currentPage');
                    }
                    paginationService.setCurrentPageParser(currentPageGetter, scope);

                    scope.$watchCollection(function() {
                        return collectionGetter(scope);
                    }, function(collection) {
                        if (collection) {
                            paginationService.setCollectionLength(collection.length);
                        }
                    });

                    compiled(scope);
                };
            }
        };
    })

    .filter('itemsPerPage', function(paginationService) {
        return function(collection, itemsPerPage) {
            itemsPerPage = itemsPerPage || 9999999999;
            var start = (paginationService.getCurrentPage() - 1) * itemsPerPage;
            var end = start + itemsPerPage;
            paginationService.setItemsPerPage(itemsPerPage);

            return collection.slice(start, end);
        };
    })

    .service('paginationService', function() {
        var itemsPerPage;
        var collectionLength;
        var currentPageParser;
        var context;
        this.paginationDirectiveInitialized = false;

        this.setCurrentPageParser = function(val, scope) {
            currentPageParser = val;
            context = scope;
        };
        this.setCurrentPage = function(val) {
            currentPageParser.assign(context, val);
        };
        this.getCurrentPage = function() {
            return currentPageParser(context);
        };

        this.setItemsPerPage = function(val) {
            itemsPerPage = val;
        };
        this.getItemsPerPage = function() {
            return itemsPerPage;
        };

        this.setCollectionLength = function(val) {
            collectionLength = val;
        };
        this.getCollectionLength = function() {
            return collectionLength;
        };
    })

    .directive('dirPaginationControls', function(paginationService) {

        /**
         * Generate an array of page numbers (or the '...' string) which is used in an ng-repeat to generate the
         * links used in pagination
         *
         * @param currentPage
         * @param dataset
         * @param rowsPerPage
         * @param paginationRange
         * @returns {Array}
         */
        function generatePagesArray(currentPage, collectionLength, rowsPerPage, paginationRange) {
            var pages = [];
            var totalPages = Math.ceil(collectionLength / rowsPerPage);
            var halfWay = Math.ceil(paginationRange / 2);
            var position;

            if (currentPage <= halfWay) {
                position = 'start';
            } else if (totalPages - halfWay < currentPage) {
                position = 'end';
            } else {
                position = 'middle';
            }

            var ellipsesNeeded = paginationRange < totalPages;
            var i = 1;
            while (i <= totalPages && i <= paginationRange) {
                var pageNumber = calculatePageNumber(i, currentPage, paginationRange, totalPages);

                var openingEllipsesNeeded = (i === 2 && (position === 'middle' || position === 'end'));
                var closingEllipsesNeeded = (i === paginationRange - 1 && (position === 'middle' || position === 'start'));
                if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                    pages.push('...');
                } else {
                    pages.push(pageNumber);
                }
                i ++;
            }
            return pages;
        }

        /**
         * Given the position in the sequence of pagination links [i], figure out what page number corresponds to that position.
         *
         * @param i
         * @param currentPage
         * @param paginationRange
         * @param totalPages
         * @returns {*}
         */
        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {
            var halfWay = Math.ceil(paginationRange/2);
            if (i === paginationRange) {
                return totalPages;
            } else if (i === 1) {
                return i;
            } else if (paginationRange < totalPages) {
                if (totalPages - halfWay < currentPage) {
                    return totalPages - paginationRange + i;
                } else if (halfWay < currentPage) {
                    return currentPage - halfWay + i;
                } else {
                    return i;
                }
            } else {
                return i;
            }
        }

        return {
            restrict: 'AE',
            templateUrl:  'app/views/dir-pagination.html',
            scope: {},
            link: function(scope, element, attrs) {
                if (!scope.maxSize) { scope.maxSize = 9; }
                scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : true;
                scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : false;

                if (paginationService.paginationDirectiveInitialized === false) {
                    throw "pagination directive: the pagination controls cannot be used without the corresponding pagination directive.";
                }

                var paginationRange = Math.max(scope.maxSize, 5);
                scope.pages = [];
                scope.pagination = {
                    last: 1,
                    current: 1
                };

                scope.$watch(function() {
                   return paginationService.getCollectionLength() * paginationService.getItemsPerPage();
                }, function(length) {
                    if (0 < length) {
                        generatePagination();
                    }
                });

                scope.$watch(function() {
                    return paginationService.getCurrentPage();
                }, function(currentPage) {
                    scope.pages = generatePagesArray(currentPage, paginationService.getCollectionLength(), paginationService.getItemsPerPage(), paginationRange);
                });

                scope.setCurrent = function(num) {
                    if (/^\d+$/.test(num)) {
                        if (0 < num && num <= scope.pagination.last) {
                            paginationService.setCurrentPage(num);
                            scope.pages = generatePagesArray(num, paginationService.getCollectionLength(), paginationService.getItemsPerPage(), paginationRange);
                            scope.pagination.current = num;
                        }
                    }
                };

                function generatePagination() {
                    scope.pages = generatePagesArray(1, paginationService.getCollectionLength(), paginationService.getItemsPerPage(), paginationRange);
                    scope.pagination.last = scope.pages[scope.pages.length - 1];
               
                    if (scope.pagination.last < scope.pagination.current) {
                        scope.setCurrent(scope.pagination.last);
                    }
                }
            }
        };
    });
/**
 * tc-angular-chartjs - v1.0.2 - 2014-07-17
 * Copyright (c) 2014 Carl Craig <carlcraig@3c-studios.com>
 * Dual licensed with the Apache-2.0 or MIT license.
 */
myApp.directive("tcChartjs", [ "TcChartjsFactory", function(TcChartjsFactory) {
    return new TcChartjsFactory();
} ]).directive("tcChartjsLine", [ "TcChartjsFactory", function(TcChartjsFactory) {
    return new TcChartjsFactory("line");
} ]).directive("tcChartjsBar", [ "TcChartjsFactory", function(TcChartjsFactory) {
    return new TcChartjsFactory("bar");
} ]).directive("tcChartjsRadar", [ "TcChartjsFactory", function(TcChartjsFactory) {
    return new TcChartjsFactory("radar");
} ]).directive("tcChartjsPolararea", [ "TcChartjsFactory", function(TcChartjsFactory) {
    return new TcChartjsFactory("polararea");
} ]).directive("tcChartjsPie", [ "TcChartjsFactory", function(TcChartjsFactory) {
    return new TcChartjsFactory("pie");
} ]).directive("tcChartjsDoughnut", [ "TcChartjsFactory", function(TcChartjsFactory) {
    return new TcChartjsFactory("doughnut");
} ]).factory("TcChartjsFactory", function() {
    return function(chartType) {
        return {
            restrict: "A",
            scope: {
                data: "=chartData",
                options: "=chartOptions",
                id: "@",
                type: "@chartType"
            },
            link: function($scope, $elem) {
                var ctx = $elem[0].getContext("2d");
                var chart = new Chart(ctx);
                $scope.$watch("data", function(value) {
                    if (value) {
                        if (chartType) {
                            chart[cleanChartName(chartType)]($scope.data, $scope.options);
                        } else {
                            chart[cleanChartName($scope.type)]($scope.data, $scope.options);
                        }
                    }
                }, true);
                function cleanChartName(type) {
                    type = type.toLowerCase();
                    switch (type) {
                      case "line":
                        return "Line";

                      case "bar":
                        return "Bar";

                      case "radar":
                        return "Radar";

                      case "polararea":
                        return "PolarArea";

                      case "pie":
                        return "Pie";

                      case "doughnut":
                        return "Doughnut";

                      default:
                        return "";
                    }
                }
            }
        };
    };
});
/**
 * App filters
 * @author Martin Vach
 */
/**
 * Display HTML tags in scope
 */
myApp.filter('toTrusted', ['$sce', function($sce) {
        return function(text) {
            if (text == null) {
                return '';
            }
            return $sce.trustAsHtml(text);
        };
    }]);
/**
 * Strip HTML tags from input
 */
myApp.filter('stripTags', function() {
    return function(text) {
      return String(text).replace(/<[^>]+>/gm, '');
    };
});
/**
 * Cut text into x chars
 */
myApp.filter('cutText', function() {
    return function(value, wordwise, max, tail) {
        if (!value)
            return '';

        max = parseInt(max, 10);
        if (!max)
            return value;
        if (value.length <= max)
            return value;

        value = value.substr(0, max);
        if (wordwise) {
            var lastspace = value.lastIndexOf(' ');
            if (lastspace != -1) {
                value = value.substr(0, lastspace);
            }
        }

        return value + (tail || ' …');
    };
});
/**
 * Convert val to int
 */
myApp.filter('toInt', function() {
    return function(val, a) {
        a = typeof a !== 'undefined' ? a : 10;
        if (isNaN(val)) {
            return 0;
        }
        return parseInt(val, a);
    };
});

/**
 * Get type of a Javascript variable
 */
myApp.filter('typeOf', function() {
    return function(obj) {
         return {}.toString.call(obj).split(' ')[1].slice(0, -1).toLowerCase();
    };
});

/**
 * Set the max dec. lenghth
 */
myApp.filter('numberFixedLen', function() {
    return function(val) {
        if (val == 0) {
            return 0;
        }
        if (!val) {
            return;
        }
        var len = 1;
        var isDec = val.toString().split(".");
        if (isDec.length > 1 && isDec[1].length > len) {
            var num = parseFloat(val);
            if (isNaN(num)) {
                return val;
            } else {
                return num.toFixed(len);
            }

        }
        return val;
    };
});

/**
 * Check if JSON keys/nodes exist
 */
myApp.filter('hasNode', function() {
    return function(obj, path) {
        if (!obj || !path) {
            return null;
        }
        //console.log(path);
        path = path.split('.');
        var p = obj || {};
        for (var i in path) {
            if (p === null || typeof p[path[i]] === 'undefined') {
                return null;
            }
            p = p[path[i]];
        }
        return p;
    };
});
/**
 * Get segment from url
 */
myApp.filter('getUrlSegment', function($location) {
    return function(segment) {
        var ret = false;
        var data = $location.path().split('/');
        if (data[segment]) {
            ret = data[segment];
        }
        return ret;
    };
});
/**
 * Get current time
 */
myApp.filter('getElementIcon', function(cfg) {
    return function(input, device,level) {
        var icon = cfg.img.icons + 'placeholder.png';
        if (input) {
            if ((/^https?:\/\//.test(input))) {
                return input;
            } else if ((/\.(png|gif|jpe?g)$/).test(input)) {
                if (input.indexOf('/') > -1) {
                    return input;
                } else {
                    return cfg.img.icons + input;
                }
            }
            switch (input) {
                case 'door':
                    icon = cfg.img.icons + (level == 'on' ? 'door-open.png' : 'door-closed.png');
                    break;

                case 'switch':
                    icon = cfg.img.icons + (level == 'on' ? 'switch-on.png' : 'switch-off.png');
                    break;

                case 'motion':
                    icon = cfg.img.icons + (level == 'on' ? 'motion-on.png' : 'motion-off.png');
                    break;

                case 'blinds':
                    if (level == 0) {
                        icon = cfg.img.icons + 'blind-down.png';
                    } else if (level >= 99) {
                        icon = cfg.img.icons + 'blind-up.png';
                    } else {
                        icon = cfg.img.icons + 'blind-half.png';
                    }
                    break;

                case 'multilevel':
                    if (level == 0) {
                        icon = cfg.img.icons + 'dimmer-off.png';
                    } else if (level >= 99) {
                        icon = cfg.img.icons + 'dimmer-on.png';
                    } else {
                        icon = cfg.img.icons + 'dimmer-half.png';
                    }
                    break;
                case 'thermostat':
                     icon = cfg.img.icons + (level == 'on' ? 'switch-on.png' : 'switch-off.png');
                    //icon = cfg.img.icons + 'thermostat.png';
                    break;

                case 'energy':
                    icon = cfg.img.icons + 'energy.png';
                    break;

                case 'meter':
                    icon = cfg.img.icons + 'meter.png';
                    break;

                case 'temperature':
                    icon = cfg.img.icons + 'temperature.png';
                    break;

                case 'camera':
                    icon = cfg.img.icons + 'camera.png';
                    break;
                case 'smoke':
                    icon = cfg.img.icons + 'smoke.png';
                    break;
                case 'alarm':
                    icon = cfg.img.icons + 'alarm.png';
                    break;
                case 'battery':
                    icon = cfg.img.icons + 'battery.png';
                    break;
                case 'luminosity':
                    icon = cfg.img.icons + 'luminosity.png';
                    break;
                case 'new':
                    icon = cfg.img.icons + 'new.png';
                    break;
                default:
                    break;
            }

        }
        return icon;
    };
});

/**
 * Get event icon
 */
myApp.filter('getEventIcon', function() {
    return function(input,message) {
        var icon = 'placeholder.png';
        switch (input) {
            case 'device-temperature':
                icon = 'device-temperature.png';
                break;
             case 'device-electric':
                icon = 'device-electric.png';
                break;
             case 'device-power':
                icon = 'device-power.png';
                break;
            case 'device-status':
                icon = 'device-status.png';
                break
            case 'device-OnOff':
                if(angular.isObject(message)){
                    icon = (message.l == 'on'? 'device-on.png': 'device-off.png'); 
                }else{
                    icon = 'device-on.png';
                }
                break
             case 'device-luminiscence':
                icon = 'device-luminiscence.png';
                break
            case 'device':
                icon = 'device.png';
                break
            case 'module':
                icon = 'module.png';
                break
            default:
                break;
        }
        return icon;
    };
});

/**
 * Get battery icon
 */
myApp.filter('getBatteryIcon', function() {
    return function(input) {
        var icon = 'battery.png';
        if (isNaN(input)) {
            return icon;
        }
        var level = parseInt(input);
        if(level > 95){
            icon = 'battery-100.png';
        }else if(level >= 70 && level <= 95){
            icon = 'battery-80.png';
        }else if(level >= 50 && level < 70){
            icon = 'battery-50.png';
        }else if(level > 20 && level < 50){
            icon = 'battery-30.png';
        }else if(level >= 5 && level <= 20){
            icon = 'battery-20.png';
        }else{
            icon = 'battery-0.png';
        }
        return icon;
    };
});

/**
 * Get max level
 */
myApp.filter('getMaxLevel', function() {
    return function(input) {
        var maxLevel = 100;
        var levelVal = (input < 100 ? input : 99);
        return levelVal;
    };
});

/**
 * Today from unix - ExpertUI filter
 */
myApp.filter('isTodayFromUnix', function() {
    return function(input) {
        if(isNaN(input)){
            return '?';
        }
        var d = new Date(input * 1000);
        var day = (d.getDate() < 10 ? '0' + d.getDate() : d.getDate());
        var mon = d.getMonth() + 1; //Months are zero based
        mon = ( mon < 10 ? '0' +  mon :  mon);
        var year = d.getFullYear();
        var hrs = (d.getHours() < 10 ? '0' + d.getHours() : d.getHours());
        var min = (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes());
        var sec = (d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds());

        if (d.toDateString() == (new Date()).toDateString()) {
            //return hrs + ':' + min + ':' + sec;
            return hrs + ':' + min;

        } else {
            //return day + '.' + mon + '.' + year + ' ' + hrs + ':' + min + ':' + sec;
            return day + '.' + mon + '.' + year;
        }
    };
});
/**
 * Get current time
 */
myApp.filter('getCurrentTime', function() {
    return function() {
        var d = new Date();
        var hrs = (d.getHours() < 10 ? '0' + d.getHours() : d.getHours());
        var min = (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes());
        var sec = (d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds());
        var time = hrs + ':' + min + ':' + sec;
        return time;
    };
});
/**
 * Get current time
 */
myApp.filter('unixStartOfDay', function() {
    return function(input, value) {
        var now = new Date();
        var startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        var timestamp = (startOfDay / 1000) + (3600 * 2);
        if (input && value) {
            switch (input) {
                case '+':
                    timestamp += value;
                    break;
                case '-':
                    timestamp -= value;
                    break;
                default:
                    break;
            }
        }
        return timestamp;
    };
});
/**
 * If is today display h:m otherwise d:m:y
 */
myApp.filter('isToday', function() {
    return function(input, fromunix,days,yesterday) {
        if (fromunix) {
            var d = new Date(input * 1000);
            var startDate = new Date(input * 1000);  // 2000-01-01
        } else {
            var d = new Date(input);
            var startDate = new Date(input);  // 2000-01-01
        }


        var hrs = (d.getHours() < 10 ? '0' + d.getHours() : d.getHours());
        var min = (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes());

        if (d.toDateString() == (new Date()).toDateString()) {
            return hrs + ':' + min;

        } else {

            var endDate = new Date();              // Today
            var nDays = diffDays(startDate, endDate) + 1;
            var str = '' + (nDays + 1) + ' ' + days;
            if (nDays < 2) {
                str = yesterday;
            }
            return str;
        }
    };
    // Calculate the number of days between two dates
    function diffDays(d1, d2)
    {
        var ndays;
        var tv1 = d1.valueOf();  // msec since 1970
        var tv2 = d2.valueOf();

        ndays = (tv2 - tv1) / 1000 / 86400;
        ndays = Math.round(ndays - 0.5);
        return ndays;
    }
});

/**
 * If is today display h:m otherwise d:m:y
 */
myApp.filter('eventDate', function() {
    return function(input) {
        var d = new Date(input);
        var day = d.getDate();
        var mon = d.getMonth() + 1; //Months are zero based
        var year = d.getFullYear();
        var hrs = (d.getHours() < 10 ? '0' + d.getHours() : d.getHours());
        var min = (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes());
        var sec = (d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds());

        if (d.toDateString() == (new Date()).toDateString()) {
            return hrs + ':' + min;

        } else {
            return day + '.' + mon + '. -  ' + hrs + ':' + min;
        }
    };
});

/**
 * Get only unique values
 */
myApp.filter('unique', function() {
    return function(items, filterOn) {

        if (filterOn === false) {
            return items;
        }

        if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
            var hashCheck = {}, newItems = [];

            var extractValueToCompare = function(item) {
                if (angular.isObject(item) && angular.isString(filterOn)) {
                    return item[filterOn];
                } else {
                    return item;
                }
            };

            angular.forEach(items, function(item) {
                var valueToCheck, isDuplicate = false;

                for (var i = 0; i < newItems.length; i++) {
                    if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
                        isDuplicate = true;
                        break;
                    }
                }
                if (!isDuplicate) {
                    newItems.push(item);
                }

            });
            items = newItems;
        }
        return items;
    };
});
/**
 * Get uri segment
 */
myApp.filter('uri', function($location) {
    return {
        segment: function(segment) {
            var data = $location.path().split("/");
            if (data[segment]) {
                return data[segment];
            }
            return false;
        },
        total_segments: function() {
            var data = $location.path().split("/");
            var i = 0;
            angular.forEach(data, function(value) {
                if (value.length) {
                    i++;
                }
            });
            return i;
        }
    };
});

/**
 * Display device name
 */
myApp.filter('deviceName', function() {
    return function(deviceId, device) {
        var name = (deviceId == 1 ? 'RaZberry' : 'Device ' + '_' + deviceId);
        if (device === undefined) {
            return name;
        }
        if (device.data.givenName.value != '') {
            name = device.data.givenName.value;
        }
        return name;
    };
});

/**
 * Convert text to slug
 */
myApp.filter('stringToSlug', function() {
    return function(str) {
        str = str.replace(/^\s+|\s+$/g, ''); // trim
        str = str.toLowerCase();

        // remove accents, swap ñ for n, etc
        var from = "àáäâèéëêìíïîòóöôùúüûñç·/_,:;";
        var to = "aaaaeeeeiiiioooouuuunc------";
        for (var i = 0, l = from.length; i < l; i++) {
            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
        }

        str = str.replace(/[^a-z0-9 -]/g, '') // remove invalid chars
                .replace(/\s+/g, '-') // collapse whitespace and replace by -
                .replace(/-+/g, '-'); // collapse dashes

        return str;
    };
});

/**
 * POST/PUT data from Alpaca form
 * @returns false
 */
var postRenderAlpaca = function(renderedForm) {
    $('#btn_module_submit').click(function() {
        var data = postRenderAlpacaData(renderedForm);
        var url = config_data.cfg.server_url + config_data.cfg.api['instances'] + (data.instanceId > 0 ? '/' + data.instanceId : '');
        var type = (data.instanceId > 0 ? 'PUT' : 'POST');
        var sid = $(this).data('sid');
        var lang = $(this).data('lang');
//        console.log(sid)
//        return;
        // submit via ajax
        $.ajax({
            type: type,
            cache: false,
            url: url,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            headers: {
                'Accept-Language': lang,
                'ZWAYSession': sid
            },
            data: JSON.stringify(data),
            beforeSend: function() {
                console.log(data);
                return; 
                //$('.module-spinner').show();
            },
            success: function(response) {
                 $('.module-spinner').fadeOut();
                 window.location.replace("#apps");
                 window.location.reload(true);
            },
            error: function(xhr, ajaxOptions, thrownError) {
                 $('.module-spinner').fadeOut();
                if (xhr.status && xhr.status == 400) {
                    alert(xhr.responseText);
                } else {
                    alert("Something went wrong");
                }
            }
        });
        return false;
    });
};
/**
 * Build form data
 * @returns {Object}
 */
function postRenderAlpacaData(renderedForm) {
    var defaults = ['instanceId', 'moduleId', 'active', 'title', 'description'];
    var alpacaData = {'params': renderedForm.getValue()};
    var formData = $('#form_module').serializeArray();
    var inputData = {};
    $.each(formData, function(k, v) {
        if (defaults.indexOf(v.name) > -1) {
            inputData[v.name] = v.value;
        }

    });
    return $.extend(inputData, alpacaData);
}
/**
 * Application controllers
 * @author Martin Vach
 */

/*** Controllers ***/
var myAppController = angular.module('myAppController', []);
/**
 * Base controller
 */
myAppController.controller('BaseController', function($scope, $cookies, $filter, $location, cfg, dataFactory, dataService) {
    /**
     * Global scopes
     */
    $scope.cfg = cfg;
    $scope.loading = false;
    $scope.alert = {message: false, status: 'is-hidden', icon: false};
    $scope.user = dataService.getUser();
    $scope.ZWAYSession = dataService.getZWAYSession();
    $scope.lastLogin = dataService.getLastLogin();
    $scope.setPollInterval = function() {
        if (!$scope.user) {
            $scope.cfg.interval = $scope.cfg.interval;
        } else {
            $scope.cfg.interval = ($filter('toInt')($scope.user.interval) >= 1000 ? $filter('toInt')($scope.user.interval) : $scope.cfg.interval);
        }

    };
    $scope.setPollInterval();

    $scope.elementAccess = function(roles, mobile) {
        if (!$scope.user) {
            return false;
        }
        // Hide on mobile devices
        if (mobile) {
            return false;
        }
        // Hide for restricted roles
        if (angular.isArray(roles) && roles.indexOf($scope.user.role) === -1) {
            return false;
        }
        return true;
    };

    /**
     * Language settings
     */
    $scope.lang_list = cfg.lang_list;
    // Set language
    $scope.lang = ($scope.user ? $scope.user.lang : cfg.lang);
    $cookies.lang = $scope.lang;

    // Load language files
    $scope.loadLang = function(lang) {
        // Is lang in language list?
        var lang = (cfg.lang_list.indexOf(lang) > -1 ? lang : cfg.lang);
        dataFactory.getLanguageFile(lang).then(function(response) {
            $scope.languages = response.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    // Get language lines
    $scope._t = function(key) {
        return dataService.getLangLine(key, $scope.languages);
    };

    // Watch for lang change
    $scope.$watch('lang', function() {
        $scope.loadLang($scope.lang);
    });

    // Order by
    $scope.orderBy = function(field) {
        $scope.predicate = field;
        $scope.reverse = !$scope.reverse;
    };

    /**
     * Get body ID
     */
    $scope.getBodyId = function() {
        var path = $location.path().split('/');
        if (path[1] == 'elements') {
            switch (path[2]) {
                case 'location':
                    return 'location';
                    break;
                case 'dashboard':
                    return 'dashboard';
                    break;
                default:
                    return 'elements';
                    break;
            }

        } else {
            return path[1] || 'login';
        }

    };

    /**
     * Get current filter
     */
    $scope.getCurrFilter = function(index, val) {
        var path = $location.path().split('/');

    };
    /**
     * Get body ID
     */
    $scope.footer = 'Home footer';
    /**
     *
     * Mobile detect
     */
    $scope.isMobile = dataService.isMobile(navigator.userAgent || navigator.vendor || window.opera);
    /*
     * Menu active class
     */
    $scope.isActive = function(route) {
        return (route === $scope.getBodyId() ? 'active' : '');
    };

    /**
     * Set time
     */
    $scope.setTime = function() {
        dataService.updateTimeTick();
    };
    $scope.setTime();
    /**
     * Redirect to given url
     */
    $scope.redirectToRoute = function(url) {
        if (url) {
            $location.path(url);
        }
    };

});
/**
 * Test controller
 */
myAppController.controller('TestController', function($scope, $routeParams, $filter, $location, $log, $cookies, $timeout, $interval, dataFactory, dataService) {
    $scope.testHeader = function() {
        dataFactory.getRemoteData('http://zwave.eu/api/test/headers/index.php?code=401').then(function(response) {

            dataService.updateTimeTick();
        }, function(error) {

            dataService.showConnectionError(error);
        });
    };
    //$scope.testHeader();
    var master = {
        email: null,
        content: null
    };
    $scope.input = master;
    $scope.store = function(form, input) {
        console.log($scope.input)
        // console.log(input)
        //var original = $scope.input;
        $scope.input = angular.copy($scope.master);
        $scope.form_report.$setPristine();
        console.log(master)
    };
//
//    $scope.fruitArraySource = ['Mango', 'Apple'];
//    $scope.fruitArrayDestination = ['Orange', 'Grapes'];
//    console.log($scope.fruitArrayDestination)
//    angular.copy($scope.fruitArraySource, $scope.fruitArrayDestination);
//    console.log($scope.fruitArrayDestination)

    $scope.fruitArraySourceEx = {id: 25};
    $scope.fruitArrayDestinationEx = {val: 'myName'};
    $scope.fruitArrayDestinationExA = {val: 'myNameRew'};
    $scope.fruitArrayDestinationExB = {blabla: 'ABC'};

    angular.extend($scope.fruitArrayDestinationEx, $scope.fruitArraySourceEx);
    console.log($scope.fruitArrayDestinationEx)
    angular.extend($scope.fruitArrayDestinationEx, $scope.fruitArraySourceEx, $scope.fruitArrayDestinationExA);
    console.log($scope.fruitArrayDestinationEx)
    angular.extend($scope.fruitArrayDestinationEx, $scope.fruitArraySourceEx, $scope.fruitArrayDestinationExA, $scope.fruitArrayDestinationExB);
    console.log($scope.fruitArrayDestinationEx)

});
/**
 * Element controller
 */
myAppController.controller('ElementController', function($scope, $routeParams, $interval, $location, dataFactory, dataService, myCache) {
    $scope.goHidden = [];
    $scope.goHistory = [];
    $scope.apiDataInterval = null;
    $scope.collection = [];
    $scope.showFooter = true;
    $scope.deviceType = [];
    $scope.tags = [];
    $scope.rooms = [];
    $scope.history = [];
    $scope.historyStatus = [];
    $scope.multilineSensor = false;
    $scope.levelVal = [];
    $scope.rgbVal = [];
    $scope.chartOptions = {
        // Chart.js options can go here.
        //responsive: true
    };
    $scope.knobopt = {
        width: 100
    };

    $scope.slider = {
        modelMax: 38
    };
    $scope.input = {
        'id': null,
        'metrics': null,
        'location': null,
        'tags': null,
        'permanently_hidden': false,
        'title': '',
        'dashboard': false,
        'deviceType': null,
        'level': null,
        'hide_events': false
    };

    // Cancel interval on page destroy
    $scope.$on('$destroy', function() {
        $interval.cancel($scope.apiDataInterval);
        $('.modal').remove();
        $('.modal-backdrop').remove();
        $('body').removeClass("modal-open");
    });

    /**
     * Load data into collection
     */
    $scope.loadData = function() {
        dataService.showConnectionSpinner();
        //$scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        dataFactory.getApi('devices').then(function(response) {
            var filter = null;
            var notFound = $scope._t('no_devices') + ' <a href="#devices">' + $scope._t('lb_include_device') + '</a>'
            $scope.loading = false;
            $scope.deviceType = dataService.getDeviceType(response.data.data.devices);
            $scope.tags = dataService.getTags(response.data.data.devices);
            // Filter
            if (angular.isDefined($routeParams.filter) && angular.isDefined($routeParams.val)) {
                switch ($routeParams.filter) {
                    case 'dashboard':
                        $scope.showFooter = false;
                        filter = {filter: "onDashboard", val: true};
                        notFound = $scope._t('no_devices_dashboard');
                        break;
                    case 'deviceType':
                        filter = $routeParams;
                        break;
                    case 'tags':
                        filter = $routeParams;
                        break;
                    case 'location':
                        $scope.showFooter = false;
                        filter = $routeParams;
                        if (angular.isDefined($routeParams.name)) {
                            $scope.headline = $scope._t('lb_devices_room') + ' ' + $routeParams.name;
                        }
                        break;
                    default:
                        break;
                }
            }
            var collection = dataService.getDevices(response.data.data.devices, filter, $scope.user.dashboard, null);
            if (collection.length < 1) {
                $scope.loading = {status: 'loading-spin', icon: 'fa-exclamation-triangle text-warning', message: notFound};
                return;
            }
            $scope.collection = collection;
            dataService.updateTimeTick(response.data.data.updateTime);
        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData();

    /**
     * Refresh data
     */
    $scope.refreshData = function() {
        var refresh = function() {
            dataFactory.refreshApi('devices').then(function(response) {
                dataService.updateDevices(response.data);
                dataService.updateTimeTick(response.data.data.updateTime);
            }, function(error) {
                dataService.showConnectionError(error);
            });
        };
        $scope.apiDataInterval = $interval(refresh, $scope.cfg.interval);
    };

    $scope.refreshData();

    /**
     * Load device history
     */
    $scope.loadDeviceHistory = function(deviceId) {
        $scope.goHistory[deviceId] = !$scope.goHistory[deviceId];
        $scope.history[deviceId] = {data: false, icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        dataFactory.getApi('history', '/' + deviceId + '?show=24', true).then(function(response) {
            if (!response.data.data.deviceHistory) {
                $scope.history[deviceId] = {data: false, icon: 'fa-info-circle text-warning', message: $scope._t('no_data')};
                return;
            }
            var data = dataService.getChartData(response.data.data.deviceHistory, $scope.cfg.chart_colors);
            $scope.history[deviceId] = {data: data};
        }, function(error) {
            $scope.history[deviceId] = {data: false, icon: 'fa-exclamation-triangle text-danger', message: $scope._t('error_load_data')};
        });

    };

    /**
     * Show camera modal window
     */
    $scope.showModal = function(target, input) {
        $scope.input = input;
        $(target).modal();
    };

    /**
     * Show Multiline Sensor modal window
     */
    $scope.loadMultilineSensor = function(target, id, input) {
        $(target).modal();
        $scope.input = input;
        $scope.multilineSensor = {data: false, icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        dataFactory.getApi('devices', '/' + id, true).then(function(response) {
            if (response.data.data.metrics.sensors) {
                $scope.multilineSensor = {data: response.data.data};
            } else {
                $scope.multilineSensor = {data: false, icon: 'fa-info-circle text-warning', message: $scope._t('no_data')};
            }
        }, function(error) {
            $scope.multilineSensor = {data: false, icon: 'fa-exclamation-triangle text-danger', message: $scope._t('error_load_data')};
        });

    };
    /**
     * Run command
     */
    $scope.runCmd = function(cmd, id) {
        runCmd(cmd, id);
    };
    /**
     * Run command exact value
     */
    $scope.runCmdExact = function(id, type, min, max) {
        var count;
        var val = parseInt($scope.levelVal[id]);
        var min = parseInt(min, 10);
        var max = parseInt(max, 10);
        switch (type) {
            case '-':
                count = val - 1;
                break;
            case '+':
                count = val + 1;
                break;
            default:
                count = parseInt(type, 10);
                break;
        }

        if (count < min) {
            count = min;
        }
        if (count > max) {
            count = max;
        }

        var cmd = id + '/command/exact?level=' + count;
        //if (count < 100 && count > 0) {
        $scope.levelVal[id] = count;
        //}

        runCmd(cmd);
        return;
    };

    /**
     * Save color
     */
    $scope.setRBGColor = function(id, color) {
        var array = color.match(/\((.*)\)/)[1].split(',');
        var cmd = id + '/command/exact?red=' + array[0] + '&green=' + array[1] + '&blue=' + array[2];
        runCmd(cmd);
        myCache.remove('devices');
    };
    /**
     * Reset color
     */
    $scope.resetRBGColor = function(id, color) {
        $scope.rgbVal[id] = color;
    };

    /**
     * Process CMD
     */
    function runCmd(cmd, id) {
        var widgetId = '#Widget_' + id;
        dataFactory.runApiCmd(cmd).then(function(response) {
            $(widgetId + ' .widget-image').addClass('trans-true');
        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });
        return;
    }
});
/**
 * Element detail controller controller
 */
myAppController.controller('ElementDetailController', function($scope, $routeParams, $window, $location, dataFactory, dataService, myCache) {
    $scope.input = [];
    $scope.rooms = [];
    $scope.tagList = [];
    $scope.searchText = '';
    $scope.suggestions = [];
    $scope.autoCompletePanel = false;


    /**
     * Load data into collection
     */
    $scope.loadData = function(id) {
        dataService.showConnectionSpinner();
        dataFactory.getApi('devices', '/' + id).then(function(response) {
            var devices = [];
            devices[0] = response.data.data;
            $scope.deviceType = dataService.getDeviceType(devices);
            $scope.tags = dataService.getTags(devices);
            // Loacations
            loadLocations();
            // Instances
            loadInstances(devices);

        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData($routeParams.id);

    /**
     * Load tag list
     */
    $scope.loadTagList = function() {
        dataService.showConnectionSpinner();
        dataFactory.getApi('devices').then(function(response) {
            angular.forEach(response.data.data.devices, function(v, k) {
                if (v.tags) {
                    angular.forEach(v.tags, function(t, kt) {
                        if ($scope.tagList.indexOf(t) === -1) {
                            $scope.tagList.push(t);
                        }

                    });
                }
            });

        }, function(error) {
            alert($scope._t('error_load_data'));
            dataService.showConnectionError(error);
        });
    };
    $scope.loadTagList();



    $scope.itemsSelectedArr = [];
    //$scope.itemsArr = [];

    $scope.searchMe = function(search) {
        $scope.suggestions = [];
        $scope.autoCompletePanel = false;
        if (search.length > 2) {
            var foundText = containsText($scope.tagList, search);
            $scope.autoCompletePanel = (foundText) ? true : false;
        }
    };


    /**
     * Add tag to list
     */
    $scope.addTag = function(searchText) {
        $scope.searchText = '';
        $scope.autoCompletePanel = false;
        if (!searchText || $scope.input.tags.indexOf(searchText) > -1) {
            return;
        }
        $scope.input.tags.push(searchText);
        return;
    };
    /**
     * Remove tag from list
     */
    $scope.removeTag = function(index) {
        $scope.input.tags.splice(index, 1);
        $scope.autoCompletePanel = false;
    };

    /**
     * Update an item
     */
    $scope.store = function(input) {
        if (input.id) {
            $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
            input.location = parseInt(input.location, 10);
            input.metrics.title = input.title;
            dataFactory.putApi('devices', input.id, input).then(function(response) {
                $scope.user.dashboard = dataService.setArrayValue($scope.user.dashboard, input.id, input.dashboard);
                $scope.user.hide_single_device_events = dataService.setArrayValue($scope.user.hide_single_device_events, input.id, input.hide_events);
                updateProfile($scope.user, input.id);

            }, function(error) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
            });
        }

    };
    /**
     * Load locations
     */
    function loadLocations() {
        dataFactory.getApi('locations').then(function(response) {
            $scope.rooms = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;
    /**
     * Load instances
     */
    function loadInstances(devices) {
        if (!$scope.elementAccess($scope.cfg.role_access.apps)) {
            var v = dataService.getDevices(devices, null, $scope.user.dashboard, false)[0];
            setInput(v, devices.updateTime);
            return;
        }
        dataFactory.getApi('instances').then(function(response) {
            var v = dataService.getDevices(devices, null, $scope.user.dashboard, response.data.data)[0];
            setInput(v, response.data.data.updateTime);

        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;

    /**
     * Update profile
     */
    function updateProfile(profileData, deviceId) {
        dataFactory.putApi('profiles', profileData.id, profileData).then(function(response) {
            dataService.setUser(response.data.data);
            $scope.loading = false;
            myCache.remove('devices');
            myCache.remove('devices/' + deviceId);
            myCache.remove('locations');
            $window.history.back();

        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });
        return;
    }

    /// --- Private functions --- ///
    /**
     * Set input
     */
    function setInput(v, updateTime) {
        if (v) {
            $scope.input = {
                'id': v.id,
                'title': v.title,
                'dashboard': v.onDashboard == true ? true : false,
                'location': v.location,
                'tags': v.tags,
                'deviceType': v.deviceType,
                'level': v.level,
                'metrics': v.metrics,
                'updateTime': v.updateTime,
                'cfg': v.cfg,
                'permanently_hidden': v.permanently_hidden,
                //'rooms': $scope.rooms,
                'hide_events': false
            };
            dataService.updateTimeTick(updateTime);
        } else {
            alert($scope._t('no_data'));
            dataService.showConnectionError($scope._t('no_data'));
        }
    }
    ;
    /**
     * Load locations
     */
    function containsText(n, search) {
        var gotText = false;
        for (var i in n) {
            var re = new RegExp(search, "ig");
            var s = re.test(n[i]);
            if (s) {
                $scope.suggestions.push(n[i]);
                gotText = true;
            }
        }
        return gotText;
    }
    ;
});
/**
 * Event controller
 */
myAppController.controller('EventController', function($scope, $routeParams, $interval, $window, $filter, $cookies, $location, dataFactory, dataService, myCache, paginationService, cfg) {
    $scope.collection = [];
    $scope.eventLevels = [];
    $scope.dayCount = [
        {key: 1, val: $scope._t('lb_today')},
        {key: 2, val: $scope._t('lb_yesterday')},
        {key: 3, val: '3 ' + $scope._t('lb_days')},
        {key: 4, val: '4 ' + $scope._t('lb_days')},
        {key: 5, val: '5 ' + $scope._t('lb_days')},
        {key: 6, val: '6 ' + $scope._t('lb_days')},
        {key: 7, val: '7 ' + $scope._t('lb_days')}
    ];

    $scope.eventSources = [];
    //$scope.profileData = [];
    $scope.currLevel = null;
    $scope.timeFilterDefault = {
        since: $filter('unixStartOfDay')(),
        to: $filter('unixStartOfDay')('+', 86400),
        day: 1
    };
    $scope.timeFilter = $scope.timeFilterDefault;
    $scope.currentPage = 1;
    $scope.pageSize = cfg.page_results_events;
    $scope.reset = function() {
        $scope.collection = angular.copy([]);
    };
    $scope.apiDataInterval = null;

    // Cancel interval on page destroy
    $scope.$on('$destroy', function() {
        $interval.cancel($scope.apiDataInterval);
    });

    /**
     * Load data into collection
     */
    $scope.loadData = function() {
        dataService.showConnectionSpinner();
        $scope.timeFilter = (angular.isDefined($cookies.events_timeFilter) ? angular.fromJson($cookies.events_timeFilter) : $scope.timeFilter);
        var urlParam = '?since=' + $scope.timeFilter.since;
        dataFactory.getApi('notifications', urlParam, true).then(function(response) {
            setData(response.data);
            dataService.updateTimeTick(response.data.data.updateTime);
            $scope.loading = false;
        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData();
    /**
     * Change time
     */
    $scope.changeTime = function(day) {
        switch (day) {
            case 1:
                $scope.timeFilter = {
                    since: $filter('unixStartOfDay')(),
                    to: $filter('unixStartOfDay')('+', 86400),
                    day: day
                };
                break;
            case 2:
                $scope.timeFilter = {
                    since: $filter('unixStartOfDay')('-', 86400),
                    to: $filter('unixStartOfDay')(),
                    day: day
                };
                break;
            case 3:
                $scope.timeFilter = {
                    since: $filter('unixStartOfDay')('-', (86400 * 2)),
                    to: $filter('unixStartOfDay')('-', 86400),
                    day: day
                };
                break;
            case 4:
                $scope.timeFilter = {
                    since: $filter('unixStartOfDay')('-', (86400 * 3)),
                    to: $filter('unixStartOfDay')('-', (86400 * 2)),
                    day: day
                };
                break;
            case 5:
                $scope.timeFilter = {
                    since: $filter('unixStartOfDay')('-', (86400 * 4)),
                    to: $filter('unixStartOfDay')('-', (86400 * 3)),
                    day: day
                };
                break;
            case 6:
                $scope.timeFilter = {
                    since: $filter('unixStartOfDay')('-', (86400 * 5)),
                    to: $filter('unixStartOfDay')('-', (86400 * 4)),
                    day: day
                };
                break;
            case 7:
                $scope.timeFilter = {
                    since: $filter('unixStartOfDay')('-', (86400 * 6)),
                    to: $filter('unixStartOfDay')('-', (86400 * 5)),
                    day: day
                };
                break;
            default:
                break;
        }
        $cookies.events_timeFilter = angular.toJson($scope.timeFilter);
        $scope.loadData($scope.timeFilter);
    };

    /**
     * Refresh data
     */
    $scope.refreshData = function() {
        var refresh = function() {
            dataFactory.refreshApi('notifications').then(function(response) {
                dataService.logInfo(response.data.data.notifications, 'Updating notifications');
                angular.forEach(response.data.data.notifications, function(v, k) {
                    $scope.collection.push(v);
                });
                dataService.updateTimeTick(response.data.data.updateTime);
            }, function(error) {
                dataService.showConnectionError(error);
            });
        };
        $scope.apiDataInterval = $interval(refresh, $scope.cfg.interval);
    };
    $scope.refreshData();
    /**
     * Watch for pagination change
     */
    $scope.$watch('currentPage', function(page) {
        paginationService.setCurrentPage(page);
    });

    $scope.setCurrentPage = function(val) {
        $scope.currentPage = val;
    };

    /**
     * Delete event
     */
    $scope.deleteEvent = function(id, params, target, dialog) {
        var confirm = true;
        if (dialog) {
            confirm = $window.confirm(dialog);
        }
        if (confirm) {
            $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('deleting')};
            dataFactory.deleteApi('notifications', id, params).then(function(response) {
                myCache.remove('notifications');
                $scope.loading = false;
                $(target).fadeOut(2000);
            }, function(error) {
                $scope.loading = false;
                alert($scope._t('error_delete_data'));
            });
        }
    };

    /**
     * Hide source events
     */
    $scope.hideSourceEvents = function(deviceId) {
        $scope.user.hide_single_device_events = dataService.setArrayValue($scope.user.hide_single_device_events, deviceId, true);
        updateProfile($scope.user);
    };

    /// --- Private functions --- ///
    /**
     * Set events data
     */
    function setData(data) {
        $scope.collection = [];
        $scope.eventLevels = dataService.getEventLevel(data.data.notifications, [{'key': null, 'val': 'all'}]);
        $scope.eventSources = dataService.getPairs(data.data.notifications, 'source', 'source');
        var filter = null;
        if (angular.isDefined($routeParams.param) && angular.isDefined($routeParams.val)) {
            $scope.currSource = $routeParams.val;
            $scope.currLevel = $routeParams.val;
            filter = $routeParams;
            angular.forEach(data.data.notifications, function(v, k) {
                if (filter && angular.isDefined(v[filter.param])) {
                    if (v[filter.param] == filter.val) {
                        $scope.collection.push(v);
                    }
                }
            });
        } else if (angular.isDefined($routeParams.param) && $routeParams.param == 'source_type') {
            filter = $routeParams;
            angular.forEach(data.data.notifications, function(v, k) {
                if (v.source == filter.source && v.type == filter.type) {
                    $scope.collection.push(v);
                }
            });
        } else {
            $scope.collection = data.data.notifications;
        }
    }
    ;
    /**
     * Update profile
     */
    function updateProfile(profileData) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.putApi('profiles', profileData.id, profileData).then(function(response) {
            //dataService.logInfo(response, 'Updating Devices');
            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_updated')};
            dataService.setUser(response.data.data);
            myCache.remove('notifications');
            $scope.input = [];
            $scope.loadData();

        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });
        return;
    }
});
/**
 * App controller
 */
myAppController.controller('AppController', function($scope, $window, $cookies, $timeout, dataFactory, dataService, myCache) {
    $scope.instances = [];
    $scope.hasImage = [];
    $scope.modules = [];
    $scope.modulesIds = [];
    $scope.moduleImgs = [];
    $scope.onlineModules = [];
    $scope.onlineVersion = [];
    $scope.categories = [];
    $scope.activeTab = (angular.isDefined($cookies.tab_app) ? $cookies.tab_app : 'local');
    $scope.category = '';
    $scope.showFooter = true;
    $scope.modalLocal = {};
    $scope.showInFooter = {
        'categories': true,
        'serach': true
    };
    $scope.moduleMediaUrl = $scope.cfg.server_url + $scope.cfg.api_url + 'load/modulemedia/';
    $scope.onlineMediaUrl = $scope.cfg.online_module_img_url;
    /**
     * Load categories
     */
    $scope.loadCategories = function() {
        dataFactory.getApi('modules_categories').then(function(response) {
            $scope.categories = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    $scope.loadCategories();

    /**
     * Load local modules
     */
    $scope.loadModules = function(filter) {
        // var filter;
//        if ($scope.cfg.app_type === 'default') {
//            if ($scope.user.role === 1 && $scope.user.expert_view) {
//                filter = null;
//            } else {
//                filter = {filter: "state", val: "hidden", not: true};
//            }
//        } else {
//            filter = {filter: "state", val: "hidden", not: true};
//        }
        if ($scope.user.role === 1 && $scope.user.expert_view) {
            filter = null;
        } else {
            filter = {filter: "state", val: "hidden", not: true};
        }
        //filter = {filter: "state", val: "hidden", not: true};
        dataFactory.getApi('modules').then(function(response) {
            $scope.modules = dataService.getData(response.data.data, filter, true);
            angular.forEach(response.data.data, function(v, k) {
                $scope.modulesIds.push(v.id);
                $scope.moduleImgs[v.id] = v.icon;

            });
            $scope.loading = false;
            dataService.updateTimeTick();
        }, function(error) {
            $scope.loading = false;
            dataService.showConnectionError(error);
        });
    };

    /**
     * Load online modules
     */
    $scope.loadOnlineModules = function() {
        //return;
        // Uncomment after integration
        dataFactory.getRemoteData($scope.cfg.online_module_url).then(function(response) {
            $scope.onlineModules = response.data;
            angular.forEach(response.data, function(v, k) {
                if (v.modulename && v.modulename != '') {
                    $scope.onlineVersion[v.modulename] = v.version;
                }
            });
            $scope.loading = false;
            dataService.updateTimeTick();
        }, function(error) {
            $scope.loading = false;
            dataService.showConnectionError(error);
        });
    };
    $scope.loadInstances = function() {
        var filter;
//        if ($scope.cfg.app_type === 'default') {
//            if ($scope.user.role === 1 && $scope.user.expert_view) {
//                filter = null;
//            } else {
//                filter = {filter: "state", val: "hidden", not: true};
//            }
//        } else {
//            filter = {filter: "state", val: "hidden", not: true};
//        }
        if ($scope.user.role === 1 && $scope.user.expert_view) {
            filter = null;
        } else {
            filter = {filter: "state", val: "hidden", not: true};
        }
        dataFactory.getApi('instances').then(function(response) {
            $scope.instances = dataService.getData(response.data.data, filter, true);
            $scope.loading = false;
            dataService.updateTimeTick();
        }, function(error) {
            $scope.loading = false;
            dataService.showConnectionError(error);
        });
    };

    /**
     * Set tab
     */
    $scope.setTab = function(tabId) {
        $scope.activeTab = tabId;
        $cookies.tab_app = tabId;
    };

    // Watch for tab change
    $scope.$watch('activeTab', function() {
        dataService.showConnectionSpinner();
        //$scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        switch ($scope.activeTab) {
            case 'instance':
                $scope.loadModules();
                $scope.showInFooter.categories = false;
                $scope.loadInstances();

                break;
            case 'hidden':
                $scope.showInFooter.categories = false;
                break;
//            case 'online':
//                $scope.loadOnlineModules();
//                $scope.loadModules();
//                $scope.showInFooter.categories = false;
//                break;
            default:
                $scope.showInFooter.categories = true;
                $scope.$watch('category', function() {
                    $scope.modules = angular.copy([]);
                    var filter = false;
                    if ($scope.category != '') {
                        filter = {
                            'filter': 'category',
                            'val': $scope.category
                        };
                    }
                    $scope.loadModules(filter);
                    $scope.loadOnlineModules();
                    $scope.loadInstances();
                });
                break;
        }
    });

    /**
     * Show modal window
     */
    $scope.showModal = function(target, input) {
        $scope.modalLocal = input;
        $(target).modal();
    };

    /**
     * Ictivate instance
     */
    $scope.activateInstance = function(input, activeStatus) {
        input.active = activeStatus;
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        if (input.id) {
            dataFactory.putApi('instances', input.id, input).then(function(response) {
                $scope.loading = false;
                myCache.remove('instances');
                myCache.remove('instances/' + input.moduleId);
                myCache.remove('devices');
                $scope.loadInstances();

            }, function(error) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
            });
        }

    };

    /**
     * Delete instance
     */
    $scope.deleteInstance = function(target, input, dialog) {
        var confirm = true;
        if (dialog) {
            confirm = $window.confirm(dialog);
        }
        if (confirm) {
            dataFactory.deleteApi('instances', input.id).then(function(response) {
                $(target).fadeOut(500);
                myCache.remove('instances');
                myCache.remove('devices');
            }, function(error) {
                alert($scope._t('error_delete_data'));
            });

        }
    };
    /**
     * Delete module
     */
    $scope.deleteModule = function(target, input, dialog) {
        var hasInstance = false;
        angular.forEach($scope.instances, function(v, k) {
            if (input.id == v.moduleId)
                hasInstance = $scope._t('error_module_delete_active') + v.title;
            return;

        });
        if (hasInstance) {
            alert(hasInstance);
            return;
        }
        var confirm = true;
        if (dialog) {
            confirm = $window.confirm(dialog);
        }
        if (confirm) {
            //$scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('deleting')};
            dataFactory.deleteApi('modules', input.id).then(function(response) {
                myCache.remove('modules');
                $(target).fadeOut(2000);
                //$scope.loading = false;

            }, function(error) {
                $scope.loading = false;
                alert($scope._t('error_delete_data'));
            });
        }
    };
    /**
     * Download module
     */
    $scope.downloadModule = function(modulename) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('downloading')};
        var data = {
            moduleUrl: $scope.cfg.online_module_download_url + modulename + '.tar.gz'
        };
        dataFactory.installOnlineModule(data).then(function(response) {
            $timeout(function() {
                $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_module_download')};
            }, 3000);

        }, function(error) {
            $scope.loading = false;
            alert($scope._t('error_no_module_download'));
        });

    };

});
/**
 * App local detail controller
 */
myAppController.controller('AppLocalDetailController', function($scope, $routeParams, $location, dataFactory, dataService) {
    $scope.module = [];
    $scope.isOnline = null;
    $scope.moduleMediaUrl = $scope.cfg.server_url + $scope.cfg.api_url + 'load/modulemedia/';
    /**
     * Load module detail
     */
    $scope.loadModule = function(id) {
        dataService.showConnectionSpinner();
        //$scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        dataFactory.getApi('modules', '/' + id).then(function(response) {
            loadOnlineModules(id);
            $scope.module = response.data.data;
            //$scope.loading = false;

        }, function(error) {
            $scope.loading = false;
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadModule($routeParams.id);

    /// --- Private functions --- ///
    function loadOnlineModules(moduleName) {
        dataFactory.getRemoteData($scope.cfg.online_module_url).then(function(response) {
            $scope.isOnline = dataService.getRowBy(response.data, 'modulename', moduleName);
            dataService.updateTimeTick();
        }, function(error) {
        });
    }

});
/**
 * App online detail controller
 */
myAppController.controller('AppOnlineDetailController', function($scope, $routeParams, $timeout, dataFactory, dataService) {
    $scope.module = [];
    $scope.onlineMediaUrl = $scope.cfg.online_module_img_url;
    /**
     * Load module detail
     */
    $scope.loadModule = function(id) {
        dataService.showConnectionSpinner();
        //$scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        var param = parseInt(id, 10);
        var filter = 'id';
        if (isNaN(param)) {
            filter = 'modulename';
        }
        dataFactory.getRemoteData($scope.cfg.online_module_url).then(function(response) {
            $scope.module = dataService.getRowBy(response.data, filter, id);
            //$scope.loading = false;
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
            $scope.loading = false;
        });
    };

    $scope.loadModule($routeParams.id);

    /**
     * Download module
     */
    $scope.downloadModule = function(id) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('downloading')};
        var data = {
            moduleUrl: $scope.cfg.online_module_download_url + id + '.tar.gz'
        };
        dataFactory.installOnlineModule(data).then(function(response) {
            $timeout(function() {
                $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_module_download')};
            }, 3000);

        }, function(error) {
            $scope.loading = false;
            alert($scope._t('error_no_module_download'));
        });

    };

});
/**
 * App controller - add module
 */
myAppController.controller('AppModuleAlpacaController', function($scope, $routeParams, $filter, $location, dataFactory, dataService, myCache, cfg) {
    $scope.showForm = false;
    $scope.success = false;
    $scope.alpacaData = true;
    $scope.moduleMediaUrl = $scope.cfg.server_url + $scope.cfg.api_url + 'load/modulemedia/';
    $scope.collection = {};
    $scope.input = {
        'instanceId': 0,
        'active': true,
        'moduleId': null,
        'title': null,
        'description': null,
        'moduleTitle': null,
        'category': null
    };

    $scope.onLoad = function() {
        myCache.remove('instances');
    };
    $scope.onLoad();
    // Post new module instance
    $scope.postModule = function(id) {
        dataService.showConnectionSpinner();
        dataFactory.getApi('modules', '/' + id + '?lang=' + $scope.lang).then(function(module) {
            dataFactory.getApi('namespaces').then(function(namespaces) {
                var formData = dataService.getModuleFormData(module.data.data, module.data.data.defaults, namespaces.data.data);
                var langCode = (angular.isDefined(cfg.lang_codes[$scope.lang]) ? cfg.lang_codes[$scope.lang] : null);
                $scope.input = {
                    'instanceId': 0,
                    'moduleId': id,
                    'active': true,
                    'title': $filter('hasNode')(formData, 'data.title'),
                    'description': $filter('hasNode')(formData, 'data.description'),
                    'moduleTitle': $filter('hasNode')(formData, 'data.title'),
                    'icon': $filter('hasNode')(module, 'data.data.icon'),
                    'moduleName': $filter('hasNode')(module, 'data.data.moduleName'),
                    'category': module.data.data.category
                };
                $scope.showForm = true;
                if (!$filter('hasNode')(formData, 'options.fields') || !$filter('hasNode')(formData, 'schema.properties')) {
                    $scope.alpacaData = false;
                    return;
                }
                $.alpaca.setDefaultLocale(langCode);
                $('#alpaca_data').alpaca(formData);
                dataService.updateTimeTick();
            }, function(error) {
                alert($scope._t('error_load_data'));
                dataService.showConnectionError(error);
            });

        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };

    // Put module instance
    $scope.putModule = function(id) {
        if (id < 1) {
            return;
        }
        dataService.showConnectionSpinner();
        dataFactory.getApi('instances', '/' + id, true).then(function(instances) {
            var instance = instances.data.data;
            dataFactory.getApi('modules', '/' + instance.moduleId + '?lang=' + $scope.lang).then(function(module) {
                if (module.data.data.state === 'hidden') {
                    if (!$scope.user.expert_view) {
                        dataService.updateTimeTick();
                        return;
                    }

                }
                dataFactory.getApi('namespaces').then(function(namespaces) {
                    var formData = dataService.getModuleFormData(module.data.data, instance.params, namespaces.data.data);

                    $scope.input = {
                        'instanceId': instance.id,
                        'moduleId': module.data.data.id,
                        'active': instance.active,
                        'title': instance.title,
                        'description': instance.description,
                        'moduleTitle': instance.title,
                        'icon': $filter('hasNode')(module, 'data.data.icon'),
                        'moduleName': $filter('hasNode')(module, 'data.data.moduleName'),
                        'category': module.data.data.category
                    };
                    $scope.showForm = true;
                    if (!$filter('hasNode')(formData, 'options.fields') || !$filter('hasNode')(formData, 'schema.properties')) {
                        $scope.alpacaData = false;
                        return;
                    }

                    $('#alpaca_data').alpaca(formData);

                    dataService.updateTimeTick();
                }, function(error) {
                    alert($scope._t('error_load_data'));
                    dataService.showConnectionError(error);
                });
                dataService.updateTimeTick();
            }, function(error) {
                alert($scope._t('error_load_data'));
                dataService.showConnectionError(error);
            });
        }, function(error) {
            $location.path('/error/' + error.status);
        });

    };
    /**
     * Load data
     */

    switch ($routeParams.action) {
        case 'put':
            $scope.putModule($routeParams.id);
            break;
        case 'post':
            $scope.postModule($routeParams.id);
            break;
        default:
            break;
    }
    /**
     * Store form data
     */
    $scope.store = function(data) {
        var defaults = ['instanceId', 'moduleId', 'active', 'title', 'description'];
        var input = [];
        var params = {};
        angular.forEach(data, function(v, k) {
            if (defaults.indexOf(k) > -1) {
                input[k] = v;
            }
        });

        var inputData = {
            'id': input.instanceId,
            'moduleId': input.moduleId,
            'active': input.active,
            'title': input.title,
            'description': input.description,
            'params': params
        };
        if (input.instanceId > 0) {
            dataFactory.putApi('instances', input.instanceId, inputData).then(function(response) {
                myCache.remove('devices');
                $location.path('/apps');

            }, function(error) {
                alert($scope._t('error_update_data'));
            });
        } else {
            dataFactory.postApi('instances', inputData).then(function(response) {
                myCache.remove('devices');
                $location.path('/apps');

            }, function(error) {
                alert($scope._t('error_update_data'));
            });
        }
    };

});
/**
 * Device controller
 */
myAppController.controller('DeviceController', function($scope, $routeParams, dataFactory, dataService) {
});
/**
 * Device Zwave  controller
 */
myAppController.controller('DeviceZwaveController', function($scope, $routeParams, dataFactory, dataService) {
    $scope.zwaveDevices = [];
    $scope.deviceVendor = false;
    $scope.manufacturers = [];
    $scope.manufacturer = false;
    /**
     * Load z-wave devices
     */
    $scope.loadData = function(brandname, lang) {
        dataService.showConnectionSpinner();
        dataFactory.getApiLocal('device.' + lang + '.json').then(function(response) {
            $scope.manufacturers = dataService.getPairs(response.data, 'brandname', 'brand_image', 'manufacturers');
            if (brandname) {
                $scope.zwaveDevices = dataService.getData(response.data, {'filter': 'brandname', 'val': brandname});
                $scope.manufacturer = brandname;
            }
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    $scope.loadData($routeParams.brandname, $scope.lang);
});
/**
 * Device IP camerae  controller
 */
myAppController.controller('DeviceIpCameraController', function($scope, dataFactory, dataService) {
    $scope.ipcameraDevices = [];
    $scope.moduleMediaUrl = $scope.cfg.server_url + $scope.cfg.api_url + 'load/modulemedia/';
    /**
     * Load ip cameras
     */
    $scope.loadData = function() {
        dataService.showConnectionSpinner();
        dataFactory.getApi('modules').then(function(response) {
            $scope.ipcameraDevices = dataService.getData(response.data.data, {filter: "category", val: "surveillance"});
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    $scope.loadData();
});
/**
 * Device controller
 */
myAppController.controller('IncludeController', function($scope, $routeParams, $interval, $filter, dataFactory, dataService, myCache) {
    $scope.apiDataInterval = null;
    $scope.includeDataInterval = null;
    $scope.device = {
        'data': null
    };
    $scope.controllerState = 0;
    $scope.zwaveApiData = [];
    $scope.includedDeviceId = null;
    $scope.lastIncludedDevice = null;
    $scope.lastExcludedDevice = null;
    $scope.deviceFound = false;
    $scope.checkInterview = false;
    $scope.hasBattery = false;
    $scope.inclusionError = false;
    $scope.clearStepStatus = false;
    $scope.interviewCfg = {
        commandClassesCnt: 0,
        time: 0,
        stop: 0,
        isDone: []
    };

    $scope.nodeId = null;
    $scope.updateDevices = false;
    $scope.zWaveDevice = [];
    $scope.devices = [];
    $scope.dev = [];
    $scope.rooms = [];
    $scope.modelRoom;
    // Cancel interval on page destroy
    $scope.$on('$destroy', function() {
        $interval.cancel($scope.apiDataInterval);
        $interval.cancel($scope.includeDataInterval);
    });

    /**
     * Load data into collection
     */
    $scope.loadData = function(lang) {
        dataService.showConnectionSpinner();
        if (angular.isDefined($routeParams.device)) {
            dataFactory.getApiLocal('device.' + lang + '.json').then(function(response) {
                angular.forEach(response.data, function(v, k) {
                    if (v.id == $routeParams.device) {
                        $scope.device.data = v;
                        return;
                    }
                });

            }, function(error) {
                dataService.showConnectionError(error);
                return;
            });
        }
        return;
    };
    $scope.loadData($scope.lang);

    /**
     * Load data into collection
     */
    $scope.loadZwaveApiData = function() {
        dataFactory.loadZwaveApiData().then(function(ZWaveAPIData) {
            var refresh = function() {
                dataFactory.joinedZwaveData(ZWaveAPIData).then(function(response) {
                    checkController(response.data.update, response.data.joined);
                    dataService.updateTimeTick(response.data.update.updateTime);
                }, function(error) {
                    dataService.showConnectionError(error);
                    return;
                });
            };
            $scope.apiDataInterval = $interval(refresh, $scope.cfg.interval);
        }, function(error) {
            dataService.showConnectionError(error);
            return;
        });
        return;
    };
    $scope.loadZwaveApiData();
    /**
     * Watch for last excluded device
     */
    $scope.$watch('includedDeviceId', function() {
        if ($scope.includedDeviceId) {
            var refresh = function() {
                $scope.deviceFound = false;
                $scope.checkInterview = true;
                dataFactory.loadZwaveApiData(true).then(function(ZWaveAPIData) {
                    //dataFactory.joinedZwaveData($scope.zwaveApiData).then(function(response) {
                    //var ZWaveAPIData = response.data.joined;
                    //var ZWaveAPIData = response;
                    var nodeId = $scope.includedDeviceId;
                    var node = ZWaveAPIData.devices[nodeId];
                    if (!node) {
                        return;
                    }
                    var interviewDone = true;
                    //var instanceId = 0;
                    var hasBattery = false;
                    if (angular.isDefined(ZWaveAPIData.devices[nodeId].instances)) {
                        hasBattery = 0x80 in ZWaveAPIData.devices[nodeId].instances[0].commandClasses;
                    }
                    //var vendor = ZWaveAPIData.devices[nodeId].data.vendorString.value;
                    //var deviceType = ZWaveAPIData.devices[nodeId].data.deviceTypeString.value;
                    $scope.hasBattery = hasBattery;

                    //console.log('CHECK interview -----------------------------------------------------')
                    // Check interview
                    if (ZWaveAPIData.devices[nodeId].data.nodeInfoFrame.value && ZWaveAPIData.devices[nodeId].data.nodeInfoFrame.value.length) {
                        for (var iId in ZWaveAPIData.devices[nodeId].instances) {
                            if (Object.keys(ZWaveAPIData.devices[nodeId].instances[iId].commandClasses).length > 0) {
                                $scope.interviewCfg.commandClassesCnt = Object.keys(ZWaveAPIData.devices[nodeId].instances[iId].commandClasses).length;
                                if ($scope.interviewCfg.stop === 0) {
                                    // Wait 20 seconds after interview start check
                                    $scope.interviewCfg.time = (Math.round(+new Date() / 1000)) + 20;
                                }
                                $scope.interviewCfg.stop = (Math.round(+new Date() / 1000));
                                for (var ccId in ZWaveAPIData.devices[nodeId].instances[iId].commandClasses) {
                                    var notInterviewClass = 'devices.' + nodeId + '.instances.' + iId + '.commandClasses.' + ccId + '.data.interviewDone.value';
                                    // Interview is not done
                                    if (!ZWaveAPIData.devices[nodeId].instances[iId].commandClasses[ccId].data.interviewDone.value) {
                                        interviewDone = false;
                                    } else {  // Interview is done
                                        if ($scope.interviewCfg.isDone.indexOf(notInterviewClass) === -1) {
                                            $scope.interviewCfg.isDone.push(notInterviewClass);
                                        }
                                    }
                                }
                            } else {
                                interviewDone = false;
                            }
                        }

                    } else {
                        interviewDone = false;
                    }
                    if (interviewDone) {
                        $scope.lastIncludedDevice = node.data.givenName.value || 'Device ' + '_' + nodeId;
                        myCache.remove('devices');
                        $scope.includedDeviceId = null;
                        $scope.checkInterview = false;
                        $interval.cancel($scope.includeDataInterval);
                        $scope.nodeId = nodeId;
                        $scope.loadLocations();
                        $scope.loadElements(nodeId);


                    } else {
                        $scope.checkInterview = true;
                    }


                }, function(error) {
                    $scope.inclusionError = true;
                    dataService.showConnectionError(error);
                });
            };
            $scope.includeDataInterval = $interval(refresh, $scope.cfg.interval);

        }
    });

    /**
     * Watch for last excluded device
     */
    $scope.$watch('updateDevices', function() {
        if ($scope.nodeId) {
            $scope.updateDevices = false;
            $scope.loadElements($scope.nodeId);
        }
    });

    /**
     * Watch for last excluded device
     */
    //$scope.$watch('interviewCfg', function() {});


    /**
     * Run ExpertUI command
     */
    $scope.runZwaveCmd = function(cmd) {
        $scope.lastIncludedDevice = null;
        $scope.lastExcludedDevice = null;
        dataFactory.runZwaveCmd(cmd).then(function() {
            myCache.remove('devices');
        }, function(error) {
        });

    };

    /**
     * Load data
     */
    $scope.loadElements = function(nodeId) {
        //console.log('Loading nodeId',nodeId)
        dataService.showConnectionSpinner();
        dataFactory.getApi('devices').then(function(response) {
            zwaveApiData(nodeId, response.data.data.devices);

        }, function(error) {
            dataService.showConnectionError(error);
        });
    };

    /**
     * Load locations
     */
    $scope.loadLocations = function() {
        dataFactory.getApi('locations').then(function(response) {
            $scope.rooms = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;


    /**
     * Assign devices to room
     */
    $scope.devicesToRoom = function(roomId, devices) {
        if (!roomId) {
            return;
        }
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        for (var i = 0; i <= devices.length; i++) {
            var v = devices[i];
            if (!v) {
                continue;
            }
            var input = {
                id: v.id,
                location: roomId
            };
            dataFactory.putApi('devices', v.id, input).then(function(response) {
            }, function(error) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
                return;
            });
        }
        myCache.remove('devices');
        $scope.loadData();
        $scope.loading = false;
        return;

    };
    /**
     * Update device
     */
    $scope.updateDevice = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.putApi('devices', input.id, input).then(function(response) {
            myCache.remove('devices');
            //$scope.loadData($scope.nodeId);
            $scope.updateDevices = true;
            $scope.loading = false;
        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };

    /// --- Private functions --- ///
    /**
     * Check controller data data
     */
    function checkController(data, ZWaveAPIData) {
        //var data = response.data;
        if ('controller.data.controllerState' in data) {
            $scope.controllerState = data['controller.data.controllerState'].value;
            //console.log('controllerState: ', $scope.controllerState)
        }

        if ('controller.data.lastExcludedDevice' in data) {
            $scope.lastExcludedDevice = data['controller.data.lastExcludedDevice'].value;
            //console.log('lastExcludedDevice: ', $scope.lastExcludedDevice)
        }
        if ('controller.data.lastIncludedDevice' in data) {
            var deviceIncId = data['controller.data.lastIncludedDevice'].value;
            if (deviceIncId != null) {
                var givenName = 'Device_' + deviceIncId;
                var cmd = 'devices[' + deviceIncId + '].data.givenName.value=\'' + givenName + '\'';
                dataFactory.runZwaveCmd(cmd).then(function() {
                    $scope.includedDeviceId = deviceIncId;
                    $scope.deviceFound = true;
                    //getLastIncluded(deviceIncId,ZWaveAPIData);
                }, function(error) {
                    dataService.showConnectionError(error);
                });

            }
        }
    }
    ;

    /**
     * Get last included device
     */
//    function getLastIncluded(nodeId, ZWaveAPIData) {
//        if (!$scope.includedDeviceId) {
//            return;
//        }
//        $scope.deviceFound = false;
//        $scope.checkInterview = true;
//        var node = ZWaveAPIData.devices[nodeId];
//        if (!node) {
//            return;
//        }
//        var interviewDone = true;
//        //var instanceId = 0;
//        var hasBattery = false;
//        if (angular.isDefined(ZWaveAPIData.devices[nodeId].instances)) {
//            hasBattery = 0x80 in ZWaveAPIData.devices[nodeId].instances[0].commandClasses;
//        }
//        $scope.hasBattery = hasBattery;
//
//        console.log('CHECK interview NEW -----------------------------------------------------')
//        // Check interview
//        if (ZWaveAPIData.devices[nodeId].data.nodeInfoFrame.value && ZWaveAPIData.devices[nodeId].data.nodeInfoFrame.value.length) {
//             console.log('ZWaveAPIData.devices[nodeId].instances',ZWaveAPIData.devices[nodeId].instances)
//            for (var iId in ZWaveAPIData.devices[nodeId].instances) {
//                if (Object.keys(ZWaveAPIData.devices[nodeId].instances[iId].commandClasses).length > 0) {
//                     console.log('ZWaveAPIData.devices[nodeId].instances[iId].commandClasses).length > 0 -----------------------------------------------------')
//                    $scope.interviewCfg.commandClassesCnt = Object.keys(ZWaveAPIData.devices[nodeId].instances[iId].commandClasses).length;
//                    if ($scope.interviewCfg.stop === 0) {
//                        // Wait 20 seconds after interview start check
//                        $scope.interviewCfg.time = (Math.round(+new Date() / 1000)) + 20;
//                    }
//                    $scope.interviewCfg.stop = (Math.round(+new Date() / 1000));
//                    for (var ccId in ZWaveAPIData.devices[nodeId].instances[iId].commandClasses) {
//                        var notInterviewClass = 'devices.' + nodeId + '.instances.' + iId + '.commandClasses.' + ccId + '.data.interviewDone.value';
//                        // Interview is not done
//                        if (!ZWaveAPIData.devices[nodeId].instances[iId].commandClasses[ccId].data.interviewDone.value) {
//                            interviewDone = false;
//                        } else {  // Interview is done
//                            if ($scope.interviewCfg.isDone.indexOf(notInterviewClass) === -1) {
//                                $scope.interviewCfg.isDone.push(notInterviewClass);
//                            }
//                        }
//                    }
//                } else {
//                    interviewDone = false;
//                }
//            }
//
//        } else {
//            interviewDone = false;
//        }
//        if (interviewDone) {
//            $scope.lastIncludedDevice = node.data.givenName.value || 'Device ' + '_' + nodeId;
//            myCache.remove('devices');
//            $scope.includedDeviceId = null;
//            $scope.checkInterview = false;
//            //$interval.cancel($scope.includeDataInterval);
//            $scope.nodeId = nodeId;
//            $scope.loadLocations();
//            $scope.loadElements(nodeId);
//
//
//        } else {
//            $scope.checkInterview = true;
//        }
//    }
//    ;

    /**
     * Get zwaveApiData
     */
    function zwaveApiData(nodeId, devices) {
        dataFactory.loadZwaveApiData().then(function(ZWaveAPIData) {
            dataService.updateTimeTick();
            var node = ZWaveAPIData.devices[nodeId];
            if (!node) {
                return;
            }

            $scope.zWaveDevice = {
                id: nodeId,
                title: node.data.givenName.value || 'Device ' + '_' + nodeId,
                cfg: []
            };
            // Has config file
            if (angular.isDefined(node.data.ZDDXMLFile) && node.data.ZDDXMLFile.value != '') {
                if ($scope.zWaveDevice['cfg'].indexOf('config') === -1) {
                    $scope.zWaveDevice['cfg'].push('config');
                }
            }
            // Has wakeup
            if (0x84 in node.instances[0].commandClasses) {
                if ($scope.zWaveDevice['cfg'].indexOf('wakeup') === -1) {
                    $scope.zWaveDevice['cfg'].push('wakeup');
                }
            }
            // Has SwitchAll
            if (0x27 in node.instances[0].commandClasses) {
                if ($scope.zWaveDevice['cfg'].indexOf('switchall') === -1) {
                    $scope.zWaveDevice['cfg'].push('switchall');
                }
            }
            // Has protection
            if (0x75 in node.instances[0].commandClasses) {
                if ($scope.zWaveDevice['cfg'].indexOf('protection') === -1) {
                    $scope.zWaveDevice['cfg'].push('protection');
                }
            }
            if ($scope.devices.length > 0) {
                $scope.devices = angular.copy([]);
            }
            var findZwaveStr = "ZWayVDev_zway_";
            angular.forEach(devices, function(v, k) {
                if (v.id.indexOf(findZwaveStr) === -1) {
                    return;
                }
                var cmd = v.id.split(findZwaveStr)[1].split('-');
                var zwaveId = cmd[0];
                var iId = cmd[1];
                var ccId = cmd[2];
                if (zwaveId == nodeId) {
                    var obj = {};
                    obj['id'] = v.id;
                    obj['permanently_hidden'] = v.permanently_hidden;
                    obj['visibility'] = v.visibility;
                    obj['level'] = $filter('toInt')(v.metrics.level);
                    obj['metrics'] = v.metrics;
                    $scope.devices.push(obj);
                }

            });
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;


});
/**
 * Device Enocean  controller
 */
myAppController.controller('DeviceEnoceanController', function($scope, $routeParams, $location, dataFactory, dataService) {
    $scope.hasEnOcean = false;
    $scope.enoceanDevices = [];
    $scope.manufacturers = [];
    $scope.manufacturer = false;

    /**
     * Load Remote access data
     */
    $scope.loadEnOceanModule = function() {
        dataFactory.getApi('instances', '/EnOcean').then(function(response) {
            var module = response.data.data[0];
            if (Object.keys(module).length < 1) {
                $scope.alert = {message: $scope._t('error_load_data'), status: 'alert-danger', icon: 'fa-warning'};
                return;
            }
            if (!module.active) {
                $scope.alert = {message: $scope._t('enocean_not_active'), status: 'alert-warning', icon: 'fa-exclamation-circle'};
                return;
            }
            $scope.hasEnOcean = true;
        }, function(error) {
            if (error.status == 404) {
                $scope.alert = {message: $scope._t('enocean_nosupport'), status: 'alert-danger', icon: 'fa-warning'};
            } else {
                $location.path('/error/' + error.status);
            }

        });
    };

    $scope.loadEnOceanModule();


    /**
     * Load z-wave devices
     */
    $scope.loadData = function(brandname) {
        dataService.showConnectionSpinner();
        dataFactory.getApiLocal('devices_enocean.json').then(function(response) {
            $scope.manufacturers = dataService.getPairs(response.data, 'vendor', 'vendorLogo', 'manufacturers_enocean');
            if (brandname) {
                $scope.enoceanDevices = dataService.getData(response.data, {'filter': 'vendor', 'val': brandname});
                $scope.manufacturer = brandname;
            }
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    $scope.loadData($routeParams.brandname);

});
/**
 * EnOcean devices controller
 */
myAppController.controller('EnoceanDeviceController', function($scope, $routeParams, dataFactory, dataService) {
    $scope.activeTab = 'devices';
    $scope.hasEnOcean = false;
    $scope.enoceanDevices = [];
    $scope.manufacturers = [];
    $scope.manufacturer = false;

    /**
     * Load Remote access data
     */
    $scope.loadEnOceanModule = function() {
        dataFactory.getApi('instances', '/EnOcean').then(function(response) {
            var module = response.data.data[0];
            if (Object.keys(module).length < 1) {
                $scope.alert = {message: $scope._t('error_load_data'), status: 'alert-danger', icon: 'fa-warning'};
                return;
            }
            if (!module.active) {
                $scope.alert = {message: $scope._t('enocean_not_active'), status: 'alert-warning', icon: 'fa-exclamation-circle'};
                return;
            }
            $scope.hasEnOcean = true;
        }, function(error) {
            if (error.status == 404) {
                $scope.alert = {message: $scope._t('enocean_nosupport'), status: 'alert-danger', icon: 'fa-warning'};
            } else {
                $location.path('/error/' + error.status);
            }

        });
    };

    $scope.loadEnOceanModule();


    /**
     * Load z-wave devices
     */
    $scope.loadData = function(brandname) {
        dataService.showConnectionSpinner();
        dataFactory.getApiLocal('devices_enocean.json').then(function(response) {
            $scope.manufacturers = dataService.getPairs(response.data, 'vendor', 'vendorLogo', 'manufacturers_enocean');
            if (brandname) {
                $scope.enoceanDevices = dataService.getData(response.data, {'filter': 'vendor', 'val': brandname});
                $scope.manufacturer = brandname;
            }
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    $scope.loadData($routeParams.brandname);
});
/**
 * EnOcean assign profile controller
 */
myAppController.controller('EnoceanAssignController', function($scope, $interval, dataFactory, dataService, myCache) {
    $scope.activeTab = 'assign';
    $scope.profile = false;
    $scope.device = [];
    $scope.includedDevices = [];
    $scope.lastIncludedDevice = [];
    $scope.enoceanDevices = {};
    $scope.enoceanProfiles = {};
    $scope.apiDevices = [];
    $scope.dev = [];
    $scope.rooms = [];
    $scope.modelRoom;
    $scope.inclusion = {
        promisc: false,
        done: false,
        config: false,
        message: false,
        status: 'is-hidden',
        icon: false
    };
    $scope.apiDataInterval = null;

    // Cancel interval on page destroy
    $scope.$on('$destroy', function() {
        $interval.cancel($scope.apiDataInterval);
    });

    /**
     * Load included devices
     */
    $scope.loadIncludedDevices = function() {
        dataService.showConnectionSpinner();
        dataFactory.loadEnoceanDevices(true).then(function(response) {
            dataService.updateTimeTick();
            angular.forEach(response, function(v, k) {
                $scope.includedDevices.push(v.id);
            });

        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    $scope.loadIncludedDevices();

    /**
     * Load profiles
     */
    $scope.loadProfiles = function() {
        dataFactory.xmlToJson($scope.cfg.server_url + 'config/Profiles.xml').then(function(response) {
            $scope.enoceanProfiles = dataService.setEnoProfile(response.Profiles.Profile);
        }, function(error) {
        });
    }
    ;
    $scope.loadProfiles();

    /**
     * Load locations
     */
    $scope.loadLocations = function() {
        dataFactory.getApi('locations').then(function(response) {
            $scope.rooms = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;
    $scope.loadLocations();


    /**
     * Load API devices
     */
    $scope.loadApiDevices = function() {
        dataFactory.getApi('devices').then(function(response) {
            $scope.apiDevices = [];
            var findZenoStr = "ZEnoVDev_zeno_";
            angular.forEach(response.data.data.devices, function(v, k) {
                if (v.id.indexOf(findZenoStr) === -1) {
                    return;
                }
                var cmd = v.id.split(findZenoStr)[1].split('_');
                var zenoId = cmd[0];
                if (zenoId == $scope.lastIncludedDevice.id) {
                    var obj = {};
                    obj['id'] = v.id;
                    obj['title'] = v.metrics.title;
                    obj['permanently_hidden'] = v.permanently_hidden;
                    obj['visibility'] = v.visibility;
                    obj['metrics'] = v.metrics;
                    $scope.apiDevices.push(obj);
                }

            });

        }, function(error) {
        });
    };


    /**
     * Assign profile
     */
    $scope.loadDevice = function(profile) {
        $interval.cancel($scope.apiDataInterval);
        $scope.device = angular.fromJson(profile);
        $scope.inclusion = {done: false, promisc: true, message: $scope._t('teachin_ready') + ' ' + ($scope.device.inclusion ? $scope.device.inclusion : ''), status: 'alert-warning', icon: 'fa-spinner fa-spin'};
        $scope.runCmd('controller.data.promisc=true');
        $scope.refreshData();
    }
    ;

    /**
     * Refresh data
     */
    $scope.refreshData = function() {
        var refresh = function() {
            var findStr = 'devices';
            dataFactory.refreshEnoceanDevices().then(function(response) {
                if ('controller.data.promisc' in response.data) {
                    var pomisc = response.data['controller.data.promisc'].value;
                    if (pomisc === true) {
                        $scope.inclusion = {done: false, promisc: true, message: $scope._t('teachin_ready') + ' ' + ($scope.device.inclusion ? $scope.device.inclusion : ''), status: 'alert-warning', icon: 'fa-spinner fa-spin'};
                    } else {
                        $scope.inclusion = {done: false, promisc: false, message: $scope._t('teachin_canceled'), status: 'alert-warning', icon: 'fa-exclamation-circle'};
                    }
                    return;
                }

                if ('devices' in response.data) {
                    angular.forEach(response.data.devices, function(v, k) {
                        $scope.findDevice(k);
                    });
                    return;
                }
                angular.forEach(response.data, function(v, k) {
                    var array = k.split('.');
                    if (array.indexOf(findStr) > -1) {
                        $scope.findDevice(array[1]);
                    }
                });
            }, function(error) {
                dataService.showConnectionError(error);
            });
        };
        $scope.apiDataInterval = $interval(refresh, $scope.cfg.interval);
    };



    /**
     * Find last included device
     */
    $scope.findDevice = function(id) {
        var rorg = parseInt($scope.device.rorg);
        dataFactory.loadEnoceanDevices(true).then(function(response) {
            angular.forEach(response, function(v, k) {
                if (v.id == id) {
                    // if (v.data.rorg.value == rorg) {
                    var name = '(#' + v.id + ')';
                    var profile = assignProfile(v.data);
                    if (profile) {
                        name = profile._funcDescription + ' (#' + v.id + ')';
                    }

                    $scope.runCmd('controller.data.promisc=false');
                    $scope.lastIncludedDevice = {
                        id: v.id,
                        rorg: v.data.rorg.value,
                        name: name,
                        data: v.data,
                        deviceProfileId: v.data.rorg.value + '_' + v.data.funcId.value + '_' + v.data.typeId.value,
                        profile: profile
                    };


                    $scope.runCmd('devices["' + v.id + '"].data.funcId=' + $scope.device.funcId);
                    $scope.runCmd('devices["' + v.id + '"].data.typeId=' + +$scope.device.typeId);
                    $interval.cancel($scope.apiDataInterval);
                    $scope.inclusion = {done: true, config: true, promisc: false, message: $scope._t('inclusion_proces_done'), status: 'alert-success', icon: 'fa-check'};
                    $scope.loadApiDevices();
                    dataService.updateTimeTick();
                    return;
                }
                //}
            });

        }, function(error) {
            $scope.inclusion = {done: false, promisc: false, message: $scope._t('inclusion_error'), status: 'alert-danger', icon: 'fa-warning'};
        });

    };

    /**
     * Run CMD
     */
    $scope.runCmd = function(cmd) {
        // Run CMD
        dataFactory.runEnoceanCmd(cmd).then(function(response) {
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
            $scope.inclusion = {done: false, promisc: false, message: $scope._t('inclusion_error'), status: 'alert-danger', icon: 'fa-warning'};

        });
        return;
    };

    /**
     * Update device
     */
    $scope.updateDevice = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.putApi('devices', input.id, input).then(function(response) {
            myCache.remove('devices');
            $scope.loadApiDevices();
            $scope.loading = false;
        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };
    /**
     * Assign devices to room
     */
    $scope.devicesToRoom = function(roomId, devices) {
        if (!roomId) {
            return;
        }
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        for (var i = 0; i <= devices.length; i++) {
            var v = devices[i];
            if (!v) {
                continue;
            }
            var input = {
                id: v.id,
                location: roomId
            };

            dataFactory.putApi('devices', v.id, input).then(function(response) {
            }, function(error) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
                return;
            });
        }
        myCache.remove('devices');
        $scope.loadApiDevices();
        $scope.loading = false;
        return;

    };

    /**
     * Assign profile to device
     */
    function assignProfile() {
        var profile = false;
        var deviceProfileId = parseInt($scope.device.rorg, 16) + '_' + parseInt($scope.device.funcId, 16) + '_' + parseInt($scope.device.typeId, 16);
        angular.forEach($scope.enoceanProfiles, function(v, k) {
            if (deviceProfileId == v.id) {
                console.log(v.id)
                profile = v;
                return;
            }
        });
        return profile;
    }
    ;

});
/**
 * EnOcean teach In controller
 */
myAppController.controller('EnoceanTeachinController', function($scope, $routeParams, $interval, $location, dataFactory, dataService, myCache) {
    $scope.device = [];
    $scope.includedDevices = [];
    $scope.lastIncludedDevice = [];
    $scope.enoceanDevices = {};
    $scope.enoceanProfiles = {};
    $scope.apiDevices = [];
    $scope.dev = [];
    $scope.rooms = [];
    $scope.modelRoom;
    $scope.inclusion = {
        promisc: false,
        done: false,
        config: false,
        message: false,
        status: 'is-hidden',
        icon: false
    };
    $scope.apiDataInterval = null;

    // Cancel interval on page destroy
    $scope.$on('$destroy', function() {
        $interval.cancel($scope.apiDataInterval);
    });

    /**
     * Load included devices
     */
    $scope.loadIncludedDevices = function() {
        dataService.showConnectionSpinner();
        dataFactory.loadEnoceanDevices(true).then(function(response) {
            dataService.updateTimeTick();
            angular.forEach(response, function(v, k) {
                $scope.includedDevices.push(v.id);
            });

        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    $scope.loadIncludedDevices();

    /**
     * Load profiles
     */
    $scope.loadProfiles = function() {
        dataFactory.xmlToJson($scope.cfg.server_url + 'config/Profiles.xml').then(function(response) {
            $scope.enoceanProfiles = dataService.setEnoProfile(response.Profiles.Profile);
        }, function(error) {
        });
    }
    ;
    $scope.loadProfiles();

    /**
     * Load locations
     */
    $scope.loadLocations = function() {
        dataFactory.getApi('locations').then(function(response) {
            $scope.rooms = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;
    $scope.loadLocations();

    /**
     * Load API devices
     */
    $scope.loadApiDevices = function() {
        dataFactory.getApi('devices').then(function(response) {
            $scope.apiDevices = [];
            var findZenoStr = "ZEnoVDev_zeno_";
            angular.forEach(response.data.data.devices, function(v, k) {
                if (v.id.indexOf(findZenoStr) === -1) {
                    return;
                }
                var cmd = v.id.split(findZenoStr)[1].split('_');
                var zenoId = cmd[0];
                if (zenoId == $scope.lastIncludedDevice.id) {
                    var obj = {};
                    obj['id'] = v.id;
                    obj['title'] = v.metrics.title;
                    obj['permanently_hidden'] = v.permanently_hidden;
                    obj['visibility'] = v.visibility;
                    obj['metrics'] = v.metrics;
                    $scope.apiDevices.push(obj);
                }

            });

        }, function(error) {
        });
    };

    /**
     * Load single device
     */
    $scope.loadDevice = function() {
        dataService.showConnectionSpinner();
        dataFactory.getApiLocal('devices_enocean.json').then(function(response) {
            angular.forEach(response.data, function(v, k) {
                if (v.id == $routeParams.device) {
                    $scope.device = v;
                    return;
                }
            });
            if (!$scope.device) {
                $location.path('/error/404');
            }

            dataService.updateTimeTick();
            $scope.inclusion = {done: false, promisc: true, message: $scope._t('teachin_ready') + ' ' + ($scope.device.inclusion ? $scope.device.inclusion : ''), status: 'alert-warning', icon: 'fa-spinner fa-spin'};
            $scope.runCmd('controller.data.promisc=true');

        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };

    $scope.loadDevice();

    /**
     * Refresh data
     */
    $scope.refreshData = function() {
        var refresh = function() {
            var findStr = 'devices';
            dataFactory.refreshEnoceanDevices().then(function(response) {
                if ('controller.data.promisc' in response.data) {
                    var pomisc = response.data['controller.data.promisc'].value;
                    if (pomisc === true) {
                        $scope.inclusion = {done: false, promisc: true, message: $scope._t('teachin_ready') + ' ' + ($scope.device.inclusion ? $scope.device.inclusion : ''), status: 'alert-warning', icon: 'fa-spinner fa-spin'};
                    } else {
                        $scope.inclusion = {done: false, promisc: false, message: $scope._t('teachin_canceled'), status: 'alert-warning', icon: 'fa-exclamation-circle'};
                    }
                    return;
                }

                if ('devices' in response.data) {
                    angular.forEach(response.data.devices, function(v, k) {
                        $scope.findDevice(k);
                    });
                    return;
                }
                angular.forEach(response.data, function(v, k) {
                    var array = k.split('.');
                    if (array.indexOf(findStr) > -1) {
                        $scope.findDevice(array[1]);
                    }
                });
            }, function(error) {
                dataService.showConnectionError(error);
            });
        };
        $scope.apiDataInterval = $interval(refresh, $scope.cfg.interval);
    };

    $scope.refreshData();

    /**
     * Find last included device
     */
    $scope.findDevice = function(id) {
        var rorg = parseInt($scope.device.rorg);
        dataFactory.loadEnoceanDevices(true).then(function(response) {
            angular.forEach(response, function(v, k) {
                if (v.id == id) {
                    // if (v.data.rorg.value == rorg) {
                    var config = false;
                    var name = '(#' + v.id + ')';
                    var profile = assignProfile(v.data);
                    if (profile) {
                        name = profile._funcDescription + ' (#' + v.id + ')';
                    }

                    $scope.runCmd('controller.data.promisc=false');
                    $scope.lastIncludedDevice = {
                        id: v.id,
                        rorg: v.data.rorg.value,
                        name: name,
                        data: v.data,
                        deviceProfileId: v.data.rorg.value + '_' + v.data.funcId.value + '_' + v.data.typeId.value,
                        profile: profile
                    };


                    $scope.runCmd('devices["' + v.id + '"].data.funcId=' + $scope.device.funcId);
                    $scope.runCmd('devices["' + v.id + '"].data.typeId=' + +$scope.device.typeId);
                    $interval.cancel($scope.apiDataInterval);
                    $scope.inclusion = {done: true, config: true, promisc: false, message: $scope._t('inclusion_proces_done'), status: 'alert-success', icon: 'fa-check'};
                    $scope.loadApiDevices();
                    dataService.updateTimeTick();
                    return;
                }
                //}
            });

        }, function(error) {
            $scope.inclusion = {done: false, promisc: false, message: $scope._t('inclusion_error'), status: 'alert-danger', icon: 'fa-warning'};
        });

    };

    /**
     * Run CMD
     */
    $scope.runCmd = function(cmd) {
        // Run CMD
        dataFactory.runEnoceanCmd(cmd).then(function(response) {
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
            $scope.inclusion = {done: false, promisc: false, message: $scope._t('inclusion_error'), status: 'alert-danger', icon: 'fa-warning'};

        });
        return;
    };

    /**
     * Update device
     */
    $scope.updateDevice = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.putApi('devices', input.id, input).then(function(response) {
            myCache.remove('devices');
            $scope.loadApiDevices();
            $scope.loading = false;
        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };
    /**
     * Assign devices to room
     */
    $scope.devicesToRoom = function(roomId, devices) {
        if (!roomId) {
            return;
        }
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        for (var i = 0; i <= devices.length; i++) {
            var v = devices[i];
            if (!v) {
                continue;
            }
            var input = {
                id: v.id,
                location: roomId
            };

            dataFactory.putApi('devices', v.id, input).then(function(response) {
            }, function(error) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
                return;
            });
        }
        myCache.remove('devices');
        $scope.loadApiDevices();
        $scope.loading = false;
        return;

    };

    /**
     * Assign profile to device
     */
    function assignProfile(device, profiles) {
        var profile = false;
        var deviceProfileId = parseInt($scope.device.rorg, 16) + '_' + parseInt($scope.device.funcId, 16) + '_' + parseInt($scope.device.typeId, 16);
        angular.forEach($scope.enoceanProfiles, function(v, k) {
            var profileId = parseInt(v._rorg) + '_' + parseInt(v._func) + '_' + parseInt(v._type);

            if (deviceProfileId == v.id) {
                profile = v;
                return;
            }
        });
        return profile;
    }
    ;
});
/**
 * EnOcean manage  controller
 */
myAppController.controller('EnoceanManageController', function($scope, $location, $window, dataFactory, dataService) {
    $scope.activeTab = 'manage';
    $scope.goEdit = [];
    $scope.apiDevices = [];
    $scope.enoceanDevices = {};

    /**
     * Load API devices
     */
    $scope.loadApiDevices = function() {
        dataFactory.getApi('devices').then(function(response) {
            $scope.apiDevices = response.data.data.devices;
        }, function(error) {
            // $location.path('/error/' + error.status);
        });
    };
    $scope.loadApiDevices();

    /**
     * Load profiles
     */
    $scope.loadProfiles = function() {
        dataFactory.xmlToJson($scope.cfg.server_url + 'config/Profiles.xml').then(function(response) {
            var profile = dataService.setEnoProfile(response.Profiles.Profile);
            $scope.loadData(profile);
        }, function(error) {
            $scope.loadData(null);
        });
    }
    ;
    $scope.loadProfiles();

    /**
     * Load enocean data
     */
    $scope.loadData = function(enoceanProfiles) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        dataService.showConnectionSpinner();
        dataFactory.loadEnoceanDevices(true).then(function(response) {
            dataService.updateTimeTick();
            if (Object.keys(response).length < 1) {
                $scope.loading = {status: 'loading-fade', icon: 'fa-exclamation-circle text-warning', message: $scope._t('no_devices')};
                return;
            }
            setDevices(response, enoceanProfiles);
            $scope.loading = false;

        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };




    /**
     * Run CMD
     */
    $scope.runCmd = function(cmd) {
        // Run CMD
        dataFactory.runEnoceanCmd(cmd).then(function(response) {
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
            $scope.inclusion = {done: false, promisc: false, message: $scope._t('inclusion_error'), status: 'alert-danger', icon: 'fa-warning'};

        });
        return;
    };
    /**
     * Delete device
     */
    $scope.deleteDevice = function(id, target, dialog) {
        var confirm = true;
        var cmd = 'delete devices["' + id + '"]';
        if (dialog) {
            confirm = $window.confirm(dialog);
        }
        if (confirm) {
            dataFactory.runEnoceanCmd(cmd).then(function(response) {
                $(target).fadeOut(500);
                //$scope.loadData();
            }, function(error) {
                alert($scope._t('error_delete_data'));
            });

        }
    };

    /// --- Private functions --- ///
    /**
     * Set devices
     */
    function setDevices(devices, profiles) {

        angular.forEach(devices, function(v, k) {
            $scope.enoceanDevices[v.id] = {
                id: v.id,
                data: v.data,
                profile: assignProfile(v.data, profiles),
                elements: getElements($scope.apiDevices, v.id)
            };
        });
    }
    ;
    /**
     * Assign profile to device
     */
    function assignProfile(device, profiles) {
        var profile = false;
        var deviceProfileId = device.rorg.value + '_' + device.funcId.value + '_' + device.typeId.value;
        angular.forEach(profiles, function(v, k) {
            //var profileId = parseInt(v._rorg) + '_' + parseInt(v._func) + '_' + parseInt(v._type);
            if (deviceProfileId == v.id) {
                profile = v;
                return;
            }
        });
        return profile;
    }
    ;

    /**
     * Get elements
     */
    function getElements(devices, nodeId) {
        var elements = [];
        var findZenoStr = "ZEnoVDev_zeno_";
        angular.forEach(devices, function(v, k) {
            if (v.id.indexOf(findZenoStr) === -1) {
                return;
            }
            var cmd = v.id.split(findZenoStr)[1].split('_');
            var zenoId = cmd[0];
            if (zenoId == nodeId) {
                var obj = {};
                obj['id'] = v.id;
                obj['title'] = v.metrics.title;
                obj['permanently_hidden'] = v.permanently_hidden;
                obj['metrics'] = v.metrics;
                elements.push(obj);
            }

        });
        return elements;
    }
    ;
});
/**
 * EnOcean manage detail  controller
 */
myAppController.controller('EnoceanManageDetailController', function($scope, $routeParams, $location, $filter, dataFactory, dataService, myCache) {
    $scope.activeTab = 'manage';
    $scope.nodeId = $routeParams.deviceId;
    $scope.enoceanDevice = [];
    $scope.enoceanProfiles = {};
    $scope.input = {};
    $scope.dev = [];
    $scope.apiDevices = [];
    $scope.rooms = [];
    $scope.modelRoom;

    /**
     * Load profiles
     */
    $scope.loadProfiles = function() {
        dataFactory.xmlToJson($scope.cfg.server_url + 'config/Profiles.xml').then(function(response) {
            $scope.enoceanProfiles = dataService.setEnoProfile(response.Profiles.Profile);
        }, function(error) {
        });
    }
    ;
    $scope.loadProfiles();

    /**
     * Load enocean data
     */
    $scope.loadData = function() {
        dataService.showConnectionSpinner();
        dataFactory.runEnoceanCmd('zeno.devices["' + $routeParams.deviceId + '"]').then(function(response) {
            if (response.data == 'null') {
                $location.path('/error/404');
                return;
            }
            var device = response.data;
            var name = '';
            var profile = assignProfile(device.data, $scope.enoceanProfiles);
            if (profile) {
                //profileId = profile.profileId;
                name = profile._funcDescription;
            }
            dataService.updateTimeTick();
            $scope.input = {
                id: device.id,
                rorg: device.data.rorg.value,
                name: name,
                deviceProfileId: device.data.rorg.value + '_' + device.data.funcId.value + '_' + device.data.typeId.value,
                profile: profile,
                profileId: ''

            };
        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData();

    /**
     * Load API devices
     */
    $scope.loadApiDevices = function() {
        dataFactory.getApi('devices', null, true).then(function(response) {
            $scope.apiDevices = [];
            var findZenoStr = "ZEnoVDev_zeno_";
            angular.forEach(response.data.data.devices, function(v, k) {
                if (v.id.indexOf(findZenoStr) === -1) {
                    return;
                }
                var cmd = v.id.split(findZenoStr)[1].split('_');
                var zenoId = cmd[0];
                if (zenoId == $scope.nodeId) {
                    var obj = {};
                    obj['id'] = v.id;
                    obj['permanently_hidden'] = v.permanently_hidden;
                    obj['visibility'] = v.visibility;
                    obj['level'] = $filter('toInt')(v.metrics.level);
                    obj['metrics'] = v.metrics;
                    $scope.apiDevices.push(obj);
                }

            });
            loadLocations();

        }, function(error) {
            // $location.path('/error/' + error.status);
        });
    };
    $scope.loadApiDevices();

    /**
     * Store device data
     */
    $scope.store = function(input) {
        if (input.profileId) {
            var device = angular.fromJson(input.profileId);
            $scope.runCmd('devices["' + $scope.nodeId + '"].data.funcId=' + device.funcId);
            $scope.runCmd('devices["' + $scope.nodeId + '"].data.typeId=' + device.typeId);

        }
        if (input.name) {
            //$scope.runCmd('devices["' + $scope.nodeId + '"].data.name=' + input.name);
        }
        $scope.loadData();
        $scope.loadApiDevices();

    };

    /**
     * Update device
     */
    $scope.updateDevice = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.putApi('devices', input.id, input).then(function(response) {
            myCache.remove('devices');
            $scope.loadApiDevices();
            $scope.loading = false;
        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };

    /**
     * Assign devices to room
     */
    $scope.devicesToRoom = function(roomId, devices) {
        if (!roomId) {
            return;
        }
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        for (var i = 0; i <= devices.length; i++) {
            var v = devices[i];
            if (!v) {
                continue;
            }
            var input = {
                id: v.id,
                location: roomId
            };

            dataFactory.putApi('devices', v.id, input).then(function(response) {
            }, function(error) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
                return;
            });
        }
        //myCache.remove('devices');
        $scope.loadApiDevices();
        $scope.loading = false;
        return;

    };



    /**
     * Run CMD
     */
    $scope.runCmd = function(cmd) {
        // Run CMD
        dataFactory.runEnoceanCmd(cmd).then(function(response) {
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
            $scope.inclusion = {done: false, promisc: false, message: $scope._t('inclusion_error'), status: 'alert-danger', icon: 'fa-warning'};

        });
        return;
    };

    /// --- Private functions --- ///
    /**
     * Set devices
     */
    function setDevices(devices, profiles) {
        angular.forEach(devices, function(v, k) {
            $scope.enoceanDevices[v.id] = {
                id: v.id,
                data: v.data,
                profile: assignProfile(v.data, profiles)
            };
        });
        //console.log($scope.deviceCollection)
    }
    ;
    /**
     * Assign profile to device
     */
    function assignProfile(device, profiles) {
        var profile = false;
        var deviceProfileId = device.rorg.value + '_' + device.funcId.value + '_' + device.typeId.value;
        angular.forEach(profiles, function(v, k) {
            //var profileId = parseInt(v._rorg) + '_' + parseInt(v._func) + '_' + parseInt(v._type);
            if (deviceProfileId == v.id) {
                profile = v;
                return;
            }
        });
        return profile;
    }
    ;

    /**
     * Load locations
     */
    function loadLocations() {
        dataFactory.getApi('locations').then(function(response) {
            $scope.rooms = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;
});
/**
 * EnOcean controller info controller
 */
myAppController.controller('EnoceanControllerController', function($scope, $location, dataFactory, dataService) {
    $scope.activeTab = 'controller';
    $scope.controller = false;
    $scope.controllerShow = ['APIVersion', 'AppDescription', 'AppVersion', 'ChipID', 'ChipVersion'];

    /**
     * Load enocean data
     */
    $scope.loadData = function() {
        dataService.showConnectionSpinner();
        dataFactory.dataEnoceanCmd().then(function(response) {
            $scope.controller = response.data.controller.data;
            dataService.updateTimeTick();
        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData();
});
/**
 * Room controller
 */
myAppController.controller('RoomController', function($scope, $location, dataFactory, dataService) {
    $scope.collection = [];
    $scope.userImageUrl = $scope.cfg.server_url + $scope.cfg.api_url + 'load/image/';
    $scope.reset = function() {
        $scope.collection = angular.copy([]);
    };

    /**
     * Load data into collection
     */
    $scope.loadData = function() {
        dataService.showConnectionSpinner();
        dataFactory.getApi('locations').then(function(response) {
            $scope.collection = response.data.data;
//            if (Object.keys($scope.collection).length < 1) {
//                $scope.loading = {status: 'loading-spin', icon: 'fa-exclamation-triangle text-warning', message: $scope._t('no_data')};
//            }
            dataService.updateTimeTick();
        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData();
});
/**
 * Room config controller
 */
myAppController.controller('RoomConfigController', function($scope, $window, $location, dataFactory, dataService, myCache) {
    $scope.collection = [];
    $scope.devices = [];
    $scope.userImageUrl = $scope.cfg.server_url + $scope.cfg.api_url + 'load/image/';

    $scope.reset = function() {
        $scope.collection = angular.copy([]);
    };

    /**
     * Load data into collection
     */
    $scope.loadData = function(id) {
        dataFactory.getApi('locations').then(function(response) {
            $scope.collection = response.data.data;
            loadDevices();
        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData();

    /**
     * Delete an item
     */
    $scope.delete = function(target, roomId, dialog) {

        var confirm = true;
        if (dialog) {
            confirm = $window.confirm(dialog);
        }
        if (confirm) {
            dataFactory.deleteApi('locations', roomId).then(function(response) {
                var devices = dataService.getData($scope.devices, {filter: 'location', val: roomId});
                removeRoomIdFromDevice(devices);
                myCache.remove('locations');
                myCache.remove('devices');
                $scope.loadData();

            }, function(error) {
                alert($scope._t('error_delete_data'));
            });
        }
    };

    /// --- Private functions --- ///
    /**
     * Load devices
     */
    function loadDevices() {
        dataFactory.getApi('devices').then(function(response) {
            $scope.devices = response.data.data.devices;
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;

    /**
     * Remove room id from device
     */
    function removeRoomIdFromDevice(devices) {
        angular.forEach(devices, function(v, k) {
            dataFactory.putApi('devices', v.id, {'location': 0}).then(function(response) {
            }, function(error) {
            });
        });
        return;

    }
    ;
});
/**
 * Config room detail controller
 */
myAppController.controller('RoomConfigEditController', function($scope, $routeParams, $filter, $location, dataFactory, dataService, myCache) {
    $scope.id = $filter('toInt')($routeParams.id);
    $scope.input = {
        'id': 0,
        'title': '',
        'user_img': '',
        'default_img': '',
        'img_type': 'default'
    };
    $scope.devices = {};
    $scope.devicesAssigned = [];
    //$scope.devicesAvailable = [];
    $scope.devicesToRemove = [];
    $scope.defaultImages = $scope.cfg.room_images;
    $scope.userImageUrl = $scope.cfg.server_url + $scope.cfg.api_url + 'load/image/';

    /**
     * Load data
     */
    $scope.loadData = function(id) {
        dataService.showConnectionSpinner();
        dataFactory.getApi('locations', '/' + id, true).then(function(response) {
            $scope.input = response.data.data;
            loadDevices(id);
        }, function(error) {
            $scope.input = false;
            $location.path('/error/' + error.status);
        });
    };
    if ($scope.id > 0) {
        $scope.loadData($scope.id);
    } else {
        loadDevices(0);
    }

    /**
     * Upload image
     */
    $scope.uploadFile = function() {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('uploading')};
        var cmd = $scope.cfg.api_url + 'upload/image';
        var fd = new FormData();
        fd.append('file_upload', $scope.myFile);
        dataFactory.uploadApiFile(cmd, fd).then(function(response) {
            $scope.input.user_img = response.data.data;
            $scope.input.img_type = 'user';
            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_upload')};
        }, function(error) {
            $scope.loading = false;
            alert($scope._t('error_upload'));
        });
    };

    /**
     * Assign device to room
     */
    $scope.assignDevice = function(device) {
        device.location = null;
        $scope.devicesAssigned.push(device.id);
        return;
    };

    /**
     * Remove device from the room
     */
    $scope.removeDevice = function(device) {
        var oldList = $scope.devicesAssigned;
        $scope.devicesAssigned = [];
        $scope.devicesToRemove = $scope.devicesToRemove.length > 0 ? $scope.devicesToRemove : [];
        angular.forEach(oldList, function(v, k) {
            if (v != device.id) {
                $scope.devicesAssigned.push(v);
            } else {
                device.location = 0;
                $scope.devicesToRemove.push(v);
            }
        });
        return;
    };

    /**
     * Create/Update an item
     */
    $scope.store = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.storeApi('locations', input.id, input).then(function(response) {
            var id = $filter('hasNode')(response, 'data.data.id');
            if (id) {
                saveRoomIdIntoDevice(response.data, $scope.devicesAssigned);
                removeRoomIdFromDevice(response.data, $scope.devicesToRemove);
                myCache.remove('locations');
                myCache.remove('devices');
                //$scope.loadData(id);
                $location.path('/config-rooms');
            }
            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_updated')};

        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;

        });

    };

    /// --- Private functions --- ///
    /**
     * Load devices
     */
    function loadDevices(locationId) {
        dataFactory.getApi('devices').then(function(response) {
            $scope.devicesAssigned = [];
            $scope.devices = dataService.getDevices(response.data.data.devices, false, false, false, locationId > 0 ? locationId : 'post');
            angular.forEach($scope.devices, function(v, k) {
                if (v.location == locationId && v.location !== 0) {
                    $scope.devicesAssigned.push(v.id);
                }

            });
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;

    /**
     * Save room id into device
     */
    function saveRoomIdIntoDevice(data, devices) {
        angular.forEach(devices, function(v, k) {
            dataFactory.storeApi('devices', v, {'location': data.data.id}).then(function(response) {
            }, function(error) {

            });
        });
        return;

    }
    ;

    /**
     * Remove room id from device
     */
    function removeRoomIdFromDevice(data, devices) {
        angular.forEach(devices, function(v, k) {
            dataFactory.putApi('devices', v, {'location': 0}).then(function(response) {
            }, function(error) {

            });
        });
        return;

    }
    ;

});
/**
 * Network controller
 */
myAppController.controller('NetworkController', function($scope, $cookies, $filter, $window, $location, dataFactory, dataService, myCache) {
    $scope.activeTab = (angular.isDefined($cookies.tab_network) ? $cookies.tab_network : 'battery');
    $scope.batteries = {
        'list': [],
        'cntLess20': [],
        'cnt0': []
    };
    $scope.devices = {
        'failed': [],
        'batteries': [],
        'zwave': []
    };
    $scope.goEdit = [];
    $scope.zWaveDevices = {};

//    $scope.modelName = [];
//    $scope.modelRoom = {};
//
//    $scope.rooms = [];
    /**
     * Set tab
     */
    $scope.setTab = function(tabId) {
        $scope.activeTab = tabId;
        $cookies.tab_network = tabId;
    };


    /**
     * Load data
     */
    $scope.loadData = function() {
        dataService.showConnectionSpinner();
        dataFactory.getApi('devices').then(function(response) {
            zwaveApiData(response.data.data.devices);
            loadLocations();

        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData();

    /**
     * DEPRECATED
     * Assign devices to room
     */
//    $scope.devicesToRoom = function(roomId, devices) {
//        if (!roomId) {
//            return;
//        }
//        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
//        for (var i = 0; i <= devices.length; i++) {
//            var v = devices[i];
//            if (!v) {
//                continue;
//            }
//            var input = {
//                id: v.id,
//                location: roomId
//            };
//            dataFactory.putApi('devices', v.id, input).then(function(response) {
//            }, function(error) {
//                alert($scope._t('error_update_data'));
//                $scope.loading = false;
//                dataService.logError(error);
//                return;
//            });
//        }
//        myCache.remove('devices');
//        $scope.loadData();
//        $scope.loading = false;
//        return;
//
//    };

    /**
     * DEPRECATED
     * Set device visibility
     */
//    $scope.setVisibility = function(deviceId, visibility) {
//        var input = {
//            id: deviceId,
//            visibility: visibility
//        };
//
//        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
//        dataFactory.putApi('devices', deviceId, input).then(function(response) {
//            myCache.remove('devices');
//            $scope.loadData();
//            $scope.loading = false;
//        }, function(error) {
//            alert($scope._t('error_update_data'));
//            $scope.loading = false;
//            dataService.logError(error);
//        });
//
//    };

    /**
     * DEPRECATED
     * Set device visibility
     */
//    $scope.renameDevice = function(deviceId, title) {
//        var input = {
//            id: deviceId,
//            metrics: {
//                title: title
//            }
//        };
//
//        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
//        dataFactory.putApi('devices', deviceId, input).then(function(response) {
//            myCache.remove('devices');
//            $scope.loadData();
//            $scope.loading = false;
//        }, function(error) {
//            alert($scope._t('error_update_data'));
//            $scope.loading = false;
//            dataService.logError(error);
//        });
//
//    };

    /**
     * DEPRECATED
     * Add/Remove device in list
     */
//    $scope.hiddenList = function(deviceId, checked) {
//        if (checked) {
//            if ($scope.hiddenDevices.indexOf(deviceId) === -1) {
//                $scope.hiddenDevices.push(deviceId);
//            }
//        } else {
//            for (var i = 0; i <= $scope.hiddenDevices.length; i++) {
//                var v = $scope.hiddenDevices[i];
//                if (v === deviceId) {
//                    $scope.hiddenDevices.splice(i, 1);
//                }
//            }
//        }
//    };

    /**
     * DEPRECATED
     * Update devices with status hidden
     */
//    $scope.handleHidden = function() {
//        var devices = [];
//        for (var i = 0; i <= $scope.devices.zwave.length; i++) {
//            var v = $scope.devices.zwave[i];
//            if(!v){
//                continue;
//            }
//            var isHidden = false;
//            if ($scope.hiddenDevices.indexOf(v.id) !== -1) {
//                isHidden = true;
//            }
//            devices[v.id] = isHidden;
//        }
//
//         $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
//            dataFactory.postApi('hide_devices', {data: devices}).then(function(response) {
//                  myCache.remove('devices');
//                   $scope.loadData();
//                   $scope.loading = false;
//            }, function(error) {
//                alert($scope._t('error_update_data'));
//                $scope.loading = false;
//                dataService.logError(error);
//            });
//
//    };

    /// --- Private functions --- ///
    /**
     * Load locations
     */
    function loadLocations() {
        dataFactory.getApi('locations').then(function(response) {
            $scope.rooms = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;
    /**
     * Get zwaveApiData
     */
    function zwaveApiData(devices) {
        dataFactory.loadZwaveApiData().then(function(ZWaveAPIData) {
            dataService.updateTimeTick();
            if (!ZWaveAPIData.devices) {
                return;
            }

            angular.forEach(ZWaveAPIData.devices, function(v, k) {
                if (k == 1) {
                    return;
                }

                $scope.zWaveDevices[k] = {
                    id: k,
                    title: v.data.givenName.value || 'Device ' + '_' + k,
                    icon: null,
                    cfg: [],
                    elements: [],
                    messages: []
                };

            });
            var findZwaveStr = "ZWayVDev_zway_";
            angular.forEach(devices, function(v, k) {
                var cmd;
                var nodeId;
                var iId;
                var ccId;
                if (v.id.indexOf(findZwaveStr) > -1) {
                    cmd = v.id.split(findZwaveStr)[1].split('-');
                    nodeId = cmd[0];
                    iId = cmd[1];
                    ccId = cmd[2];
                    var node = ZWaveAPIData.devices[nodeId];
                    if (node) {
                        var interviewDone = isInterviewDone(node, nodeId);
                        var isFailed = node.data.isFailed.value;
                        var hasBattery = 0x80 in node.instances[0].commandClasses;
                        // Has config file
//                        if (angular.isDefined(node.data.ZDDXMLFile) && node.data.ZDDXMLFile.value != '') {
//                            if ($scope.zWaveDevices[nodeId]['cfg'].indexOf('config') === -1) {
//                                $scope.zWaveDevices[nodeId]['cfg'].push('config');
//                            }
//                        }
//                        // Has wakeup
//                        if (0x84 in node.instances[0].commandClasses) {
//                            if ($scope.zWaveDevices[nodeId]['cfg'].indexOf('wakeup') === -1) {
//                                $scope.zWaveDevices[nodeId]['cfg'].push('wakeup');
//                            }
//                        }
//                        // Has SwitchAll
//                        if (0x27 in node.instances[0].commandClasses) {
//                            if ($scope.zWaveDevices[nodeId]['cfg'].indexOf('switchall') === -1) {
//                                $scope.zWaveDevices[nodeId]['cfg'].push('switchall');
//                            }
//                        }
//                        // Has protection
//                        if (0x75 in node.instances[0].commandClasses) {
//                            if ($scope.zWaveDevices[nodeId]['cfg'].indexOf('protection') === -1) {
//                                $scope.zWaveDevices[nodeId]['cfg'].push('protection');
//                            }
//                        }
                        var obj = {};
                        obj['id'] = v.id;
                        obj['visibility'] = v.visibility;
                        obj['permanently_hidden'] = v.permanently_hidden;
                        obj['nodeId'] = nodeId;
                        obj['nodeName'] = node.data.givenName.value || 'Device ' + '_' + k,
                                obj['title'] = v.metrics.title;
                        obj['level'] = $filter('toInt')(v.metrics.level);
                        obj['metrics'] = v.metrics;
                        obj['messages'] = [];
                        $scope.devices.zwave.push(obj);
                        $scope.zWaveDevices[nodeId]['elements'].push(obj);
                        $scope.zWaveDevices[nodeId]['icon'] = obj.metrics.icon;
                        // Batteries
                        if (v.deviceType === 'battery') {
                            $scope.devices.batteries.push(obj);
                        }
                        if (hasBattery && interviewDone) {
                            var batteryCharge = parseInt(node.instances[0].commandClasses[0x80].data.last.value);
                            if (batteryCharge <= 20) {
                                $scope.zWaveDevices[nodeId]['messages'].push({
                                    type: 'battery',
                                    error: $scope._t('lb_low_battery') + ' (' + batteryCharge + '%)'
                                });
                                obj['messages'].push({
                                    type: 'battery',
                                    error: $scope._t('lb_low_battery') + ' (' + batteryCharge + '%)'
                                });
                            }
                        }
                        // Not interview
                        if (!interviewDone) {
                            $scope.zWaveDevices[nodeId]['messages'].push({
                                type: 'config',
                                error: $scope._t('lb_not_configured')

                            });

                            obj['messages'].push({
                                type: 'config',
                                error: $scope._t('lb_not_configured')

                            });
                        }
                        // Is failed
                        if (isFailed) {
                            $scope.zWaveDevices[nodeId]['messages'].push({
                                type: 'failed',
                                error: $scope._t('lb_is_failed')

                            });
                            obj['messages'].push({
                                type: 'failed',
                                error: $scope._t('lb_is_failed')

                            });
                        }
                        $scope.devices.failed.push(obj);
                    }

                }
            });
            // Count device batteries
            for (i = 0; i < $scope.devices.batteries.length; ++i) {
                var battery = $scope.devices.batteries[i];
                if (battery.level < 1) {
                    $scope.batteries.cnt0.push(battery.id);
                }
                if (battery.level > 0 && battery.level < 20) {
                    $scope.batteries.cntLess20.push(battery.id);
                }

            }
        }, function(error) {
            $location.path('/error/' + error.status);
        });
    }
    ;

    /**
     * Redirect to Expert
     */
    $scope.toExpert = function(url, dialog) {
        if ($window.confirm(dialog)) {
            $window.location.href = url;
        }
    };
    /**
     * notInterviewDevices
     */
    function isInterviewDone(node, nodeId) {
        for (var iId in node.instances) {
            for (var ccId in node.instances[iId].commandClasses) {
                var isDone = node.instances[iId].commandClasses[ccId].data.interviewDone.value;
                if (isDone == false) {
                    return false;
                }
            }
        }
        return true;

    }
    ;
});
/**
 * Profile controller
 */
myAppController.controller('NetworkConfigController', function($scope, $routeParams, $filter, $location, dataFactory, dataService, myCache) {
    $scope.zWaveDevice = [];
    $scope.devices = [];
    $scope.dev = [];
    $scope.rooms = [];
    $scope.modelRoom;

    /**
     * Load data
     */
    $scope.loadData = function(nodeId) {
        dataService.showConnectionSpinner();
        dataFactory.getApi('devices').then(function(response) {
            zwaveApiData(nodeId, response.data.data.devices);
            loadLocations();

        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData($routeParams.nodeId);

    /**
     * Assign devices to room
     */
    $scope.devicesToRoom = function(roomId, devices) {
        if (!roomId) {
            return;
        }
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        for (var i = 0; i <= devices.length; i++) {
            var v = devices[i];
            if (!v) {
                continue;
            }
            var input = {
                id: v.id,
                location: roomId
            };

            dataFactory.putApi('devices', v.id, input).then(function(response) {
            }, function(error) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
                return;
            });
        }
        myCache.remove('devices');
        $scope.loadData($routeParams.nodeId);
        $scope.loading = false;
        return;

    };
    /**
     * Update device
     */
    $scope.updateDevice = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.putApi('devices', input.id, input).then(function(response) {
            myCache.remove('devices');
            $scope.loadData($routeParams.nodeId);
            $scope.loading = false;
        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };

    /// --- Private functions --- ///
    /**
     * Load locations
     */
    function loadLocations() {
        dataFactory.getApi('locations').then(function(response) {
            $scope.rooms = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;
    /**
     * Get zwaveApiData
     */
    function zwaveApiData(nodeId, devices) {
        dataFactory.loadZwaveApiData().then(function(ZWaveAPIData) {
            dataService.updateTimeTick();
            var node = ZWaveAPIData.devices[nodeId];
            if (!node) {
                $location.path('/error/404');
                return;
            }

            $scope.zWaveDevice = {
                id: nodeId,
                title: node.data.givenName.value || 'Device ' + '_' + nodeId,
                cfg: []
            };
            // Has config file
            if (angular.isDefined(node.data.ZDDXMLFile) && node.data.ZDDXMLFile.value != '') {
                if ($scope.zWaveDevice['cfg'].indexOf('config') === -1) {
                    $scope.zWaveDevice['cfg'].push('config');
                }
            }
            // Has wakeup
            if (0x84 in node.instances[0].commandClasses) {
                if ($scope.zWaveDevice['cfg'].indexOf('wakeup') === -1) {
                    $scope.zWaveDevice['cfg'].push('wakeup');
                }
            }
            // Has SwitchAll
            if (0x27 in node.instances[0].commandClasses) {
                if ($scope.zWaveDevice['cfg'].indexOf('switchall') === -1) {
                    $scope.zWaveDevice['cfg'].push('switchall');
                }
            }
            // Has protection
            if (0x75 in node.instances[0].commandClasses) {
                if ($scope.zWaveDevice['cfg'].indexOf('protection') === -1) {
                    $scope.zWaveDevice['cfg'].push('protection');
                }
            }
            if ($scope.devices.length > 0) {
                $scope.devices = angular.copy([]);
            }
            var findZwaveStr = "ZWayVDev_zway_";
            angular.forEach(devices, function(v, k) {
                if (v.id.indexOf(findZwaveStr) === -1) {
                    return;
                }
                var cmd = v.id.split(findZwaveStr)[1].split('-');
                var zwaveId = cmd[0];
                var iId = cmd[1];
                var ccId = cmd[2];
                if (zwaveId == nodeId) {
                    var obj = {};
                    obj['id'] = v.id;
                    obj['permanently_hidden'] = v.permanently_hidden;
                    obj['visibility'] = v.visibility;
                    obj['level'] = $filter('toInt')(v.metrics.level);
                    obj['metrics'] = v.metrics;
                    $scope.devices.push(obj);
                }

            });
        }, function(error) {
            $location.path('/error/404');
        });
    }
    ;


});
/**
 * Profile controller
 */
myAppController.controller('AdminController', function($scope, $window, $location, $timeout, $interval, dataFactory, dataService, myCache) {
    $scope.profiles = {};
    $scope.remoteAccess = false;

    // Licence
    $scope.controllerUuid = null;
    $scope.proccessLicence = false;
    $scope.proccessVerify = {
        'message': false,
        'status': 'is-hidden'
    };
    $scope.proccessUpdate = {
        'message': false,
        'status': 'is-hidden'
    };
    $scope.inputLicence = {
        "scratch_id": null
    };
    $scope.restoreBck = {
        chip: '0'
    };

    $scope.zwaveDataInterval = null;
    // Cancel interval on page destroy
    $scope.$on('$destroy', function() {
        $interval.cancel($scope.zwaveDataInterval);
    });

    /**
     * Load ZwaveApiData
     */
    $scope.loadZwaveApiData = function() {
        dataService.showConnectionSpinner();
        dataFactory.loadZwaveApiData().then(function(ZWaveAPIData) {
            $scope.controllerUuid = ZWaveAPIData.controller.data.uuid.value;
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };

    $scope.loadZwaveApiData();

    /**
     * Load data into collection
     */
    $scope.loadData = function() {
        dataService.showConnectionSpinner();
        dataFactory.getApi('profiles').then(function(response) {
            $scope.profiles = response.data.data;
            dataService.updateTimeTick();
        }, function(error) {
            $location.path('/error/' + error.status);
        });
    };
    $scope.loadData();

    /**
     * Delete an item
     */
    $scope.delete = function(target, input, dialog, except) {
        if (input.id == except) {
            return;
        }
        var confirm = true;
        if (dialog) {
            confirm = $window.confirm(dialog);
        }

        if (confirm) {
            dataFactory.deleteApi('profiles', input.id).then(function(response) {
                $(target).fadeOut(2000);
                myCache.remove('profiles');

            }, function(error) {
                alert($scope._t('error_delete_data'));
            });
        }
    };

    /**
     * Load Remote access data
     */
    $scope.loadRemoteAccess = function() {
        if (!$scope.elementAccess($scope.cfg.role_access.remote_access)) {
            return;
        }
        dataFactory.getApi('instances', '/RemoteAccess').then(function(response) {
            var remoteAccess = response.data.data[0];
            if (Object.keys(remoteAccess).length < 1) {
                $scope.alert = {message: $scope._t('error_load_data'), status: 'alert-danger', icon: 'fa-warning'};
            }
            if (!remoteAccess.active) {
                $scope.alert = {message: $scope._t('remote_access_not_active'), status: 'alert-warning', icon: 'fa-exclamation-circle'};
                return;
            }
            if (!remoteAccess.params.userId) {
                $scope.alert = {message: $scope._t('error_load_data'), status: 'alert-danger', icon: 'fa-warning'};
                return;
            }
            remoteAccess.params.pass = null;
            $scope.remoteAccess = remoteAccess;
        }, function(error) {
            $scope.alert = {message: $scope._t('remote_access_not_installed'), status: 'alert-danger', icon: 'fa-warning'};
        });
    };

    $scope.loadRemoteAccess();

    /**
     * PUT Remote access
     */
    $scope.putRemoteAccess = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        dataFactory.putApi('instances', input.id, input).then(function(response) {
            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_updated')};

        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };

    /**
     * Get license key
     */
    $scope.getLicense = function(inputLicence) {
        // Clear messages
        $scope.proccessVerify.message = false;
        $scope.proccessUpdate.message = false;
        if (!inputLicence.scratch_id) {
            return;
        }

        $scope.proccessVerify = {'message': $scope._t('verifying_licence_key'), 'status': 'fa fa-spinner fa-spin'};
        $scope.proccessLicence = true;
        var input = {
            'uuid': $scope.controllerUuid,
            'scratch': inputLicence.scratch_id
        };

//        $timeout(function() {
//            $scope.proccessVerify = {'message': $scope._t('success_licence_key'), 'status': 'fa fa-check text-success'};
//            updateCapabilities();
//        }, 3000);
        dataFactory.getLicense(input).then(function(response) {
            $scope.proccessVerify = {'message': $scope._t('success_licence_key'), 'status': 'fa fa-check text-success'};
            // Update capabilities
            updateCapabilities(response);
        }, function(error) {
            var message = $scope._t('error_no_licence_key');
            if (error.status == 404) {
                var message = $scope._t('error_404_licence_key');
            }
            $scope.proccessVerify = {'message': message, 'status': 'fa fa-exclamation-triangle text-danger'};
            $scope.proccessLicence = false;

        });
        return;
    };

    /**
     * Update capabilities
     */
    function updateCapabilities(data) {
        $scope.proccessUpdate = {'message': $scope._t('upgrading_capabilities'), 'status': 'fa fa-spinner fa-spin'};
//        $timeout(function() {
//             $scope.proccessUpdate = {'message': $scope._t('success_capabilities'), 'status': 'fa fa-check text-success'};
//             $scope.proccessLicence = false;
//        }, 3000);
        dataFactory.zmeCapabilities(data).then(function(response) {
            $scope.proccessUpdate = {'message': $scope._t('success_capabilities'), 'status': 'fa fa-check text-success'};
            $scope.proccessLicence = false;
        }, function(error) {
            $scope.proccessUpdate = {'message': $scope._t('error_no_capabilities'), 'status': 'fa fa-exclamation-triangle text-danger'};
            $scope.proccessLicence = false;
        });
    }
    ;

    /**
     * Upload image
     */
    $scope.uploadFile = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('restore_wait')};
        var fd = new FormData();
        fd.append('config_backup', $scope.myFile);
        dataFactory.restoreFromBck(fd, input.chip).then(function(response) {
            $timeout(function() {
                $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('restore_done_reload_ui')};
                //$interval.cancel($scope.zwaveDataInterval);
                $window.location.reload();
            }, 20000);
        }, function(error) {
            $scope.loading = false;
            alert($scope._t('restore_backup_failed'));
        });
    };

    /**
     * Cancel restore
     */
    $scope.cancelRestore = function() {
        $("#restore_confirm").attr('checked', false);
        $("#restore_chip_info").attr('checked', false);
        $scope.goRestore = false;
        $scope.goRestoreUpload = false;

    };

    /**
     * Refresh ZWAVE api data
     */
//    $scope.refreshZwaveApiData = function() {
//        var refresh = function() {
//            dataFactory.refreshZwaveApiData().then(function(response) {
//                if ('controller.data.controllerState' in response.data) {
//                    var state = response.data['controller.data.controllerState'].value;
//                    if (state == 20) {
//                        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('restore_wait')};
//                        $timeout(function() {
//                            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('restore_done_reload_ui')};
//                             $interval.cancel($scope.zwaveDataInterval);
//                        }, 20000);
//                    }
//                }
//               
//            }, function(error) {
//                dataService.showConnectionError(error);
//                return;
//            });
//        };
//        $scope.zwaveDataInterval = $interval(refresh, $scope.cfg.interval);
//        return;
//    };
//    $scope.refreshZwaveApiData();
});
/**
 * Orofile detail
 */
myAppController.controller('AdminUserController', function($scope, $routeParams, $filter, $location, dataFactory, dataService, myCache) {
    $scope.id = $filter('toInt')($routeParams.id);
    $scope.rooms = {};
    $scope.input = {
        id: 0,
        name: '',
        active: true,
        role: 2,
        password: '',
        login: '',
        lang: 'en',
        color: '#dddddd',
        hide_all_device_events: false,
        hide_system_events: false,
        hide_single_device_events: [],
        rooms: [0],
        default_ui: 1,
        expert_view: false

    };
    $scope.auth = {
        login: null,
        password: null

    };

    /**
     * Load data
     */
    $scope.loadData = function(id) {
        dataService.showConnectionSpinner();
        dataFactory.getApi('profiles', '/' + id, true).then(function(response) {
            $scope.input = response.data.data;
            dataService.updateTimeTick();
        }, function(error) {
            $scope.input = false;
            $location.path('/error/' + error.status);
        });
    };
    if ($scope.id > 0) {
        $scope.loadData($scope.id);
    }

    /**
     * Load Rooms
     */
    $scope.loadRooms = function() {
        dataFactory.getApi('locations').then(function(response) {
            $scope.rooms = response.data.data;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;
    $scope.loadRooms();
    /**
     * Assign room to list
     */
    $scope.assignRoom = function(assign) {
        $scope.input.rooms.push(assign);
        return;

    };

    /**
     * Remove room from the list
     */
    $scope.removeRoom = function(roomId) {
        var oldList = $scope.input.rooms;
        $scope.input.rooms = [];
        angular.forEach(oldList, function(v, k) {
            if (v != roomId) {
                $scope.input.rooms.push(v);
            }
        });
        return;
    };

    /**
     * Create/Update an item
     */
    $scope.store = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        if ($scope.id == 0) {
            input.password = input.password;
        }
        input.role = parseInt(input.role, 10);
        dataFactory.storeApi('profiles', input.id, input).then(function(response) {
            var id = $filter('hasNode')(response, 'data.data.id');
            if (id) {
                myCache.remove('profiles');
                $scope.loadData(id);
            }
            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_updated')};

        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };

    /**
     * Change auth data
     */
    $scope.changeAuth = function(auth) {
        if (!auth.login && !auth.password) {
            return;
        }
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        var input = {
            id: $scope.id,
            login: auth.login,
            password: auth.password

        };
        dataFactory.putApi('profiles_auth_update', input.id, input).then(function(response) {
            var data = response.data.data;
            if (!data) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
                return;
            }
            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_updated')};

        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };

    /// --- Private functions --- ///


});
/**
 * My Access
 */
myAppController.controller('MyAccessController', function($scope, $window, $location, dataFactory, dataService, myCache) {
    $scope.id = $scope.user.id;
    $scope.devices = {};
    $scope.input = {
        id: 0,
        name: '',
        active: true,
        description: '',
        //positions: [],
        password: '',
        lang: 'en',
        color: '',
        hide_all_device_events: false,
        hide_system_events: false,
        hide_single_device_events: [],
        interval: 2000

    };
    $scope.newPassword = null;

    /**
     * Load data
     */
    $scope.loadData = function(id) {
        dataService.showConnectionSpinner();
        dataFactory.getApi('profiles', '/' + id, true).then(function(response) {
            loadDevices();
            $scope.input = response.data.data;
            dataService.updateTimeTick();
        }, function(error) {
            $scope.input = false;
            $scope.loading = false;
            $location.path('/error/' + error.status);
        });
    };
    if ($scope.id > 0) {
        $scope.loadData($scope.id);
    }

    /**
     * Assign device to list
     */
    $scope.assignDevice = function(assign) {
        $scope.input.hide_single_device_events.push(assign);
        return;

    };
    /**
     * Remove device from the list
     */
    $scope.removeDevice = function(deviceId) {
        var oldList = $scope.input.hide_single_device_events;
        $scope.input.hide_single_device_events = [];
        angular.forEach(oldList, function(v, k) {
            if (v != deviceId) {
                $scope.input.hide_single_device_events.push(v);
            }
        });
        return;
    };

    /**
     * Create/Update an item
     */
    $scope.store = function(input) {
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.putApi('profiles', input.id, input).then(function(response) {
            var data = response.data.data;
            if (!data) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
                return;
            }

            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_updated')};
            myCache.remove('profiles');
            dataService.setUser(data);
            $window.location.reload();
            //$route.reload();

        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };

    /**
     * Change password
     */
    $scope.changePassword = function(newPassword) {
        if (!newPassword || newPassword == '') {
            return;
        }
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        var input = {
            id: $scope.id,
            password: newPassword

        };
        dataFactory.putApi('profiles_auth_update', input.id, input).then(function(response) {
            var data = response.data.data;
            if (!data) {
                alert($scope._t('error_update_data'));
                $scope.loading = false;
                return;
            }
            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_updated')};

        }, function(error) {
            alert($scope._t('error_update_data'));
            $scope.loading = false;
        });

    };

    /// --- Private functions --- ///
    /**
     * Load devices
     */
    function loadDevices() {
        dataFactory.getApi('devices').then(function(response) {
            $scope.devices = response.data.data.devices;
        }, function(error) {
            dataService.showConnectionError(error);
        });
    }
    ;

});
/**
 * Report controller
 */
myAppController.controller('ReportController', function($scope, $window, dataFactory, dataService) {
    $scope.ZwaveApiData = false;
    $scope.remoteAccess = false;
    $scope.input = {
        browser_agent: '',
        browser_version: '',
        browser_info: '',
        shui_version: '',
        zwave_vesion: '',
        controller_info: '',
        remote_id: '',
        remote_activated: 0,
        remote_support_activated: 0,
        zwave_binding: 0,
        email: null,
        content: null
    };

    /**
     * Load ZwaveApiData
     */
    $scope.loadZwaveApiData = function() {
        dataService.showConnectionSpinner();
        dataFactory.loadZwaveApiData().then(function(ZWaveAPIData) {
            $scope.ZwaveApiData = ZWaveAPIData;
            dataService.updateTimeTick();
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };

    $scope.loadZwaveApiData();
    /**
     * Load Remote access data
     */
    $scope.loadRemoteAccess = function() {
        if (!$scope.elementAccess($scope.cfg.role_access.remote_access)) {
            return;
        }
        dataFactory.getApi('instances', '/RemoteAccess').then(function(response) {
            $scope.remoteAccess = response.data.data[0];
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };

    $scope.loadRemoteAccess();

    /**
     * Create/Update an item
     */
    $scope.store = function(form, input) {
        if (form.$invalid) {
            return;
        }
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('sending')};
        if ($scope.ZwaveApiData) {
            input.zwave_binding = 1;
            input.zwave_vesion = $scope.ZwaveApiData.controller.data.softwareRevisionVersion.value;
            input.controller_info = JSON.stringify($scope.ZwaveApiData.controller.data);
        }
        if (Object.keys($scope.remoteAccess).length > 0) {
            input.remote_activated = $scope.remoteAccess.params.actStatus ? 1 : 0;
            input.remote_support_activated = $scope.remoteAccess.params.sshStatus ? 1 : 0;
            input.remote_id = $scope.remoteAccess.params.userId;

        }
        input.browser_agent = $window.navigator.appCodeName;
        input.browser_version = $window.navigator.appVersion;
        input.browser_info = 'PLATFORM: ' + $window.navigator.platform + '\nUSER-AGENT: ' + $window.navigator.userAgent;
        input.shui_version = $scope.cfg.app_version;
        //$scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('updating')};
        dataFactory.postReport(input).then(function(response) {
            $scope.loading = {status: 'loading-fade', icon: 'fa-check text-success', message: $scope._t('success_send_report')};
            $window.location.reload();
//            $scope.form.$setPristine();
//           input.content = null;
//            input.email = null;


        }, function(error) {
            alert($scope._t('error_send_report'));
            $scope.loading = false;
        });

    };

});
/**
 * Login controller
 */
myAppController.controller('LoginController', function($scope, $location, $window, $routeParams, $document, $cookies, dataFactory, dataService) {
    $scope.input = {
        form: true,
        login: '',
        password: '',
        keepme: false,
        default_ui: 1
    };
    if (dataService.getUser()) {
        $location.path('/elements');
        return;
    }

    // var bareDomain = $window.location.host
    //console.log(bareDomain)
//document.cookie = 'ZWAYSession=; Domain=' + bareDomain + '; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
//delete $cookies['ZWAYSession'];
//$document.cookie = 'ZWAYSession=; path=/; expires=' + new Date(0).toUTCString();
//console.log($document.cookie)
    /**
     * Login language
     */
    $scope.loginLang = function(lang) {
        $scope.loadLang(lang);
    };
    /**
     * Login proccess
     */
    $scope.login = function(input) {
        input.password = input.password;
        $scope.loading = {status: 'loading-spin', icon: 'fa-spinner fa-spin', message: $scope._t('loading')};
        $scope.alert = {message: false};
        dataFactory.logInApi(input).then(function(response) {
            var user = response.data.data;
            dataService.setZWAYSession(user.sid);
            //delete user['sid'];
            dataService.setUser(user);
            dataService.setLastLogin(Math.round(+new Date() / 1000));
            //$scope.loading = false;
            $scope.input.form = false;
            $window.location.href = '#/elements';
            $window.location.reload();
        }, function(error) {
            var message = $scope._t('error_load_data');
            if (error.status == 401) {
                message = $scope._t('error_load_user');
            }
            $scope.loading = false;
            $scope.alert = {message: message, status: 'alert-danger', icon: 'fa-warning'};
        });
    };
    if ($routeParams.login && $routeParams.password) {
        $scope.login($routeParams);
    }

});
/**
 * Logout controller
 */
myAppController.controller('LogoutController', function($scope, dataService) {
    $scope.logout = function() {
        dataService.logOut();
    };
    $scope.logout();

});
/**
 * Error controller
 */
myAppController.controller('ErrorController', function($scope, $routeParams, dataService) {
    $scope.errorCfg = {
        code: false,
        icon: 'fa-warning'
    };
    /**
     * Logout proccess
     */
    $scope.loadError = function(code) {
        if (code) {
            $scope.errorCfg.code = code;
        } else {
            $scope.errorCfg.code = 0;
        }
        dataService.showConnectionError(code);

    };
    $scope.loadError($routeParams.code);

});


'use strict';

angular.module('colorpicker.module', [])
        .factory('Helper', function() {
            return {
                closestSlider: function(elem) {
                    var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;
                    if (matchesSelector.bind(elem)('I')) {
                        return elem.parentNode;
                    }
                    return elem;
                },
                getOffset: function(elem, fixedPosition) {
                    var
                            x = 0,
                            y = 0,
                            scrollX = 0,
                            scrollY = 0;
                    while (elem && !isNaN(elem.offsetLeft) && !isNaN(elem.offsetTop)) {
                        x += elem.offsetLeft;
                        y += elem.offsetTop;
                        if (!fixedPosition && elem.tagName === 'BODY') {
                            scrollX += document.documentElement.scrollLeft || elem.scrollLeft;
                            scrollY += document.documentElement.scrollTop || elem.scrollTop;
                        } else {
                            scrollX += elem.scrollLeft;
                            scrollY += elem.scrollTop;
                        }
                        elem = elem.offsetParent;
                    }
                    return {
                        top: y,
                        left: x,
                        scrollX: scrollX,
                        scrollY: scrollY
                    };
                },
                // a set of RE's that can match strings and generate color tuples. https://github.com/jquery/jquery-color/
                stringParsers: [
                    {
                        re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
                        parse: function(execResult) {
                            return [
                                execResult[1],
                                execResult[2],
                                execResult[3],
                                execResult[4]
                            ];
                        }
                    },
                    {
                        re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
                        parse: function(execResult) {
                            return [
                                2.55 * execResult[1],
                                2.55 * execResult[2],
                                2.55 * execResult[3],
                                execResult[4]
                            ];
                        }
                    },
                    {
                        re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
                        parse: function(execResult) {
                            return [
                                parseInt(execResult[1], 16),
                                parseInt(execResult[2], 16),
                                parseInt(execResult[3], 16)
                            ];
                        }
                    },
                    {
                        re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,
                        parse: function(execResult) {
                            return [
                                parseInt(execResult[1] + execResult[1], 16),
                                parseInt(execResult[2] + execResult[2], 16),
                                parseInt(execResult[3] + execResult[3], 16)
                            ];
                        }
                    }
                ]
            };
        })
        .factory('Color', ['Helper', function(Helper) {
                return {
                    value: {
                        h: 1,
                        s: 1,
                        b: 1,
                        a: 1
                    },
                    // translate a format from Color object to a string
                    'rgb': function() {
                        var rgb = this.toRGB();
                        return 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
                    },
                    'rgba': function() {
                        var rgb = this.toRGB();
                        return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')';
                    },
                    'hex': function() {
                        return  this.toHex();
                    },
                    // HSBtoRGB from RaphaelJS
                    RGBtoHSB: function(r, g, b, a) {
                        r /= 255;
                        g /= 255;
                        b /= 255;

                        var H, S, V, C;
                        V = Math.max(r, g, b);
                        C = V - Math.min(r, g, b);
                        H = (C === 0 ? null :
                                V === r ? (g - b) / C :
                                V === g ? (b - r) / C + 2 :
                                (r - g) / C + 4
                                );
                        H = ((H + 360) % 6) * 60 / 360;
                        S = C === 0 ? 0 : C / V;
                        return {h: H || 1, s: S, b: V, a: a || 1};
                    },
                    //parse a string to HSB
                    setColor: function(val) {
                        val = val.toLowerCase();
                        for (var key in Helper.stringParsers) {
                            if (Helper.stringParsers.hasOwnProperty(key)) {
                                var parser = Helper.stringParsers[key];
                                var match = parser.re.exec(val),
                                        values = match && parser.parse(match);
                                if (values) {
                                    this.value = this.RGBtoHSB.apply(null, values);
                                    return false;
                                }
                            }
                        }
                    },
                    setHue: function(h) {
                        this.value.h = 1 - h;
                    },
                    setSaturation: function(s) {
                        this.value.s = s;
                    },
                    setLightness: function(b) {
                        this.value.b = 1 - b;
                    },
                    setAlpha: function(a) {
                        this.value.a = parseInt((1 - a) * 100, 10) / 100;
                    },
                    // HSBtoRGB from RaphaelJS
                    // https://github.com/DmitryBaranovskiy/raphael/
                    toRGB: function(h, s, b, a) {
                        if (!h) {
                            h = this.value.h;
                            s = this.value.s;
                            b = this.value.b;
                        }
                        h *= 360;
                        var R, G, B, X, C;
                        h = (h % 360) / 60;
                        C = b * s;
                        X = C * (1 - Math.abs(h % 2 - 1));
                        R = G = B = b - C;

                        h = ~~h;
                        R += [C, X, 0, 0, X, C][h];
                        G += [X, C, C, X, 0, 0][h];
                        B += [0, 0, X, C, C, X][h];
                        return {
                            r: Math.round(R * 255),
                            g: Math.round(G * 255),
                            b: Math.round(B * 255),
                            a: a || this.value.a
                        };
                    },
                    toHex: function(h, s, b, a) {
                        var rgb = this.toRGB(h, s, b, a);
                        return '#' + ((1 << 24) | (parseInt(rgb.r, 10) << 16) | (parseInt(rgb.g, 10) << 8) | parseInt(rgb.b, 10)).toString(16).substr(1);
                    }
                };
            }])
        .factory('Slider', ['Helper', function(Helper) {
                var
                        slider = {
                            maxLeft: 0,
                            maxTop: 0,
                            callLeft: null,
                            callTop: null,
                            knob: {
                                top: 0,
                                left: 0
                            }
                        },
                pointer = {};

                return {
                    getSlider: function() {
                        return slider;
                    },
                    getLeftPosition: function(event) {
                        return Math.max(0, Math.min(slider.maxLeft, slider.left + ((event.pageX || pointer.left) - pointer.left)));
                    },
                    getTopPosition: function(event) {
                        return Math.max(0, Math.min(slider.maxTop, slider.top + ((event.pageY || pointer.top) - pointer.top)));
                    },
                    setSlider: function(event, fixedPosition) {
                        var
                                target = Helper.closestSlider(event.target),
                                targetOffset = Helper.getOffset(target, fixedPosition);
                        slider.knob = target.children[0].style;
                        slider.left = event.pageX - targetOffset.left - window.pageXOffset + targetOffset.scrollX;
                        slider.top = event.pageY - targetOffset.top - window.pageYOffset + targetOffset.scrollY;

                        pointer = {
                            left: event.pageX,
                            top: event.pageY
                        };
                    },
                    setSaturation: function(event, fixedPosition) {
                        slider = {
                            maxLeft: 100,
                            maxTop: 100,
                            callLeft: 'setSaturation',
                            callTop: 'setLightness'
                        };
                        this.setSlider(event, fixedPosition);
                    },
                    setHue: function(event, fixedPosition) {
                        slider = {
                            maxLeft: 0,
                            maxTop: 100,
                            callLeft: false,
                            callTop: 'setHue'
                        };
                        this.setSlider(event, fixedPosition);
                    },
                    setAlpha: function(event, fixedPosition) {
                        slider = {
                            maxLeft: 0,
                            maxTop: 100,
                            callLeft: false,
                            callTop: 'setAlpha'
                        };
                        this.setSlider(event, fixedPosition);
                    },
                    setKnob: function(top, left) {
                        slider.knob.top = top + 'px';
                        slider.knob.left = left + 'px';
                    }
                };
            }])
        .directive('colorpicker', ['$document', '$compile', 'Color', 'Slider', 'Helper', function($document, $compile, Color, Slider, Helper) {
                return {
                    require: '?ngModel',
                    restrict: 'A',
                    link: function($scope, elem, attrs, ngModel) {
                        var
                                thisFormat = attrs.colorpicker ? attrs.colorpicker : 'hex',
                                position = angular.isDefined(attrs.colorpickerPosition) ? attrs.colorpickerPosition : 'bottom',
                                inline = angular.isDefined(attrs.colorpickerInline) ? attrs.colorpickerInline : false,
                                fixedPosition = angular.isDefined(attrs.colorpickerFixedPosition) ? attrs.colorpickerFixedPosition : false,
                                target = angular.isDefined(attrs.colorpickerParent) ? elem.parent() : angular.element(document.body),
                                withInput = angular.isDefined(attrs.colorpickerWithInput) ? attrs.colorpickerWithInput : false,
                                inputTemplate = withInput ? '<input type="text" name="colorpicker-input">' : '',
                                closeButton = !inline ? '<button type="button" class="close close-colorpicker">&times;</button>' : '',
                                template =
                                '<div class="colorpicker dropdown">' +
                                '<div class="dropdown-menu">' +
                                '<colorpicker-saturation><i></i></colorpicker-saturation>' +
                                '<colorpicker-hue><i></i></colorpicker-hue>' +
                                '<colorpicker-alpha><i></i></colorpicker-alpha>' +
                                '<colorpicker-preview></colorpicker-preview>' +
                                inputTemplate +
                                closeButton +
                                '</div>' +
                                '</div>',
                                colorpickerTemplate = angular.element(template),
                                pickerColor = Color,
                                sliderAlpha,
                                sliderHue = colorpickerTemplate.find('colorpicker-hue'),
                                sliderSaturation = colorpickerTemplate.find('colorpicker-saturation'),
                                colorpickerPreview = colorpickerTemplate.find('colorpicker-preview'),
                                pickerColorPointers = colorpickerTemplate.find('i');

                        $compile(colorpickerTemplate)($scope);

                        if (withInput) {
                            var pickerColorInput = colorpickerTemplate.find('input');
                            pickerColorInput
                                    .on('mousedown', function(event) {
                                        event.stopPropagation();
                                    })
                                    .on('keyup', function(event) {
                                        var newColor = this.value;
                                        elem.val(newColor);
                                        if (ngModel) {
                                            $scope.$apply(ngModel.$setViewValue(newColor));
                                        }
                                        event.stopPropagation();
                                        event.preventDefault();
                                    });
                            elem.on('keyup', function() {
                                pickerColorInput.val(elem.val());
                            });
                        }

                        var bindMouseEvents = function() {
                            $document.on('mousemove', mousemove);
                            $document.on('mouseup', mouseup);
                        };

                        if (thisFormat === 'rgba') {
                            colorpickerTemplate.addClass('alpha');
                            sliderAlpha = colorpickerTemplate.find('colorpicker-alpha');
                            sliderAlpha
                                    .on('click', function(event) {
                                        Slider.setAlpha(event, fixedPosition);
                                        mousemove(event);
                                    })
                                    .on('mousedown', function(event) {
                                        Slider.setAlpha(event, fixedPosition);
                                        bindMouseEvents();
                                    });
                        }

                        sliderHue
                                .on('click', function(event) {
                                    Slider.setHue(event, fixedPosition);
                                    mousemove(event);
                                })
                                .on('mousedown', function(event) {
                                    Slider.setHue(event, fixedPosition);
                                    bindMouseEvents();
                                });

                        sliderSaturation
                                .on('click', function(event) {
                                    Slider.setSaturation(event, fixedPosition);
                                    mousemove(event);
                                    if (angular.isDefined(attrs.colorpickerCloseOnSelect)) {
                                        hideColorpickerTemplate();
                                    }
                                })
                                .on('mousedown', function(event) {
                                    Slider.setSaturation(event, fixedPosition);
                                    bindMouseEvents();
                                });

                        if (fixedPosition) {
                            colorpickerTemplate.addClass('colorpicker-fixed-position');
                        }

                        colorpickerTemplate.addClass('colorpicker-position-' + position);
                        if (inline === 'true') {
                            colorpickerTemplate.addClass('colorpicker-inline');
                        }

                        target.append(colorpickerTemplate);

                        if (ngModel) {
                            ngModel.$render = function() {
                                elem.val(ngModel.$viewValue);
                            };
                            $scope.$watch(attrs.ngModel, function(newVal) {
                                update();

                                if (withInput) {
                                    pickerColorInput.val(newVal);
                                }
                            });
                        }

                        elem.on('$destroy', function() {
                            colorpickerTemplate.remove();
                        });

                        var previewColor = function() {
                            try {
                                colorpickerPreview.css('backgroundColor', pickerColor[thisFormat]());
                            } catch (e) {
                                colorpickerPreview.css('backgroundColor', pickerColor.toHex());
                            }
                            sliderSaturation.css('backgroundColor', pickerColor.toHex(pickerColor.value.h, 1, 1, 1));
                            if (thisFormat === 'rgba') {
                                sliderAlpha.css.backgroundColor = pickerColor.toHex();
                            }
                        };

                        var mousemove = function(event) {
                            var
                                    left = Slider.getLeftPosition(event),
                                    top = Slider.getTopPosition(event),
                                    slider = Slider.getSlider();

                            Slider.setKnob(top, left);

                            if (slider.callLeft) {
                                pickerColor[slider.callLeft].call(pickerColor, left / 100);
                            }
                            if (slider.callTop) {
                                pickerColor[slider.callTop].call(pickerColor, top / 100);
                            }
                            previewColor();
                            var newColor = pickerColor[thisFormat]();
                            elem.val(newColor);

                            if (ngModel) {
                                $scope.$apply(ngModel.$setViewValue(newColor));
                            }
                            if (withInput) {
                                pickerColorInput.val(newColor);
                            }
                            return false;
                        };

                        var mouseup = function() {
                            /*** Custom update ***/
                            var lang = attrs.cmdurl;
                            var sid = attrs.sid;
                            var url = attrs.cmdurl;
                            var color = pickerColor[thisFormat]();
                            var array = color.match(/\((.*)\)/)[1].split(',');
                            var cmd = url + '?red=' + array[0] + '&green=' + array[1] + '&blue=' + array[2];
                            $.ajax({
                                type: "GET",
                                url: cmd,
                                headers: {
                                    'Accept-Language': lang,
                                    'ZWAYSession': sid
                                }
                            });
                            //console.log('RGB change', cmd)
                            /*** END - Custom update ***/
                            $document.off('mousemove', mousemove);
                            $document.off('mouseup', mouseup);
                        };

                        var update = function() {

                            pickerColor.setColor(elem.val());
                            pickerColorPointers.eq(0).css({
                                left: pickerColor.value.s * 100 + 'px',
                                top: 100 - pickerColor.value.b * 100 + 'px'
                            });
                            pickerColorPointers.eq(1).css('top', 100 * (1 - pickerColor.value.h) + 'px');
                            pickerColorPointers.eq(2).css('top', 100 * (1 - pickerColor.value.a) + 'px');
                            previewColor();
                        };

                        var getColorpickerTemplatePosition = function() {
                            var
                                    positionValue,
                                    positionOffset = Helper.getOffset(elem[0]);

                            if (angular.isDefined(attrs.colorpickerParent)) {
                                positionOffset.left = 0;
                                positionOffset.top = 0;
                            }

                            if (position === 'top') {
                                positionValue = {
                                    'top': positionOffset.top - 147,
                                    'left': positionOffset.left
                                };
                            } else if (position === 'right') {
                                positionValue = {
                                    'top': positionOffset.top,
                                    'left': positionOffset.left + 126
                                };
                            } else if (position === 'bottom') {
                                positionValue = {
                                    'top': positionOffset.top + elem[0].offsetHeight + 2,
                                    'left': positionOffset.left
                                };
                            } else if (position === 'left') {
                                positionValue = {
                                    'top': positionOffset.top,
                                    'left': positionOffset.left - 150
                                };
                            }
                            return {
                                'top': positionValue.top + 'px',
                                'left': positionValue.left + 'px'
                            };
                        };

                        var documentMousedownHandler = function() {
                            hideColorpickerTemplate();
                        };

                        var showColorpickerTemplate = function() {

                            if (!colorpickerTemplate.hasClass('colorpicker-visible')) {
                                update();
                                colorpickerTemplate
                                        .addClass('colorpicker-visible')
                                        .css(getColorpickerTemplatePosition());

                                if (inline === false) {
                                    // register global mousedown event to hide the colorpicker
                                    $document.on('mousedown', documentMousedownHandler);
                                }

                                if (attrs.colorpickerIsOpen) {
                                    $scope[attrs.colorpickerIsOpen] = true;
                                    if (!$scope.$$phase) {
                                        $scope.$digest(); //trigger the watcher to fire
                                    }
                                }
                            }

                        };

                        if (inline === false) {
                            elem.on('click', showColorpickerTemplate);
                        } else {
                            showColorpickerTemplate();
                        }

                        colorpickerTemplate.on('mousedown', function(event) {
                            event.stopPropagation();
                            event.preventDefault();
                        });

                        var emitEvent = function(name) {
                            if (ngModel) {
                                $scope.$emit(name, {
                                    name: attrs.ngModel,
                                    value: ngModel.$modelValue
                                });
                            }
                        };

                        var hideColorpickerTemplate = function() {
                            if (colorpickerTemplate.hasClass('colorpicker-visible')) {
                                colorpickerTemplate.removeClass('colorpicker-visible');
                                emitEvent('colorpicker-closed');
                                // unregister the global mousedown event
                                $document.off('mousedown', documentMousedownHandler);

                                if (attrs.colorpickerIsOpen) {
                                    $scope[attrs.colorpickerIsOpen] = false;
                                    if (!$scope.$$phase) {
                                        $scope.$digest(); //trigger the watcher to fire
                                    }
                                }
                            }
                        };

                        colorpickerTemplate.find('button').on('click', function() {
                            hideColorpickerTemplate();
                        });

                        if (attrs.colorpickerIsOpen) {
                            $scope.$watch(attrs.colorpickerIsOpen, function(shouldBeOpen) {

                                if (shouldBeOpen === true) {
                                    showColorpickerTemplate();
                                } else if (shouldBeOpen === false) {
                                    hideColorpickerTemplate();
                                }

                            });
                        }

                    }
                };
            }]);

// device filter for device select menu
function devices_htmlSelect_filter(ZWaveAPIData,span,dev,type) {
	// return true means to skip this node
	switch(type) {
		case 'srcnode':
			// allow everything, since events can come from any device via timed_event
			return false;

			// skip virtual, controller or broadcast as event source
			//return ( (ZWaveAPIData.devices[dev].data.isVirtual.value || dev == ZWaveAPIData.controller.data.nodeId.value || dev == 255));

		case 'dstnode':
			// skip not virtual, not controller and not broadcast as event destination
			return (!(ZWaveAPIData.devices[dev].data.isVirtual.value || dev == ZWaveAPIData.controller.data.nodeId.value || dev == 255));

		case 'device':
			return ZWaveAPIData.devices[dev].data.isVirtual.value || dev == ZWaveAPIData.controller.data.nodeId.value;

		case 'node':
			// skip non-FLiRS sleeping in list of associations/wakeup node notifications/... in CC params of type node
			return (!ZWaveAPIData.devices[dev].data.isListening.value && !ZWaveAPIData.devices[dev].data.sensor250.value && !ZWaveAPIData.devices[dev].data.sensor1000.value);

		default:
			return false;
	}
};

// returns array with default values: first value from the enum, minimum value for range, empty string for string, first nodeId for node, default schedule for the climate_schedule
function method_defaultValues(ZWaveAPIData,method) {
     
	function method_defaultValue(val) {
		if ('enumof' in val['type']) {
			if (val['type']['enumof'][0])
				return method_defaultValue(val['type']['enumof'][0]); // take first item of enumof
			else
				return null;
		}
		if ('range' in val['type'])
			return val['type']['range']['min'];
		if ('fix' in val['type'])
			return val['type']['fix']['value'];
		if ('string' in val['type'])
			return "";
		if ('node' in val['type'])
			for (var dev in ZWaveAPIData.devices) {
				if (devices_htmlSelect_filter(ZWaveAPIData,null,dev,'node')) {
					continue;
				};
				return parseInt(dev);
			};
		alert('method_defaultValue: unknown type of value');
	};

	var parameters = [];
//	method.forEach(function(val,parameter_index){
//		parameters[parameter_index] = method_defaultValue(val);
//	});
        angular.forEach(method,function(val,parameter_index){
		parameters[parameter_index] = method_defaultValue(val);
	});
       
	return parameters;
};

// represent array with number, string and array elements in reversible way: use eval('[' + return_value + ']') to rever back to an array
function repr_array(arr) {
	var repr='';
	for (var indx in arr) {
		if (repr != '')
			repr += ',';
		switch (typeof(arr[indx])) {
			case 'number':
				repr += arr[indx].toString();
				break;
			case 'string':
				repr += "'" + arr[indx].replace(/'/g, "\'") + "'"; // " // just for joe to hilight syntax properly
				break;
			case 'object':
				repr += '[' + repr_array(arr[indx]) + ']';
				break;
			default:
				if (arr[indx] === null)
					repr += 'null'; // for null object
				else
					error_msg('Unknown type of parameter: ' + typeof(arr[indx]));
		}
	};

	return repr;
};

/*
	Array unique
*/
function array_unique(arr) {
	var newArray = new Array();

	label:for (var i=0; i<arr.length;i++ ) {  
		for (var j=0; j<newArray.length;j++ )
			if (newArray[j] == arr[i]) 
				continue label;
		newArray[newArray.length] = arr[i];
	}
	return newArray;
};
var _methods_specs_rendered = null;
function getMethodSpec(ZWaveAPIData,devId, instId, ccId, method) {
	if (_methods_specs_rendered === null)
        renderAllMethodSpec(ZWaveAPIData);
	
	try {
		if (!(devId in _methods_specs_rendered))
			_methods_specs_rendered[devId] = {};
		if (!(instId in _methods_specs_rendered[devId]))
			_methods_specs_rendered[devId][instId] = {};
		if (!(ccId in _methods_specs_rendered[devId][instId]))
			 _methods_specs_rendered[devId][instId][ccId] = renderMethodSpec(parseInt(ccId, 10), ZWaveAPIData.devices[devId].instances[instId].commandClasses[ccId].data);

		var methods = _methods_specs_rendered[devId][instId][ccId];
		if (method)
			return methods[method];
		else
			return methods;
	} catch(err) {
		return null;
	}
}

function renderAllMethodSpec(ZWaveAPIData) {
	_methods_specs_rendered = {};
	
	for (var devId in ZWaveAPIData.devices) {
		_methods_specs_rendered[devId] = {};
		for (var instId in ZWaveAPIData.devices[devId].instances) {
			_methods_specs_rendered[devId][instId] = {};
			for (var ccId in ZWaveAPIData.devices[devId].instances[instId].commandClasses) {
				_methods_specs_rendered[devId][instId][ccId] = renderMethodSpec(parseInt(ccId, 10), ZWaveAPIData.devices[devId].instances[instId].commandClasses[ccId].data);
			}
		}
	}
}

function renderMethodSpec(ccId, data) {
	switch (ccId) {

		// PowerLevel
		case 0x73:
			return {
				"Get": [],
				"TestNodeGet": [],



				"TestNodeSet": [
					{
						"label": "Node ID",
						"type": {
							"range": {
								"min": 0,
								"max": 232
							}
						}
					},

					{			
						"label": "PowerLevel",
						"type": {
							"enumof": [
								{
									"label": "-9dbm ", "type":{
										"fix": 	{
											"value": 9
										}
									}
								},
								{
									"label": "-8dbm ", "type":{
										"fix": 	{
											"value": 8
										}
									}
								},
								{
									"label": "-7dbm ", "type":{
										"fix": 	{
											"value": 7
										}
									}
								},
								{
									"label": "-6dbm ", "type":{
										"fix": 	{
											"value": 6
										}
									}
								},
								{
									"label": "-5dbm ", "type":{
										"fix": 	{
											"value": 5
										}
									}
								},
								{
									"label": "-4dbm ", "type":{
										"fix": 	{
											"value": 4
										}
									}
								},
								{
									"label": "-3dbm ", "type":{
										"fix": 	{
											"value": 3
										}
									}
								},
								{
									"label": "-2dbm ", "type":{
										"fix": 	{
											"value": 2
										}
									}
								},
								{
									"label": "-1dbm ", "type":{
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "Normal ", "type":{
										"fix": 	{
											"value": 0
										}
									}
								}
							]
						}				
					},
					{				
						"label": "Number of pakets",
						"type": {
							"range": {
								"min": 0,
								"max": 1000
							}
						}					
					
					}
				],


				
				"Set":[
					{
						"label": "PowerLevel",
						"type": {
							"enumof": [
								{
									"label": "-9dbm ", "type":{
										"fix": 	{
											"value": 9
										}
									}
								},
								{
									"label": "-8dbm ", "type":{
										"fix": 	{
											"value": 8
										}
									}
								},
								{
									"label": "-7dbm ", "type":{
										"fix": 	{
											"value": 7
										}
									}
								},
								{
									"label": "-6dbm ", "type":{
										"fix": 	{
											"value": 6
										}
									}
								},
								{
									"label": "-5dbm ", "type":{
										"fix": 	{
											"value": 5
										}
									}
								},
								{
									"label": "-4dbm ", "type":{
										"fix": 	{
											"value": 4
										}
									}
								},
								{
									"label": "-3dbm ", "type":{
										"fix": 	{
											"value": 3
										}
									}
								},
								{
									"label": "-2dbm ", "type":{
										"fix": 	{
											"value": 2
										}
									}
								},
								{
									"label": "-1dbm ", "type":{
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "Normal ", "type":{
										"fix": 	{
											"value": 0
										}
									}
								}
							]
						}
					},
					{
						"label": "Timeout (s)",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					}
				]
			};


	
		//SwitchColor
		case 0x33:
			return {
				"Get": [
				       {
						"label": "Color Capability",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].capabilityString.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					}
				],
				"Set": [
				       {
						"label": "Color Capability",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].capabilityString.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					},
					{
						"label": "Value",
						"type": {
							"range": {
								"min": 	0,
								"max": 	255
							}
						}
					}
				],
				"StartStateChange": [
					{
						"label": "Color Capability",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].capabilityString.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					},
					{
						"label": "Direction",
						"type": {
							"enumof": [
								{
									"label": "Up",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Down",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								}
							]
						}
					},													
				],
				"StopStateChange": [
					{
						"label": "Color Capability",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].capabilityString.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					}								
				]
			};
 

		// Schedule (incomplete)
		case 0x53:
			return {
				"Get": [
					{
						"label": "Id",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				]
			};
		
		// AssociationGroupInformation
		case 0x59:
			return {
 
				"GetName": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				],
				"GetInfo": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				],
				"GetCommands": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				]
			};

		// ZWavePlusInfo
		case 0x5e:
			return {
				"Get": []
			};
		
		case 0x85:
			return {
				"GroupingsGet": [],
				"Get": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				],
				"Set": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					},
					{
						"label": "Node",
						"type": {
							"node": {
							}
						}
					}
				],
				"Remove": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					},
					{
						"label": "Node",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				]
			};
	
		// Version
		case 0x86:
			return {
				/*
				Version is not publically exported in Z-Way.C

				"CommandClassVersionGet": [
					{
						"label":"CommandClass",
						"type":	{
							"range":	{
								"min":	0x0001,
								"max":	0xFFFF
							}
						}
					}
				]
				*/
			};

		// UserCode
		case 0x63:
			return {
				"Get": [
					{
						"label": "User",
						"type":	{
							"range": {
								"min": 	0,
								"max": 	99
							}
						}
					}
				],
				"Set": [
					{
						"label": "User",
						"type": {
							"enumof": [
								{
									"label": "All usercodes",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Id",
									"type": {
										"range": {
											"min": 	1,
											"max": 	99
										}
									}
								}
							]
						}
					},
					{
						"label": "Code (4...10 Digits)",
						"type": {
							"string": {
							}
						}
					},
					{
						"label": "Mode",
						"type": {
							"enumof": [
								{
									"label": "Not Set",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Set",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "Reserved",
									"type": {
										"fix": 	{
											"value": 2
										}
									}
								}
							]
						}
					}
				]
			};
			
		// Time Parameters
		case 0x8B:
			return {
				"Get": [],
				"Set": []
			};
			
		// Thermostat SetPoint
		case 0x43:
			return {
				"Get": [
				       {
						"label": "Type",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].modeName.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					}
				],
				"Set": [
				       {
						"label": "Type",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].modeName.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					},
					{
						"label": "Value",
						"type": {
							"range": {
								"min": 	0,
								"max": 	100
							}
						}
					}
				]
			};

		// Wakeup	
		case 0x84:
			return {
				"Get": [],
				"CapabilitiesGet": [],
				"Set": [
				       {
						"label": "Wakeup time, seconds",
						"type": {
							"range": {
								"min": 	(
									function() {
										try {
											if (data.version.value >= 2 && data.min.value !== null)
												return data.min.value;
										} catch(err) {}
										return 0;
									}
									)(),
								"max": 	(
									function() {
										try {
											if (data.version.value >= 2 && data.max.value !== null)
												return data.max.value;
										} catch(err) {}
										return 256 * 256 * 256 - 1;
									}
									)()
							}
						}
					},
					{
						"label": "to Node",
						"type": {
							"node": {}
						}
					}
				],
				"Sleep": []
			};

		// Time
		case 0x8A:
			return {
				"TimeGet": [],
				"DateGet": []
			};

		// ThermostatMode
		case 0x40:
			return {
				"Get": [],
				"Set": [
					{
						"label": "Type",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].modeName.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					}
				]
			};

		// ThermostatFanMode
		case 0x44:
			return {
				"Get": [],
				"Set": [
					{
						"label": "Level",
						"type": {
							"enumof": [
								{
									"label": "Off",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "On",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								}
							]
						}
					},
					{
						"label": "Type",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].modeName.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					}
				]
			};

		// ThermostatFanState
		case 0x45: 
			return {
				"Get": []
			};

		// ThermostatOperatingState
		case 0x42:
			return {
				"Get": [],
				"LoggingGet" : [
					{
						"label": "States (bitmask)",
						"type": {
							"range": {
								"min": 1,
								"max": 99
							}
						}
					}
				]
			};

		// SwitchMultilevel
		case 0x26:
			return {
				"Get": [],
				"Set": [
					{
						"label": "Dimmer level",
						"type": {
							"enumof": [
								{
									"label": "Off",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "%",
									"type": {
										"range": {
											"min": 0,
											"max": 99
										}
									}
								},
								{
									"label": "Full",
									"type": {
										"fix": 	{
											"value": 99
										}
									}
								},
								{
									"label": "On",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				],
				"StartLevelChange": [
				       {
						"label": "Direction",
						"type": {
							"enumof": [
								{
									"label": "Up",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Down",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								}
							]
						}
					},
				],
				"StopLevelChange": [],
				"SetWithDuration": [
					{
						"label": "Dimmer level",
						"type": {
							"enumof": [
								{
									"label": "Off",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "%",
									"type": {
										"range": {
											"min": 0,
											"max": 99
										}
									}
								},
								{
									"label": "Full",
									"type": {
										"fix": 	{
											"value": 99
										}
									}
								},
								{
									"label": "On",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					},
					{
						"label": "Duration",
						"type": {
							"enumof": [
								{
									"label": "immediately",
									"type": {
									"fix": 	{
										"value": 0
										}
									}
								},
									{
									"label": "in seconds",
									"type": {
										"range": {
											"min": 	1,
											"max": 127
										}
									}
								},
									{
									"label": "in minutes",
									"type": {
										"range": {
											"min": 	1,
											"max": 127,
											"shift": 127
										}
									}
								},
								{
									"label": "use device default",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				],
				"StartLevelChangeWithDurationV2": [
					{
						"label": "Direction",
						"type": {
							"enumof": [
								{
									"label": "Up",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Down",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								}
							]
						}
					},
					{
						"label": "Duration",
						"type": {
							"enumof": [
								{
									"label": "immediately",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "in seconds",
									"type": {
										"range": {
											"min": 	1,
											"max": 127
										}
									}
								},
								{
									"label": "in minutes",
									"type": {
										"range": {
											"min": 	1,
											"max": 127,
										"shift": 	127
										}
									}
								},
								{
									"label": "use device default",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				],
				"SetMotorA": [
					{
						"label": "Status",
						"type": {
							"enumof": [
								{
									"label": "Close",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Open",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				],
				"StartLevelChangeMotorA": [
					{
						"label": "Start Move",
						"type": {
							"enumof": [
								{
									"label": "Up",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Down",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								}
							]
						}
					}
				],
				"StopLevelChangeMotorA": [],
				"SetMotorB": [
					{
						"label": "Blind Position",
						"type": {
							"enumof": [
								{
									"label": "Close",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "%",
									"type": {
										"range": {
											"min": 0,
											"max": 99
										}
									}
								},
								{
									"label": "Open",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								},
								]
						}
					}
				],
				"StartLevelChangeMotorB": [
					{
						"label": "Start Move",
						"type": {
							"enumof": [
								{
									"label": "Up",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Down",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								}
							]
						}
					}
				],
				"StopLevelChange": []
			};

		// SwtichBinary
		case 0x25:
			return {
				"Get": [],
				"Set": [
					{
						"label": "Level",
						"type": {
							"enumof": [
								{
									"label": "Off",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "On",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				]
			};

		// SimpleAV
		case 0x94:
			return {
				"SetEmpty": [
					{
						"label": "Key attribute",
						"type": {
							"enumof": [
								{
									"label": "Key Down",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Key Up",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "Key Alive",
									"type": {
										"fix": 	{
											"value": 2
										}
									}
								},
								]
						}
					},
					{
						"label": "Media item",
						"type": {
							"enumof": [
								{
									"label": "No",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "ID",
									"type": {
										"range": {
											"min": 0,
											"max": 0
										}
									}
								},
								]
						}
					},
					{
						"label": "Button",
						"type": {
							"enumof": []
						}
					},
				],
				"SetFull": [
					{
						"label": "Mute",
						"type": {
							"fix": 	{
								"value": 0x0001
							}
						}
					},
					{
						"label": "Volume down",
						"type": {
							"fix": 	{
								"value": 0x0002
							}
						}
					},
					{
						"label": "Volume up",
						"type": {
							"fix": 	{
								"value": 0x0003
									}
								}
							},
							{
						"label": "Channel up",
						"type": {
							"fix": 	{
								"value": 0x0004
							}
						}
					},
					{
						"label": "Channel down",
						"type": {
							"fix": 	{
								"value": 0x0005
							}
						}
					},
					{
						"label": "0",
						"type": {
							"fix": 	{
								"value": 0x0006
							}
						}
					},
					{
						"label": "1",
						"type": {
							"fix": 	{
								"value": 0x0007
							}
						}
					},
					{
						"label": "2",
						"type": {
							"fix": 	{
								"value": 0x0008
							}
						}
					},
					{
						"label": "3",
						"type": {
							"fix": 	{
								"value": 0x0009
							}
						}
					},
					{
						"label": "4",
						"type": {
							"fix": 	{
								"value": 0x000A
							}
						}
					},
					{
						"label": "5",
						"type": {
							"fix": 	{
								"value": 0x000B
							}
						}
					},
					{
						"label": "6",
						"type": {
							"fix": 	{
								"value": 0x000C
							}
						}
					},
					{
						"label": "7",
						"type": {
							"fix": 	{
								"value": 0x000D
							}
						}
					},
					{
						"label": "8",
						"type": {
							"fix": 	{
								"value": 0x000E
							}
						}
					},
					{
						"label": "9",
						"type": {
							"fix": 	{
								"value": 0x000F
							}
						}
					},
					{
						"label": "Last channel",
						"type": {
							"fix": 	{
								"value": 0x0010
							}
						}
					},
					{
						"label": "Display",
						"type": {
							"fix": 	{
								"value": 0x0011
							}
						}
					},
					{
						"label": "Favorite channel",
						"type": {
							"fix": 	{
								"value": 0x0012
							}
						}
					},
					{
						"label": "Play",
						"type": {
							"fix": 	{
								"value": 0x0013
							}
						}
					},
					{
						"label": "Stop",
						"type": {
							"fix": 	{
								"value": 0x0014
							}
						}
					},
					{
						"label": "Pause",
						"type": {
							"fix": 	{
								"value": 0x0015
							}
						}
					},
					{
						"label": "Fast forward",
						"type": {
							"fix": 	{
								"value": 0x0016
							}
						}
					},
					{
						"label": "Rewind",
						"type": {
							"fix": 	{
								"value": 0x0017
							}
						}
					},
					{
						"label": "Instant replay",
						"type": {
							"fix": 	{
								"value": 0x0018
							}
						}
					},
					{
						"label": "Record",
						"type": {
							"fix": 	{
								"value": 0x0019
							}
						}
					},
					{
						"label": "AC3",
						"type": {
							"fix": 	{
								"value": 0x001A
							}
						}
					},
					{
						"label": "PVR menu",
						"type": {
							"fix": 	{
								"value": 0x001B
							}
						}
					},
					{
						"label": "Guide",
						"type": {
							"fix": 	{
								"value": 0x001C
							}
						}
					},
					{
						"label": "Menu",
						"type": {
							"fix": 	{
								"value": 0x001D
							}
						}
					},
					{
						"label": "Menu up",
						"type": {
							"fix": 	{
								"value": 0x001E
							}
						}
					},
					{
						"label": "Menu down",
						"type": {
							"fix": 	{
								"value": 0x001F
							}
						}
					},
					{
						"label": "Menu left",
						"type": {
							"fix": 	{
								"value": 0x0020
							}
						}
					},
					{
						"label": "Menu right",
						"type": {
							"fix": 	{
								"value": 0x0021
							}
						}
					},
					{
						"label": "Page up",
						"type": {
							"fix": 	{
								"value": 0x0022
							}
						}
					},
					{
						"label": "Page down",
						"type": {
							"fix": 	{
								"value": 0x0023
							}
						}
					},
					{
						"label": "Select",
						"type": {
							"fix": 	{
								"value": 0x0024
							}
						}
					},
					{
						"label": "Exit",
						"type": {
							"fix": 	{
								"value": 0x0025
							}
						}
					},
					{
						"label": "Input",
						"type": {
							"fix": 	{
								"value": 0x0026
							}
						}
					},
					{
						"label": "Power",
						"type": {
							"fix": 	{
								"value": 0x0027
							}
						}
					},
					{
						"label": "Enter channel",
						"type": {
							"fix": 	{
								"value": 0x0028
							}
						}
					},
					{
						"label": "10",
						"type": {
							"fix": 	{
								"value": 0x0029
							}
						}
					},
					{
						"label": "11",
						"type": {
							"fix": 	{
								"value": 0x002A
							}
						}
					},
					{
						"label": "12",
						"type": {
							"fix": 	{
								"value": 0x002B
							}
						}
					},
					{
						"label": "13",
						"type": {
							"fix": 	{
								"value": 0x002C
							}
						}
					},
					{
						"label": "14",
						"type": {
							"fix": 	{
								"value": 0x002D
							}
						}
					},
					{
						"label": "15",
						"type": {
							"fix": 	{
								"value": 0x002E
							}
						}
					},
					{
						"label": "16",
						"type": {
							"fix": 	{
								"value": 0x002F
							}
						}
					},
					{
						"label": "+10",
						"type": {
							"fix": 	{
								"value": 0x0030
							}
						}
					},
					{
						"label": "+20",
						"type": {
							"fix": 	{
								"value": 0x0031
							}
						}
					},
					{
						"label": "+100",
						"type": {
							"fix": 	{
								"value": 0x0032
							}
						}
					},
					{
						"label": "-/--",
						"type": {
							"fix": 	{
								"value": 0x0033
							}
						}
					},
					{
						"label": "3-CH",
						"type": {
							"fix": 	{
								"value": 0x0034
							}
						}
					},
					{
						"label": "3D",
						"type": {
							"fix": 	{
								"value": 0x0035
							}
						}
					},
					{
						"label": "6-CH input",
						"type": {
							"fix": 	{
								"value": 0x0036
							}
						}
					},
					{
						"label": "A",
						"type": {
							"fix": 	{
								"value": 0x0037
							}
						}
					},
					{
						"label": "Add",
						"type": {
							"fix": 	{
								"value": 0x0038
							}
						}
					},
					{
						"label": "Alarm",
						"type": {
							"fix": 	{
								"value": 0x0039
							}
						}
					},
					{
						"label": "AM",
						"type": {
							"fix": 	{
								"value": 0x003A
							}
						}
					},
					{
						"label": "Analog",
						"type": {
							"fix": 	{
								"value": 0x003B
							}
						}
					},
					{
						"label": "Angle",
						"type": {
							"fix": 	{
								"value": 0x003C
							}
						}
					},
					{
						"label": "Antenna",
						"type": {
							"fix": 	{
								"value": 0x003D
							}
						}
					},
					{
						"label": "Antenna east",
						"type": {
							"fix": 	{
								"value": 0x003E
							}
						}
					},
					{
						"label": "Antenna west",
						"type": {
							"fix": 	{
								"value": 0x003F
							}
						}
					},
					{
						"label": "Aspect",
						"type": {
							"fix": 	{
								"value": 0x0040
							}
						}
					},
					{
						"label": "Audio 1",
						"type": {
							"fix": 	{
								"value": 0x0041
							}
						}
					},
					{
						"label": "Audio 2",
						"type": {
							"fix": 	{
								"value": 0x0042
							}
						}
					},
					{
						"label": "Audio 3",
						"type": {
							"fix": 	{
								"value": 0x0043
							}
						}
					},
					{
						"label": "Audio dubbing",
						"type": {
							"fix": 	{
								"value": 0x0044
							}
						}
					},
					{
						"label": "Audio level down",
						"type": {
							"fix": 	{
								"value": 0x0045
							}
						}
					},
					{
						"label": "Audio level up",
						"type": {
							"fix": 	{
								"value": 0x0046
							}
						}
					},
					{
						"label": "Auto/Manual",
						"type": {
							"fix": 	{
								"value": 0x0047
							}
						}
					},
					{
						"label": "Aux 1",
						"type": {
							"fix": 	{
								"value": 0x0048
							}
						}
					},
					{
						"label": "Aux 2",
						"type": {
							"fix": 	{
								"value": 0x0049
							}
						}
					},
					{
						"label": "B",
						"type": {
							"fix": 	{
								"value": 0x004A
							}
						}
					},
					{
						"label": "Back",
						"type": {
							"fix": 	{
								"value": 0x004B
							}
						}
					},
					{
						"label": "Background",
						"type": {
							"fix": 	{
								"value": 0x004C
							}
						}
					},
					{
						"label": "Balance",
						"type": {
							"fix": 	{
								"value": 0x004D
							}
						}
					},
					{
						"label": "Balance left",
						"type": {
							"fix": 	{
								"value": 0x004E
							}
						}
					},
					{
						"label": "Balance right",
						"type": {
							"fix": 	{
								"value": 0x004F
							}
						}
					},
					{
						"label": "Band",
						"type": {
							"fix": 	{
								"value": 0x0050
							}
						}
					},
					{
						"label": "Bandwidth",
						"type": {
							"fix": 	{
								"value": 0x0051
							}
						}
					},
					{
						"label": "Bass",
						"type": {
							"fix": 	{
								"value": 0x0052
							}
						}
					},
					{
						"label": "Bass down",
						"type": {
							"fix": 	{
								"value": 0x0053
							}
						}
					},
					{
						"label": "Bass up",
						"type": {
							"fix": 	{
								"value": 0x0054
							}
						}
					},
					{
						"label": "Blank",
						"type": {
							"fix": 	{
								"value": 0x0055
							}
						}
					},
					{
						"label": "Breeze mode",
						"type": {
							"fix": 	{
								"value": 0x0056
							}
						}
					},
					{
						"label": "Bright",
						"type": {
							"fix": 	{
								"value": 0x0057
							}
						}
					},
					{
						"label": "Brightness",
						"type": {
							"fix": 	{
								"value": 0x0058
							}
						}
					},
					{
						"label": "Brightness down",
						"type": {
							"fix": 	{
								"value": 0x0059
							}
						}
					},
					{
						"label": "Brightness up",
						"type": {
							"fix": 	{
								"value": 0x005A
							}
						}
					},
					{
						"label": "Buy",
						"type": {
							"fix": 	{
								"value": 0x005B
							}
						}
					},
					{
						"label": "C",
						"type": {
							"fix": 	{
								"value": 0x005C
							}
						}
					},
					{
						"label": "Camera",
						"type": {
							"fix": 	{
								"value": 0x005D
							}
						}
					},
					{
						"label": "Category down",
						"type": {
							"fix": 	{
								"value": 0x005E
							}
						}
					},
					{
						"label": "Category up",
						"type": {
							"fix": 	{
								"value": 0x005F
							}
						}
					},
					{
						"label": "Center",
						"type": {
							"fix": 	{
								"value": 0x0060
							}
						}
					},
					{
						"label": "Center down",
						"type": {
							"fix": 	{
								"value": 0x0061
							}
						}
					},
					{
						"label": "Center mode",
						"type": {
							"fix": 	{
								"value": 0x0062
							}
						}
					},
					{
						"label": "Center up",
						"type": {
							"fix": 	{
								"value": 0x0063
							}
						}
					},
					{
						"label": "Channel/Program",
						"type": {
							"fix": 	{
								"value": 0x0064
							}
						}
					},
					{
						"label": "Clear",
						"type": {
							"fix": 	{
								"value": 0x0065
							}
						}
					},
					{
						"label": "Close",
						"type": {
							"fix": 	{
								"value": 0x0066
							}
						}
					},
					{
						"label": "Closed caption",
						"type": {
							"fix": 	{
								"value": 0x0067
							}
						}
					},
					{
						"label": "Cold",
						"type": {
							"fix": 	{
								"value": 0x0068
							}
						}
					},
					{
						"label": "Color",
						"type": {
							"fix": 	{
								"value": 0x0069
							}
						}
					},
					{
						"label": "Color down",
						"type": {
							"fix": 	{
								"value": 0x006A
							}
						}
					},
					{
						"label": "Color up",
						"type": {
							"fix": 	{
								"value": 0x006B
							}
						}
					},
					{
						"label": "Component 1",
						"type": {
							"fix": 	{
								"value": 0x006C
							}
						}
					},
					{
						"label": "Component 2",
						"type": {
							"fix": 	{
								"value": 0x006D
							}
						}
					},
					{
						"label": "Component 3",
						"type": {
							"fix": 	{
								"value": 0x006E
							}
						}
					},
					{
						"label": "Concert",
						"type": {
							"fix": 	{
								"value": 0x006F
							}
						}
					},
					{
						"label": "Confirm",
						"type": {
							"fix": 	{
								"value": 0x0070
							}
						}
					},
					{
						"label": "Continue",
						"type": {
							"fix": 	{
								"value": 0x0071
							}
						}
					},
					{
						"label": "Contrast",
						"type": {
							"fix": 	{
								"value": 0x0072
							}
						}
					},
					{
						"label": "Contrast down",
						"type": {
							"fix": 	{
								"value": 0x0073
							}
						}
					},
					{
						"label": "Contrast up",
						"type": {
							"fix": 	{
								"value": 0x0074
							}
						}
					},
					{
						"label": "Counter",
						"type": {
							"fix": 	{
								"value": 0x0075
							}
						}
					},
					{
						"label": "Counter reset",
						"type": {
							"fix": 	{
								"value": 0x0076
							}
						}
					},
					{
						"label": "D",
						"type": {
							"fix": 	{
								"value": 0x0077
							}
						}
					},
					{
						"label": "Day down",
						"type": {
							"fix": 	{
								"value": 0x0078
							}
						}
					},
					{
						"label": "Day up",
						"type": {
							"fix": 	{
								"value": 0x0079
							}
						}
					},
					{
						"label": "Delay",
						"type": {
							"fix": 	{
								"value": 0x007A
							}
						}
					},
					{
						"label": "Delay down",
						"type": {
							"fix": 	{
								"value": 0x007B
							}
						}
					},
					{
						"label": "Delay up",
						"type": {
							"fix": 	{
								"value": 0x007C
							}
						}
					},
					{
						"label": "Delete",
						"type": {
							"fix": 	{
								"value": 0x007D
							}
						}
					},
					{
						"label": "Delimiter",
						"type": {
							"fix": 	{
								"value": 0x007E
							}
						}
					},
					{
						"label": "Digest",
						"type": {
							"fix": 	{
								"value": 0x007F
							}
						}
					},
					{
						"label": "Digital",
						"type": {
							"fix": 	{
								"value": 0x0080
							}
						}
					},
					{
						"label": "Dim",
						"type": {
							"fix": 	{
								"value": 0x0081
							}
						}
					},
					{
						"label": "Direct",
						"type": {
							"fix": 	{
								"value": 0x0082
							}
						}
					},
					{
						"label": "Disarm",
						"type": {
							"fix": 	{
								"value": 0x0083
							}
						}
					},
					{
						"label": "Disc",
						"type": {
							"fix": 	{
								"value": 0x0084
							}
						}
					},
					{
						"label": "Disc 1",
						"type": {
							"fix": 	{
								"value": 0x0085
							}
						}
					},
					{
						"label": "Disc 2",
						"type": {
							"fix": 	{
								"value": 0x0086
							}
						}
					},
					{
						"label": "Disc 3",
						"type": {
							"fix": 	{
								"value": 0x0087
							}
						}
					},
					{
						"label": "Disc 4",
						"type": {
							"fix": 	{
								"value": 0x0088
							}
						}
					},
					{
						"label": "Disc 5",
						"type": {
							"fix": 	{
								"value": 0x0089
							}
						}
					},
					{
						"label": "Disc 6",
						"type": {
							"fix": 	{
								"value": 0x008A
							}
						}
					},
					{
						"label": "Disc down",
						"type": {
							"fix": 	{
								"value": 0x008B
							}
						}
					},
					{
						"label": "Disc up",
						"type": {
							"fix": 	{
								"value": 0x008C
							}
						}
					},
					{
						"label": "Disco",
						"type": {
							"fix": 	{
								"value": 0x008D
							}
						}
					},
					{
						"label": "Edit",
						"type": {
							"fix": 	{
								"value": 0x008E
							}
						}
					},
					{
						"label": "Effect down",
						"type": {
							"fix": 	{
								"value": 0x008F
							}
						}
					},
					{
						"label": "Effect up",
						"type": {
							"fix": 	{
								"value": 0x0090
							}
						}
					},
					{
						"label": "Eject",
						"type": {
							"fix": 	{
								"value": 0x0091
							}
						}
					},
					{
						"label": "End",
						"type": {
							"fix": 	{
								"value": 0x0092
							}
						}
					},
					{
						"label": "EQ",
						"type": {
							"fix": 	{
								"value": 0x0093
							}
						}
					},
					{
						"label": "Fader",
						"type": {
							"fix": 	{
								"value": 0x0094
							}
						}
					},
					{
						"label": "Fan",
						"type": {
							"fix": 	{
								"value": 0x0095
							}
						}
					},
					{
						"label": "Fan high",
						"type": {
							"fix": 	{
								"value": 0x0096
							}
						}
					},
					{
						"label": "Fan low",
						"type": {
							"fix": 	{
								"value": 0x0097
							}
						}
					},
					{
						"label": "Fan medium",
						"type": {
							"fix": 	{
								"value": 0x0098
							}
						}
					},
					{
						"label": "Fan speed",
						"type": {
							"fix": 	{
								"value": 0x0099
							}
						}
					},
					{
						"label": "Fastext blue",
						"type": {
							"fix": 	{
								"value": 0x009A
							}
						}
					},
					{
						"label": "Fastext green",
						"type": {
							"fix": 	{
								"value": 0x009B
							}
						}
					},
					{
						"label": "Fastext purple",
						"type": {
							"fix": 	{
								"value": 0x009C
							}
						}
					},
					{
						"label": "Fastext red",
						"type": {
							"fix": 	{
								"value": 0x009D
							}
						}
					},
					{
						"label": "Fastext white",
						"type": {
							"fix": 	{
								"value": 0x009E
							}
						}
					},
					{
						"label": "Fastext yellow",
						"type": {
							"fix": 	{
								"value": 0x009F
							}
						}
					},
					{
						"label": "Favorite channel down",
						"type": {
							"fix": 	{
								"value": 0x00A0
							}
						}
					},
					{
						"label": "Favorite channel up",
						"type": {
							"fix": 	{
								"value": 0x00A1
							}
						}
					},
					{
						"label": "Finalize",
						"type": {
							"fix": 	{
								"value": 0x00A2
							}
						}
					},
					{
						"label": "Fine tune",
						"type": {
							"fix": 	{
								"value": 0x00A3
							}
						}
					},
					{
						"label": "Flat",
						"type": {
							"fix": 	{
								"value": 0x00A4
							}
						}
					},
					{
						"label": "FM",
						"type": {
							"fix": 	{
								"value": 0x00A5
							}
						}
					},
					{
						"label": "Focus down",
						"type": {
							"fix": 	{
								"value": 0x00A6
							}
						}
					},
					{
						"label": "Focus up",
						"type": {
							"fix": 	{
								"value": 0x00A7
							}
						}
					},
					{
						"label": "Freeze",
						"type": {
							"fix": 	{
								"value": 0x00A8
							}
						}
					},
					{
						"label": "Front",
						"type": {
							"fix": 	{
								"value": 0x00A9
							}
						}
					},
					{
						"label": "Game",
						"type": {
							"fix": 	{
								"value": 0x00AA
							}
						}
					},
					{
						"label": "GoTo",
						"type": {
							"fix": 	{
								"value": 0x00AB
							}
						}
					},
					{
						"label": "Hall",
						"type": {
							"fix": 	{
								"value": 0x00AC
							}
						}
					},
					{
						"label": "Heat",
						"type": {
							"fix": 	{
								"value": 0x00AD
							}
						}
					},
					{
						"label": "Help",
						"type": {
							"fix": 	{
								"value": 0x00AE
							}
						}
					},
					{
						"label": "Home",
						"type": {
							"fix": 	{
								"value": 0x00AF
							}
						}
					},
					{
						"label": "Index",
						"type": {
							"fix": 	{
								"value": 0x00B0
							}
						}
					},
					{
						"label": "Index forward",
						"type": {
							"fix": 	{
								"value": 0x00B1
							}
						}
					},
					{
						"label": "Index reverse",
						"type": {
							"fix": 	{
								"value": 0x00B2
							}
						}
					},
					{
						"label": "Interactive",
						"type": {
							"fix": 	{
								"value": 0x00B3
							}
						}
					},
					{
						"label": "Intro scan",
						"type": {
							"fix": 	{
								"value": 0x00B4
							}
						}
					},
					{
						"label": "Jazz",
						"type": {
							"fix": 	{
								"value": 0x00B5
							}
						}
					},
					{
						"label": "Karaoke",
						"type": {
							"fix": 	{
								"value": 0x00B6
							}
						}
					},
					{
						"label": "Keystone",
						"type": {
							"fix": 	{
								"value": 0x00B7
							}
						}
					},
					{
						"label": "Keystone down",
						"type": {
							"fix": 	{
								"value": 0x00B8
							}
						}
					},
					{
						"label": "Keystone up",
						"type": {
							"fix": 	{
								"value": 0x00B9
							}
						}
					},
					{
						"label": "Language",
						"type": {
							"fix": 	{
								"value": 0x00BA
							}
						}
					},
					{
						"label": "Left click",
						"type": {
							"fix": 	{
								"value": 0x00BB
							}
						}
					},
					{
						"label": "Level",
						"type": {
							"fix": 	{
								"value": 0x00BC
							}
						}
					},
					{
						"label": "Light",
						"type": {
							"fix": 	{
								"value": 0x00BD
							}
						}
					},
					{
						"label": "List",
						"type": {
							"fix": 	{
								"value": 0x00BE
							}
						}
					},
					{
						"label": "Live TV",
						"type": {
							"fix": 	{
								"value": 0x00BF
							}
						}
					},
					{
						"label": "Local/Dx",
						"type": {
							"fix": 	{
								"value": 0x00C0
							}
						}
					},
					{
						"label": "Loudness",
						"type": {
							"fix": 	{
								"value": 0x00C1
							}
						}
					},
					{
						"label": "Mail",
						"type": {
							"fix": 	{
								"value": 0x00C2
							}
						}
					},
					{
						"label": "Mark",
						"type": {
							"fix": 	{
								"value": 0x00C3
							}
						}
					},
					{
						"label": "Memory recall",
						"type": {
							"fix": 	{
								"value": 0x00C4
							}
						}
					},
					{
						"label": "Monitor",
						"type": {
							"fix": 	{
								"value": 0x00C5
							}
						}
					},
					{
						"label": "Movie",
						"type": {
							"fix": 	{
								"value": 0x00C6
							}
						}
					},
					{
						"label": "Multi room",
						"type": {
							"fix": 	{
								"value": 0x00C7
							}
						}
					},
					{
						"label": "Music",
						"type": {
							"fix": 	{
								"value": 0x00C8
							}
						}
					},
					{
						"label": "Music scan",
						"type": {
							"fix": 	{
								"value": 0x00C9
							}
						}
					},
					{
						"label": "Natural",
						"type": {
							"fix": 	{
								"value": 0x00CA
							}
						}
					},
					{
						"label": "Night",
						"type": {
							"fix": 	{
								"value": 0x00CB
							}
						}
					},
					{
						"label": "Noise reduction",
						"type": {
							"fix": 	{
								"value": 0x00CC
							}
						}
					},
					{
						"label": "Normalize",
						"type": {
							"fix": 	{
								"value": 0x00CD
							}
						}
					},
					{
						"label": "Discrete input CableTV",
						"type": {
							"fix": 	{
								"value": 0x00CE
							}
						}
					},
					{
						"label": "Discrete input CD 1",
						"type": {
							"fix": 	{
								"value": 0x00CF
							}
						}
					},
					{
						"label": "Discrete input CD 2",
						"type": {
							"fix": 	{
								"value": 0x00D0
							}
						}
					},
					{
						"label": "Discrete input CD Recorder",
						"type": {
							"fix": 	{
								"value": 0x00D1
							}
						}
					},
					{
						"label": "Discrete input DAT (Digital Audio Tape)",
						"type": {
							"fix": 	{
								"value": 0x00D2
							}
						}
					},
					{
						"label": "Discrete input DVD",
						"type": {
							"fix": 	{
								"value": 0x00D3
							}
						}
					},
					{
						"label": "Discrete input DVI",
						"type": {
							"fix": 	{
								"value": 0x00D4
							}
						}
					},
					{
						"label": "Discrete input HDTV",
						"type": {
							"fix": 	{
								"value": 0x00D5
							}
						}
					},
					{
						"label": "Discrete input LaserDisc",
						"type": {
							"fix": 	{
								"value": 0x00D6
							}
						}
					},
					{
						"label": "Discrete input MiniDisc",
						"type": {
							"fix": 	{
								"value": 0x00D7
							}
						}
					},
					{
						"label": "Discrete input PC",
						"type": {
							"fix": 	{
								"value": 0x00D8
							}
						}
					},
					{
						"label": "Discrete input Personal Video Recorder",
						"type": {
							"fix": 	{
								"value": 0x00D9
							}
						}
					},
					{
						"label": "Discrete input TV",
						"type": {
							"fix": 	{
								"value": 0x00DA
							}
						}
					},
					{
						"label": "Discrete input TV/VCR or TV/DVD",
						"type": {
							"fix": 	{
								"value": 0x00DB
							}
						}
					},
					{
						"label": "Discrete input VCR",
						"type": {
							"fix": 	{
								"value": 0x00DC
							}
						}
					},
					{
						"label": "One touch playback",
						"type": {
							"fix": 	{
								"value": 0x00DD
							}
						}
					},
					{
						"label": "One touch record",
						"type": {
							"fix": 	{
								"value": 0x00DE
							}
						}
					},
					{
						"label": "Open",
						"type": {
							"fix": 	{
								"value": 0x00DF
							}
						}
					},
					{
						"label": "Optical",
						"type": {
							"fix": 	{
								"value": 0x00E0
							}
						}
					},
					{
						"label": "Options",
						"type": {
							"fix": 	{
								"value": 0x00E1
							}
						}
					},
					{
						"label": "Orchestra",
						"type": {
							"fix": 	{
								"value": 0x00E2
							}
						}
					},
					{
						"label": "PAL/NTSC",
						"type": {
							"fix": 	{
								"value": 0x00E3
							}
						}
					},
					{
						"label": "Parental lock",
						"type": {
							"fix": 	{
								"value": 0x00E4
							}
						}
					},
					{
						"label": "PBC",
						"type": {
							"fix": 	{
								"value": 0x00E5
							}
						}
					},
					{
						"label": "Phono",
						"type": {
							"fix": 	{
								"value": 0x00E6
							}
						}
					},
					{
						"label": "Photos",
						"type": {
							"fix": 	{
								"value": 0x00E7
							}
						}
					},
					{
						"label": "Picture menu",
						"type": {
							"fix": 	{
								"value": 0x00E8
							}
						}
					},
					{
						"label": "Picture mode",
						"type": {
							"fix": 	{
								"value": 0x00E9
							}
						}
					},
					{
						"label": "Picture mute",
						"type": {
							"fix": 	{
								"value": 0x00EA
							}
						}
					},
					{
						"label": "PIP channel down",
						"type": {
							"fix": 	{
								"value": 0x00EB
							}
						}
					},
					{
						"label": "PIP channel up",
						"type": {
							"fix": 	{
								"value": 0x00EC
							}
						}
					},
					{
						"label": "PIP freeze",
						"type": {
							"fix": 	{
								"value": 0x00ED
							}
						}
					},
					{
						"label": "PIP input",
						"type": {
							"fix": 	{
								"value": 0x00EE
							}
						}
					},
					{
						"label": "PIP move",
						"type": {
							"fix": 	{
								"value": 0x00EF
							}
						}
					},
					{
						"label": "PIP Off",
						"type": {
							"fix": 	{
								"value": 0x00F0
							}
						}
					},
					{
						"label": "PIP On",
						"type": {
							"fix": 	{
								"value": 0x00F1
							}
						}
					},
					{
						"label": "PIP size",
						"type": {
							"fix": 	{
								"value": 0x00F2
							}
						}
					},
					{
						"label": "PIP split",
						"type": {
							"fix": 	{
								"value": 0x00F3
							}
						}
					},
					{
						"label": "PIP swap",
						"type": {
							"fix": 	{
								"value": 0x00F4
							}
						}
					},
					{
						"label": "Play mode",
						"type": {
							"fix": 	{
								"value": 0x00F5
							}
						}
					},
					{
						"label": "Play reverse",
						"type": {
							"fix": 	{
								"value": 0x00F6
							}
						}
					},
					{
						"label": "Power Off",
						"type": {
							"fix": 	{
								"value": 0x00F7
							}
						}
					},
					{
						"label": "Power On",
						"type": {
							"fix": 	{
								"value": 0x00F8
							}
						}
					},
					{
						"label": "PPV (Pay per view)",
						"type": {
							"fix": 	{
								"value": 0x00F9
							}
						}
					},
					{
						"label": "Preset",
						"type": {
							"fix": 	{
								"value": 0x00FA
							}
						}
					},
					{
						"label": "Program",
						"type": {
							"fix": 	{
								"value": 0x00FB
							}
						}
					},
					{
						"label": "Progressive scan",
						"type": {
							"fix": 	{
								"value": 0x00FC
							}
						}
					},
					{
						"label": "ProLogic",
						"type": {
							"fix": 	{
								"value": 0x00FD
							}
						}
					},
					{
						"label": "PTY",
						"type": {
							"fix": 	{
								"value": 0x00FE
							}
						}
					},
					{
						"label": "Quick skip",
						"type": {
							"fix": 	{
								"value": 0x00FF
							}
						}
					},
					{
						"label": "Random",
						"type": {
							"fix": 	{
								"value": 0x0100
							}
						}
					},
					{
						"label": "RDS",
						"type": {
							"fix": 	{
								"value": 0x0101
							}
						}
					},
					{
						"label": "Rear",
						"type": {
							"fix": 	{
								"value": 0x0102
							}
						}
					},
					{
						"label": "Rear volume down",
						"type": {
							"fix": 	{
								"value": 0x0103
							}
						}
					},
					{
						"label": "Rear volume up",
						"type": {
							"fix": 	{
								"value": 0x0104
							}
						}
					},
					{
						"label": "Record mute",
						"type": {
							"fix": 	{
								"value": 0x0105
							}
						}
					},
					{
						"label": "Record pause",
						"type": {
							"fix": 	{
								"value": 0x0106
							}
						}
					},
					{
						"label": "Repeat",
						"type": {
							"fix": 	{
								"value": 0x0107
							}
						}
					},
					{
						"label": "Repeat A-B",
						"type": {
							"fix": 	{
								"value": 0x0108
							}
						}
					},
					{
						"label": "Resume",
						"type": {
							"fix": 	{
								"value": 0x0109
							}
						}
					},
					{
						"label": "RGB",
						"type": {
							"fix": 	{
								"value": 0x010A
							}
						}
					},
					{
						"label": "Right click",
						"type": {
							"fix": 	{
								"value": 0x010B
							}
						}
					},
					{
						"label": "Rock",
						"type": {
							"fix": 	{
								"value": 0x010C
							}
						}
					},
					{
						"label": "Rotate left",
						"type": {
							"fix": 	{
								"value": 0x010D
							}
						}
					},
					{
						"label": "Rotate right",
						"type": {
							"fix": 	{
								"value": 0x010E
							}
						}
					},
					{
						"label": "SAT",
						"type": {
							"fix": 	{
								"value": 0x010F
							}
						}
					},
					{
						"label": "Scan",
						"type": {
							"fix": 	{
								"value": 0x0110
							}
						}
					},
					{
						"label": "Scart",
						"type": {
							"fix": 	{
								"value": 0x0111
							}
						}
					},
					{
						"label": "Scene",
						"type": {
							"fix": 	{
								"value": 0x0112
							}
						}
					},
					{
						"label": "Scroll",
						"type": {
							"fix": 	{
								"value": 0x0113
							}
						}
					},
					{
						"label": "Services",
						"type": {
							"fix": 	{
								"value": 0x0114
							}
						}
					},
					{
						"label": "Setup menu",
						"type": {
							"fix": 	{
								"value": 0x0115
							}
						}
					},
					{
						"label": "Sharp",
						"type": {
							"fix": 	{
								"value": 0x0116
							}
						}
					},
					{
						"label": "Sharpness",
						"type": {
							"fix": 	{
								"value": 0x0117
							}
						}
					},
					{
						"label": "Sharpness down",
						"type": {
							"fix": 	{
								"value": 0x0118
							}
						}
					},
					{
						"label": "Sharpness up",
						"type": {
							"fix": 	{
								"value": 0x0119
							}
						}
					},
					{
						"label": "Side A/B",
						"type": {
							"fix": 	{
								"value": 0x011A
							}
						}
					},
					{
						"label": "Skip forward",
						"type": {
							"fix": 	{
								"value": 0x011B
							}
						}
					},
					{
						"label": "Skip reverse",
						"type": {
							"fix": 	{
								"value": 0x011C
							}
						}
					},
					{
						"label": "Sleep",
						"type": {
							"fix": 	{
								"value": 0x011D
							}
						}
					},
					{
						"label": "Slow",
						"type": {
							"fix": 	{
								"value": 0x011E
							}
						}
					},
					{
						"label": "Slow forward",
						"type": {
							"fix": 	{
								"value": 0x011F
							}
						}
					},
					{
						"label": "Slow reverse",
						"type": {
							"fix": 	{
								"value": 0x0120
							}
						}
					},
					{
						"label": "Sound menu",
						"type": {
							"fix": 	{
								"value": 0x0121
							}
						}
					},
					{
						"label": "Sound mode",
						"type": {
							"fix": 	{
								"value": 0x0122
							}
						}
					},
					{
						"label": "Speed",
						"type": {
							"fix": 	{
								"value": 0x0123
							}
						}
					},
					{
						"label": "Speed down",
						"type": {
							"fix": 	{
								"value": 0x0124
							}
						}
					},
					{
						"label": "Speed up",
						"type": {
							"fix": 	{
								"value": 0x0125
							}
						}
					},
					{
						"label": "Sports",
						"type": {
							"fix": 	{
								"value": 0x0126
							}
						}
					},
					{
						"label": "Stadium",
						"type": {
							"fix": 	{
								"value": 0x0127
							}
						}
					},
					{
						"label": "Start",
						"type": {
							"fix": 	{
								"value": 0x0128
							}
						}
					},
					{
						"label": "Start ID erase",
						"type": {
							"fix": 	{
								"value": 0x0129
							}
						}
					},
					{
						"label": "Start ID renumber",
						"type": {
							"fix": 	{
								"value": 0x012A
							}
						}
					},
					{
						"label": "Start ID write",
						"type": {
							"fix": 	{
								"value": 0x012B
							}
						}
					},
					{
						"label": "Step",
						"type": {
							"fix": 	{
								"value": 0x012C
							}
						}
					},
					{
						"label": "Stereo/Mono",
						"type": {
							"fix": 	{
								"value": 0x012D
							}
						}
					},
					{
						"label": "Still forward",
						"type": {
							"fix": 	{
								"value": 0x012E
							}
						}
					},
					{
						"label": "Still reverse",
						"type": {
							"fix": 	{
								"value": 0x012F
							}
						}
					},
					{
						"label": "Subtitle",
						"type": {
							"fix": 	{
								"value": 0x0130
							}
						}
					},
					{
						"label": "Subwoofer down",
						"type": {
							"fix": 	{
								"value": 0x0131
							}
						}
					},
					{
						"label": "Subwoofer up",
						"type": {
							"fix": 	{
								"value": 0x0132
							}
						}
					},
					{
						"label": "Super bass",
						"type": {
							"fix": 	{
								"value": 0x0133
							}
						}
					},
					{
						"label": "Surround",
						"type": {
							"fix": 	{
								"value": 0x0134
							}
						}
					},
					{
						"label": "Surround mode",
						"type": {
							"fix": 	{
								"value": 0x0135
							}
						}
					},
					{
						"label": "S-Video",
						"type": {
							"fix": 	{
								"value": 0x0136
							}
						}
					},
					{
						"label": "Sweep",
						"type": {
							"fix": 	{
								"value": 0x0137
							}
						}
					},
					{
						"label": "Synchro record",
						"type": {
							"fix": 	{
								"value": 0x0138
							}
						}
					},
					{
						"label": "Tape 1",
						"type": {
							"fix": 	{
								"value": 0x0139
							}
						}
					},
					{
						"label": "Tape 1-2",
						"type": {
							"fix": 	{
								"value": 0x013A
							}
						}
					},
					{
						"label": "Tape 2",
						"type": {
							"fix": 	{
								"value": 0x013B
							}
						}
					},
					{
						"label": "Temperature down",
						"type": {
							"fix": 	{
								"value": 0x013C
							}
						}
					},
					{
						"label": "Temperature up",
						"type": {
							"fix": 	{
								"value": 0x013D
							}
						}
					},
					{
						"label": "Test tone",
						"type": {
							"fix": 	{
								"value": 0x013E
							}
						}
					},
					{
						"label": "Text (Teletext)",
						"type": {
							"fix": 	{
								"value": 0x013F
							}
						}
					},
					{
						"label": "Text expand",
						"type": {
							"fix": 	{
								"value": 0x0140
							}
						}
					},
					{
						"label": "Text hold",
						"type": {
							"fix": 	{
								"value": 0x0141
							}
						}
					},
					{
						"label": "Text index",
						"type": {
							"fix": 	{
								"value": 0x0142
							}
						}
					},
					{
						"label": "Text mix",
						"type": {
							"fix": 	{
								"value": 0x0143
							}
						}
					},
					{
						"label": "Text off",
						"type": {
							"fix": 	{
								"value": 0x0144
							}
						}
					},
					{
						"label": "Text reveal",
						"type": {
							"fix": 	{
								"value": 0x0145
							}
						}
					},
					{
						"label": "Text subpage",
						"type": {
							"fix": 	{
								"value": 0x0146
							}
						}
					},
					{
						"label": "Text timer page",
						"type": {
							"fix": 	{
								"value": 0x0147
							}
						}
					},
					{
						"label": "Text update",
						"type": {
							"fix": 	{
								"value": 0x0148
							}
						}
					},
					{
						"label": "Theater",
						"type": {
							"fix": 	{
								"value": 0x0149
							}
						}
					},
					{
						"label": "Theme",
						"type": {
							"fix": 	{
								"value": 0x014A
							}
						}
					},
					{
						"label": "Thumbs down",
						"type": {
							"fix": 	{
								"value": 0x014B
							}
						}
					},
					{
						"label": "Thumbs up",
						"type": {
							"fix": 	{
								"value": 0x014C
							}
						}
					},
					{
						"label": "Tilt down",
						"type": {
							"fix": 	{
								"value": 0x014D
							}
						}
					},
					{
						"label": "Tilt up",
						"type": {
							"fix": 	{
								"value": 0x014E
							}
						}
					},
					{
						"label": "Time",
						"type": {
							"fix": 	{
								"value": 0x014F
							}
						}
					},
					{
						"label": "Timer",
						"type": {
							"fix": 	{
								"value": 0x0150
							}
						}
					},
					{
						"label": "Timer down",
						"type": {
							"fix": 	{
								"value": 0x0151
							}
						}
					},
					{
						"label": "Timer up",
						"type": {
							"fix": 	{
								"value": 0x0152
							}
						}
					},
					{
						"label": "Tint",
						"type": {
							"fix": 	{
								"value": 0x0153
							}
						}
					},
					{
						"label": "Tint down",
						"type": {
							"fix": 	{
								"value": 0x0154
							}
						}
					},
					{
						"label": "Tint up",
						"type": {
							"fix": 	{
								"value": 0x0155
							}
						}
					},
					{
						"label": "Title",
						"type": {
							"fix": 	{
								"value": 0x0156
							}
						}
					},
					{
						"label": "Track",
						"type": {
							"fix": 	{
								"value": 0x0157
							}
						}
					},
					{
						"label": "Tracking",
						"type": {
							"fix": 	{
								"value": 0x0158
							}
						}
					},
					{
						"label": "Tracking down",
						"type": {
							"fix": 	{
								"value": 0x0159
							}
						}
					},
					{
						"label": "Tracking up",
						"type": {
							"fix": 	{
								"value": 0x015A
							}
						}
					},
					{
						"label": "Treble",
						"type": {
							"fix": 	{
								"value": 0x015B
							}
						}
					},
					{
						"label": "Treble down",
						"type": {
							"fix": 	{
								"value": 0x015C
							}
						}
					},
					{
						"label": "Treble up",
						"type": {
							"fix": 	{
								"value": 0x015D
							}
						}
					},
					{
						"label": "Tune down",
						"type": {
							"fix": 	{
								"value": 0x015E
							}
						}
					},
					{
						"label": "Tune up",
						"type": {
							"fix": 	{
								"value": 0x015F
							}
						}
					},
					{
						"label": "Tuner",
						"type": {
							"fix": 	{
								"value": 0x0160
							}
						}
					},
					{
						"label": "VCR Plus+",
						"type": {
							"fix": 	{
								"value": 0x0161
							}
						}
					},
					{
						"label": "Video 1",
						"type": {
							"fix": 	{
								"value": 0x0162
							}
						}
					},
					{
						"label": "Video 2",
						"type": {
							"fix": 	{
								"value": 0x0163
							}
						}
					},
					{
						"label": "Video 3",
						"type": {
							"fix": 	{
								"value": 0x0164
							}
						}
					},
					{
						"label": "Video 4",
						"type": {
							"fix": 	{
								"value": 0x0165
							}
						}
					},
					{
						"label": "Video 5",
						"type": {
							"fix": 	{
								"value": 0x0166
							}
						}
					},
					{
						"label": "View",
						"type": {
							"fix": 	{
								"value": 0x0167
							}
						}
					},
					{
						"label": "Voice",
						"type": {
							"fix": 	{
								"value": 0x0168
							}
						}
					},
					{
						"label": "Zoom",
						"type": {
							"fix": 	{
								"value": 0x0169
							}
						}
					},
					{
						"label": "Zoom in",
						"type": {
							"fix": 	{
								"value": 0x016A
							}
						}
					},
					{
						"label": "Zoom out",
						"type": {
							"fix": 	{
								"value": 0x016B
							}
						}
					},
					{
						"label": "eHome",
						"type": {
							"fix": 	{
								"value": 0x016C
							}
						}
					},
					{
						"label": "Details",
						"type": {
							"fix": 	{
								"value": 0x016D
							}
						}
					},
					{
						"label": "DVD menu",
						"type": {
							"fix": 	{
								"value": 0x016E
							}
						}
					},
					{
						"label": "My TV",
						"type": {
							"fix": 	{
								"value": 0x016F
							}
						}
					},
					{
						"label": "Recorded TV",
						"type": {
							"fix": 	{
								"value": 0x0170
							}
						}
					},
					{
						"label": "My videos",
						"type": {
							"fix": 	{
								"value": 0x0171
							}
						}
					},
					{
						"label": "DVD angle",
						"type": {
							"fix": 	{
								"value": 0x0172
							}
						}
					},
					{
						"label": "DVD audio",
						"type": {
							"fix": 	{
								"value": 0x0173
							}
						}
					},
					{
						"label": "DVD subtitle",
						"type": {
							"fix": 	{
								"value": 0x0174
							}
						}
					},
					{
						"label": "Radio",
						"type": {
							"fix": 	{
								"value": 0x0175
							}
						}
					},
					{
						"label": "#",
						"type": {
							"fix": 	{
								"value": 0x0176
							}
						}
					},
					{
						"label": "*",
						"type": {
							"fix": 	{
								"value": 0x0177
							}
						}
					},
					{
						"label": "OEM 1",
						"type": {
							"fix": 	{
								"value": 0x0178
							}
						}
					},
					{
						"label": "OEM 2",
						"type": {
							"fix": 	{
								"value": 0x0179
							}
						}
					},
					{
						"label": "Info",
						"type": {
							"fix": 	{
								"value": 0x017A
							}
						}
					},
					{
						"label": "CAPS NUM",
						"type": {
							"fix": 	{
								"value": 0x017B
							}
						}
					},
					{
						"label": "TV MODE",
						"type": {
							"fix": 	{
								"value": 0x017C
							}
						}
					},
					{
						"label": "SOURCE",
						"type": {
							"fix": 	{
								"value": 0x017D
							}
						}
					},
					{
						"label": "FILEMODE",
						"type": {
							"fix": 	{
								"value": 0x017E
							}
						}
					},
					{
						"label": "Time seek",
						"type": {
							"fix": 	{
								"value": 0x017F
							}
						}
					},
					{
						"label": "Mouse enable",
						"type": {
							"fix": 	{
								"value": 0x0180
							}
						}
					},
					{
						"label": "Mouse disable",
						"type": {
							"fix": 	{
								"value": 0x0181
							}
						}
					},
					{
						"label": "VOD",
						"type": {
							"fix": 	{
								"value": 0x0182
							}
						}
					},
					{
						"label": "Thumbs Up",
						"type": {
							"fix": 	{
								"value": 0x0183
							}
						}
					},
					{
						"label": "Thumbs Down",
						"type": {
							"fix": 	{
								"value": 0x0184
							}
						}
					},
					{
						"label": "Apps",
						"type": {
							"fix": 	{
								"value": 0x0185
							}
						}
					},
					{
						"label": "Mouse toggle",
						"type": {
							"fix": 	{
								"value": 0x0186
							}
						}
					},
					{
						"label": "TV Mode",
						"type": {
							"fix": 	{
								"value": 0x0187
							}
						}
					},
					{
						"label": "DVD Mode",
						"type": {
							"fix": 	{
								"value": 0x0188
							}
						}
					},
					{
						"label": "STB Mode",
						"type": {
							"fix": 	{
								"value": 0x0189
							}
						}
					},
					{
						"label": "AUX Mode",
						"type": {
							"fix": 	{
								"value": 0x018A
							}
						}
					},
					{
						"label": "BluRay Mode",
						"type": {
							"fix": 	{
								"value": 0x018B
							}
						}
					},
					{
						"label": "Reserved (Mode)",
						"type": {
							"fix": 	{
								"value": 0x018C
							}
						}
					},
					{
						"label": "Reserved (Mode)",
						"type": {
							"fix": 	{
								"value": 0x018D
							}
						}
					},
					{
						"label": "Reserved (Mode)",
						"type": {
							"fix": 	{
								"value": 0x018E
							}
						}
					},
					{
						"label": "Reserved (Mode)",
						"type": {
							"fix": 	{
								"value": 0x018F
							}
						}
					},
					{
						"label": "Reserved (Mode)",
						"type": {
							"fix": 	{
								"value": 0x0190
							}
						}
					},
					{
						"label": "Reserved (Mode)",
						"type": {
							"fix": 	{
								"value": 0x0191
							}
						}
					},
					{
						"label": "Reserved (Mode)",
						"type": {
							"fix": 	{
								"value": 0x0192
							}
						}
					},
					{
						"label": "Reserved (Mode)",
						"type": {
							"fix": 	{
								"value": 0x0193
							}
						}
					},
					{
						"label": "Standby 1",
						"type": {
							"fix": 	{
								"value": 0x0194
							}
						}
					},
					{
						"label": "Standby 2",
						"type": {
							"fix": 	{
								"value": 0x0195
							}
						}
					},
					{
						"label": "Standby 3",
						"type": {
							"fix": 	{
								"value": 0x0196
							}
						}
					},
					{
						"label": "HDMI 1",
						"type": {
							"fix": 	{
								"value": 0x0197
							}
						}
					},
					{
						"label": "HDMI 2",
						"type": {
							"fix": 	{
								"value": 0x0198
							}
						}
					},
					{
						"label": "HDMI 3",
						"type": {
							"fix": 	{
								"value": 0x0199
							}
						}
					},
					{
						"label": "HDMI 4",
						"type": {
							"fix": 	{
								"value": 0x019A
							}
						}
					},
					{
						"label": "HDMI 5",
						"type": {
							"fix": 	{
								"value": 0x019B
							}
						}
					},
					{
						"label": "HDMI 6",
						"type": {
							"fix": 	{
								"value": 0x019C
							}
						}
					},
					{
						"label": "HDMI 7",
						"type": {
							"fix": 	{
								"value": 0x019D
							}
						}
					},
					{
						"label": "HDMI 8",
						"type": {
							"fix": 	{
								"value": 0x019E
							}
						}
					},
					{
						"label": "HDMI 9",
						"type": {
							"fix": 	{
								"value": 0x019F
							}
						}
					},
					{
						"label": "USB 1",
						"type": {
							"fix": 	{
								"value": 0x01A0
							}
						}
					},
					{
						"label": "USB 2",
						"type": {
							"fix": 	{
								"value": 0x01A1
							}
						}
					},
					{
						"label": "USB 3",
						"type": {
							"fix": 	{
								"value": 0x01A2
							}
						}
					},
					{
						"label": "USB 4",
						"type": {
							"fix": 	{
								"value": 0x01A3
							}
						}
					},
					{
						"label": "USB 5",
						"type": {
							"fix": 	{
								"value": 0x01A4
							}
						}
					},
					{
						"label": "ZOOM 4:3 Normal",
						"type": {
							"fix": 	{
								"value": 0x01A5
							}
						}
					},
					{
						"label": "ZOOM 4:3 Zoom",
						"type": {
							"fix": 	{
								"value": 0x01A6
							}
						}
					},
					{
						"label": "ZOOM 16:9 Normal",
						"type": {
							"fix": 	{
								"value": 0x01A7
							}
						}
					},
					{
						"label": "ZOOM 16:9 Zoom",
						"type": {
							"fix": 	{
								"value": 0x01A8
							}
						}
					},
					{
						"label": "ZOOM 16:9 Wide 1",
						"type": {
							"fix": 	{
								"value": 0x01A9
							}
						}
					},
					{
						"label": "ZOOM 16:9 Wide 2",
						"type": {
							"fix": 	{
								"value": 0x01AA
							}
						}
					},
					{
						"label": "ZOOM 16:9 Wide 3",
						"type": {
							"fix": 	{
								"value": 0x01AB
							}
						}
					},
					{
						"label": "ZOOM Cinema",
						"type": {
							"fix": 	{
								"value": 0x01AC
							}
						}
					},
					{
						"label": "ZOOM 16:9 Default",
						"type": {
							"fix": 	{
								"value": 0x01AD
							}
						}
					},
					{
						"label": "Reserved (ZOOM mode)",
						"type": {
							"fix": 	{
								"value": 0x01AE
							}
						}
					},
					{
						"label": "Reserved (ZOOM mode)",
						"type": {
							"fix": 	{
								"value": 0x01BF
							}
						}
					},
					{
						"label": "Auto Zoom",
						"type": {
							"fix": 	{
								"value": 0x01B0
							}
						}
					},
					{
						"label": "ZOOM Set as Default Zoom",
						"type": {
							"fix": 	{
								"value": 0x01B1
							}
						}
					},
					{
						"label": "Mute On",
						"type": {
							"fix": 	{
								"value": 0x01B2
							}
						}
					},
					{
						"label": "Mute Off",
						"type": {
							"fix": 	{
								"value": 0x01B3
							}
						}
					},
					{
						"label": "AUDIO Mode AUDYSSEY AUDIO OFF",
						"type": {
							"fix": 	{
								"value": 0x01B4
							}
						}
					},
					{
						"label": "AUDIO Mode AUDYSSEY AUDIO LO",
						"type": {
							"fix": 	{
								"value": 0x01B5
							}
						}
					},
					{
						"label": "AUDIO Mode AUDYSSEY AUDIO MED",
						"type": {
							"fix": 	{
								"value": 0x01B6
							}
						}
					},
					{
						"label": "AUDIO Mode AUDYSSEY AUDIO HI",
						"type": {
							"fix": 	{
								"value": 0x01B7
							}
						}
					},
					{
						"label": "Reserved",
						"type": {
							"fix": 	{
								"value": 0x01B8
							}
						}
					},
					{
						"label": "Reserved",
						"type": {
							"fix": 	{
								"value": 0x01B9
							}
						}
					},
					{
						"label": "AUDIO Mode SRS SURROUND ON",
						"type": {
							"fix": 	{
								"value": 0x01BA
							}
						}
					},
					{
						"label": "AUDIO Mode SRS SURROUND OFF",
						"type": {
							"fix": 	{
								"value": 0x01BB
							}
						}
					},
					{
						"label": "Reserved",
						"type": {
							"fix": 	{
								"value": 0x01BC
							}
						}
					},
					{
						"label": "Reserved",
						"type": {
							"fix": 	{
								"value": 0x01BD
							}
						}
					},
					{
						"label": "Reserved",
						"type": {
							"fix": 	{
								"value": 0x01BE
							}
						}
					},
					{
						"label": "Picture Mode Home",
						"type": {
							"fix": 	{
								"value": 0x01BF
							}
						}
					},
					{
						"label": "Picture Mode Retail",
						"type": {
							"fix": 	{
								"value": 0x01C0
							}
						}
					},
					{
						"label": "Picture Mode Vivid",
						"type": {
							"fix": 	{
								"value": 0x01C1
							}
						}
					},
					{
						"label": "Picture Mode Standard",
						"type": {
							"fix": 	{
								"value": 0x01C2
							}
						}
					},
					{
						"label": "Picture Mode Theater",
						"type": {
							"fix": 	{
								"value": 0x01C3
							}
						}
					},
					{
						"label": "Picture Mode Sports",
						"type": {
							"fix": 	{
								"value": 0x01C4
							}
						}
					},
					{
						"label": "Picture Mode Energy savings",
						"type": {
							"fix": 	{
								"value": 0x01C5
							}
						}
					},
					{
						"label": "Picture Mode Custom",
						"type": {
							"fix": 	{
								"value": 0x01C6
							}
						}
					},
					{
						"label": "Cool",
						"type": {
							"fix": 	{
								"value": 0x01C7
							}
						}
					},
					{
						"label": "Medium",
						"type": {
							"fix": 	{
								"value": 0x01C8
							}
						}
					},
					{
						"label": "Warm_D65",
						"type": {
							"fix": 	{
								"value": 0x01C9
							}
						}
					},
					{
						"label": "CC ON",
						"type": {
							"fix": 	{
								"value": 0x01CA
							}
						}
					},
					{
						"label": "CC OFF",
						"type": {
							"fix": 	{
								"value": 0x01CB
							}
						}
					},
					{
						"label": "Video Mute ON",
						"type": {
							"fix": 	{
								"value": 0x01CC
							}
						}
					},
					{
						"label": "Video Mute OFF",
						"type": {
							"fix": 	{
								"value": 0x01CD
							}
						}
					},
					{
						"label": "Next Event",
						"type": {
							"fix": 	{
								"value": 0x01CE
							}
						}
					},
					{
						"label": "Previous Event",
						"type": {
							"fix": 	{
								"value": 0x01CF
							}
						}
					},
					{
						"label": "CEC device list",
						"type": {
							"fix": 	{
								"value": 0x01D0
							}
						}
					},
					{
						"label": "MTS SAP",
						"type": {
							"fix": 	{
								"value": 0x01D1
							}
						}
					},
				]
			};

		// SensorMultilevel
		case 0x31:
			return {
				"Get": [],
			};

		// SensroBinary
		case 0x30:
			return {
				"Get": [],
			};

		// PowerLevel
		case 0x73:
			return {
				"Get": [],
				"TestAllNeighbours": [],
				"TestToNode": [
					{
						"label": "Node ID",
						"type": {
							"range": {
								"min": 0,
								"max": 232
							}
						}
					}
				],
				"Set":[
					{
						"label": "PowerLevel",
						"type": {
							"enumof": [
								{
									"label": "-9dbm ", "type":{
										"fix": 	{
											"value": 9
										}
									}
								},
								{
									"label": "-8dbm ", "type":{
										"fix": 	{
											"value": 8
										}
									}
								},
								{
									"label": "-7dbm ", "type":{
										"fix": 	{
											"value": 7
										}
									}
								},
								{
									"label": "-6dbm ", "type":{
										"fix": 	{
											"value": 6
										}
									}
								},
								{
									"label": "-5dbm ", "type":{
										"fix": 	{
											"value": 5
										}
									}
								},
								{
									"label": "-4dbm ", "type":{
										"fix": 	{
											"value": 4
										}
									}
								},
								{
									"label": "-3dbm ", "type":{
										"fix": 	{
											"value": 3
										}
									}
								},
								{
									"label": "-2dbm ", "type":{
										"fix": 	{
											"value": 2
										}
									}
								},
								{
									"label": "-1dbm ", "type":{
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "Normal ", "type":{
										"fix": 	{
											"value": 0
										}
									}
								}
							]
						}
					},
					{
						"label": "Timeout (s)",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					}
				]
			};
			
		// Proprietary
		case 0x88:
			return {
				"Get": [],
				"Set": [
					{
						"label": "Data in format [1,2,3,..,0xa,..]",
						"type": {
							"string": {
							}
						}
					}
				]
			};
		
		// MeterPulse
		case 0x35:
			return {
				"Get": []
			};
		
		// ManufacturerSpecific
		case 0x72:
			return {
				"Get": []
			};
		
		// Manufacturer Proprietary
		case 0x91:
			return {
				"Send": [
					{
						"label": "Data in format [1,2,3,..,0xa,..]",
						"type": {
							"string": {
							}
						}
					}
				]
			};

		// SwitchAll
		case 0x27:
			return {
				"SetOn": [],
				"SetOff": [],
				"Get": [],
				"Set": [
					{
						"label": "Mode",
						"type": {
							"enumof": [
								{
									"label": "Not in switch all group",
									"type": {
										"fix": 	{
											"value": 0x00
										}
									}
								},
								{
									"label": "In switch all off group only",
									"type": {
										"fix": 	{
											"value": 0x01
										}
									}
								},
								{
									"label": "In switch all on group only",
									"type": {
										"fix": 	{
											"value": 0x02
										}
									}
								},
								{
									"label": "In switch all on and off groups",
									"type": {
										"fix": 	{
											"value": 0xff
										}
									}
								}
							]
						}
					}
				]
			};

		// SensorConfiguration
		case 0x9e:
			return	{
				"Get": [],
				"Set": [
					{
						"label": "Trigger",
							"type": {
							"enumof": [
								{
									"label": "Current",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "Default",
									"type": {
										"fix": 	{
											"value": 2
										}
									}
								},
								{
									"label": "Value",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								]
						}
					},
					{
						"label": "Value of Sensor",
						"type": {
							"range": {
								"min": 0,
								"max": 0xffff
							}
						}
					}
				]
			};

		// ScheduleEntryLock
		case 0x4e:
			return {
				"WeekDayScheduleGet": [
					{
						"label": "User",
						"type": {
							"range": {
								"min": 0,
								"max": 99
							}
						}
					}
				],
				"YearScheduleGet": [
					{
						"label": "User",
						"type": {
							"range": {
								"min": 0,
								"max": 99
							}
						}
					}
				],
				"WeekDayScheduleSet": [
					{
						"label": "User",
						"type": {
							"range": {
								"min": 0,
								"max": 99
							}
						}
					}
				],
				"YearScheduleSet": [
					{
						"label": "User",
						"type": {
							"range": {
								"min": 0,
								"max": 99
							}
						}
					}
				],
				"Set": [
					{
						"label": "User",
						"type": {
							"range": {
								"min": 0,
								"max": 99
							}
						}
					},
					{
						"label": "Level",
						"type": {
							"enumof": [
								{
									"label": "Disable",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Enable",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								}
							]
						}
					}
				],

				"AllSet": [
					{
						"label": "Level",
						"type": {
							"enumof": [
								{
									"label": "Disable",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Enable",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								}
							]
						}
					}
				]
			};

		// SceneActivation
		case 0x2B:
			return {
				"Set": [
					{
						"label": "Scene",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					},
					{
						"label": "Duration",
						"type": {
							"enumof": [
								{
									"label": "immediately",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "in seconds",
									"type": {
										"range": {
											"min": 	1,
											"max": 127
										}
									}
								},
								{
									"label": "in minutes",
									"type": {
										"range": {
											"min": 	1,
											"max": 127,
										"shift": 	127
										}
									}
								},
								{
									"label": "use device default",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				]
			};
			
		// SceneActuatorConf
		case 0x2C:
			return {
				"Get": [
					{
						"label": "Scene",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					}
				],
				"Set": [
					{
						"label": "Scene",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					},
					{
						"label": "Level",
						"type": {
							"enumof": [
								{
									"label": "Off",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "%",
									"type": {
										"range": {
											"min": 0,
											"max": 99
										}
									}
								},
								{
									"label": "Full",
									"type": {
										"fix": 	{
											"value": 99
										}
									}
								},
								{
									"label": "On",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					},
					{
						"label": "Duration",
						"type": {
							"enumof": [
								{
									"label": "immediately",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "in seconds",
									"type": {
										"range": {
											"min": 	1,
											"max": 127
										}
									}
								},
								{
									"label": "in minutes",
									"type": {
										"range": {
											"min": 	1,
											"max": 127,
										"shift": 	127
										}
									}
								},
								{
									"label": "use device default",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					},
					{
						"label": "Level used",
						"type": {
							"enumof": [
								{
									"label": "Current in device",
									"type": {
										"fix": 	{
											"value": 0,
											},
										}
									},
								{
									"label": "Defined",
									"type": {
										"fix": 	{
											"value": 1 << 7,
										}
									}
								}
							]
						}
					},
				]
			};

		// Protection
		case 0x75:
			return {
				"Get": [],
				"ExclusiveGet": [],
				"TimeoutGet": [],
				"Set": (function () {
					var ret = [
						{
							"label": "Local operations",
								"type": {
									"enumof": [
										{
											"label": "Unprotected",
											"type": {
												"fix": 	{
													"value": 0
												}
											}
										},
										{
											"label": "Protection by sequence",
											"type": {
												"fix": 	{
													"value": 1
												}
											}
										},
										{
											"label": "No operation possible",
											"type": {
												"fix": 	{
													"value": 2
												}
											}
										}
									]
								}
							},
						];

					if (data.version.value >= 2)
						ret.push({
								"label": "RF operations",
								"type": {
									"enumof": [
										{
											"label": "Unprotected",
											"type": {
												"fix": 	{
													"value": 0
												}
											}
										},
										{
											"label": "No RF Control",
											"type": {
												"fix": 	{
													"value": 1
												}
											}
										},
										{
											"label": "No RF Communication",
											"type": {
												"fix": 	{
													"value": 2
												}
											}
										}
									]
								}
							}
						);
						return ret;
				})(),
				
				"TimeoutSet": [
					 {
						"label": "Time",
						"type": {
							"enumof": [
								{
									"label": "No",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Sec",
									"type": {
										"range": {
											"min": 0,
											"max": 60
										}
									}
								},
								{
									"label": "Min",
									"type": {
										"range": {
											"min": 	2,
											"max": 191,
										"shift": 	63
										}
									}
								},
								{
									"label": "Infinite",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								},
								]
						}
					}
				],
				"ExclusivitySet": [
					{
						"label": "to node",
						"type": {
							"node": {}
						}
					}
				]
			};
			
		// SceneControllerConf
		case 0x2d:
			return {
				"Get": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					}
				],
				"Set": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					},
					{
						"label": "Scene",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					},
					{
						"label": "DimmingDuration",
						"type": {
							"enumof": [
								{
									"label": "immediately",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "in seconds",
									"type": {
										"range": {
											"min": 	1,
											"max": 127
										}
									}
								},
								{
									"label": "in minutes",
									"type": {
										"range": {
											"min": 	1,
											"max": 127,
										"shift": 	127
										}
									}
								},
								{
									"label": "use device default",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				]
			};
			
		// Alarm
		case 0x71:
			var ret = {
				"Get": [
					{
						"label": "Type",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].typeString.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					}
				]
			};
			
			if (data.version.value > 1) {
				ret["Set"] = [
					{
						"label": "Type",
						"type": {
							"enumof": (
									function() {
										try {
											var arr = [];
											var key;
											for (key in data) {
												var ikey = parseInt(key);
												if (!isNaN(ikey))
													arr.push({
														"label": data[ikey].typeString.value,
														"type": {
															"fix": 	{
																"value": ikey
															}
														}
													});
											};
											return arr;
										} catch(err) {}
										return [];
									}
								)()
						}
					},
					{
						"label": "Status",
						"type": {
							"enumof": [
								{
									"label": "Disable",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Enable",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				];
			}
			
			return ret;
		
		// AlarmSensor
		case 0x9c:
			return {
				"Get": []
			};
		
		// Battery
		case 0x80:
			return {
				"Get": []
			};

		// MutiChannelAssociation
		case 0x8e:
			return {
				"GroupingsGet": [],
				"Get": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				],
				"Set": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					},
					{
						"label": "Node",
						"type": {
							"node": {
							}
						}
					},
					{
						"label": "instance",
						"type": {
							"range": {
								"min": 	1,
								"max": 127
							}
						}
					}
				],
				"Remove": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					},
					{
						"label": "Node",
						"type": {
							"node": {
							}
						}
					},
					{
						"label": "instance",
						"type": {
							"range": {
								"min": 	1,
								"max": 127
							}
						}
					}
				]
			};
		
		// Meter	
		case 0x32:
			return {
				"Get": [],
				"Reset": []
			};

		// AlarmSilence
		case 0x9d:
			return {
				"Set": [
					{
						"label": "Mode",
						"type": {
							"enumof": [
								{
									"label": "Disable all",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Disable all Sensor Alarms",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "Enable all",
									"type": {
										"fix": 	{
											"value": 2
										}
									}
								},
								{
									"label": "Enable all Sensor Alarms",
									"type": {
										"fix": 	{
											"value": 3
										}
									}
								}
							]
						}
					},
					{
						"label": "Duration in sec",
						"type": {
							"range": {
								"min": 0,
								"max": 256
							}
						}
					},
					{
						"label": "Alarm",
						"type": {
							"range": {
								"min": 0,
								"max": 0xffff
							}
						}
					}
				]
			};

		// BasicWindowCovering
		case 0x50:
			return {
				"Stop": [],
				"Start": [
					{
						"label": "Direction",
						"type": {
							"enumof": [
								{
									"label": "Up",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Down",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				]
			};

		// Configuration			
		case 0x70:
			return {
				"Get": [
					{
						"label": "Parameter",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					}
				],
				"Set": [
					{
						"label": "Parameter",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					},
					{
						"label": "Value",
						"type": {
							"range": {
								"min": 0,
								"max": 4294967295
							}
						}
					},
					{
						"label": "Size",
						"type": {
							"enumof": [
								{
									"label": "auto detect",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "1 byte",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "2 byte",
									"type": {
										"fix": 	{
											"value": 2
										}
									}
								},
								{
									"label": "4 byte",
									"type": {
										"fix": 	{
											"value": 4
										}
									}
								}
							]
						}
					}
				],
				"SetDefault": [
					{
						"label": "Parameter",
						"type": {
							"range": {
								"min": 0,
								"max": 255
							}
						}
					}
				]
			};

		// Association
		case 0x85:
			return {
				"GroupingsGet": [],
				"Get": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				],
				"Set": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					},
					{
						"label": "Node",
						"type": {
							"node": {
							}
						}
					}
				],
				"Remove": [
					{
						"label": "Group",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					},
					{
						"label": "Node",
						"type": {
							"range": {
								"min": 	1,
								"max": 255
							}
						}
					}
				]
			};

		// AssociationCommandConfiguration
		case 0x9b:
			return {
				"Get": []
			};
		
		// NodeNaming
		case 0x77:
			return {
				"Get": [],
				"GetName": [],
				"GetLocation": [],
				"SetName": [
					{
						"label": "Name",
						"type": {
							"string": {
							}
						}
					}
				],
				"SetLocation": [
					{
						"label": "Location",
						"type": {
							"string": {
							}
						}
					}
				]
			};
			
		// MeterTableMonitor
		case 0x3d:
			return {
				"StatusDateGet": [
					{
						"label": "Index",
						"type": {
							"enumof": [
								{
									"label": "For all entries",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "",
									"type": {
										"range": 	{
											"min": 1,
											"max": 255
										}
									}
								}
							]
						}
					},
					{
						"label": "Start (UNIX stamp)",
						"type": {
							"range": {
								"min": 0,
								"max": 100000000
							}
						}
					},
					{
						"label": "Stop (UNIX stamp)",
						"type": {
							"range": {
								"min": 0,
								"max": 100000000
							}
						}
					}
				],
				"StatusDepthGet": [
					{
						"label": "Index",
						"type": {
							"enumof": [
								{
									"label": "Current only",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "For all entries",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								},
								{
									"label": "",
									"type": {
										"range": 	{
											"min": 1,
											"max": 255
										}
									}
								}
							]
						}
					}
				],
				"CurrentDataGet": [
					{
						"label": "Index",
						"type": {
							"enumof": [
								{
									"label": "For all supported",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "",
									"type": {
										"range": 	{
											"min": 1,
											"max": 255
										}
									}
								}
							]
						}
					}
				]
			};

		// Indicator			
		case 0x87:
			return {
				"Get": [],
				"Set": [
					{
						"label": "Active",
						"type": {
							"enumof": [
								{
									"label": "Off",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "On",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				]
			};

		/*
		This UI requires special handling of form, so it is handled in a special tab in the UI
		// FirmwareUpdateMD
		case 0x7A:
			return {
				"Get": [],
				"RequestUpdate": [
					{
						"label": "Path to File",
						"type": {
							"string": {
							}
						}
					},
					{
						"label": "FirmwareId",
						"type": {
							"range": {
								"min": 0,
								"max": 65535
							}
						}
					}
				]
			};
		*/
		
		// DoorLockLogging
		case 0x4c:
			return {
				"Get": [
					{
						"label": "Record",
						"type": {
							"range": {
								"min": 0,
								"max": 99
							}
						}
					}
				]
			};

		// DoorLock
		case 0x62:
			return {
			 	"Get": [],
				"Set": [
					{
						"label": "Mode",
						"type": {
							"enumof": [
								{
									"label": "Door Unsecured",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Door Unsecured with timeout",
									"type": {
										"fix": 	{
											"value": 0x1
										}
									}
								},
								{
									"label": "Door Unsecured for inside Door Handles",
									"type": {
										"fix": 	{
											"value": 0x10
										}
									}
								},
								{
									"label": "Door Unsecured for inside Door Handles with timeout",
									"type": {
										"fix": 	{
											"value": 0x11
										}
									}
								},
								{
									"label": "Door Unsecured for outside Door Handles",
									"type": {
										"fix": 	{
											"value": 0x20
										}
									}
								},
								{
									"label": "Door Unsecured for outside Door Handles with timeout",
									"type": {
										"fix": 	{
											"value": 0x21
										}
									}
								},
								{
									"label": "Door Secured",
									"type": {
										"fix": 	{
											"value": 0xff
										}
									}
								}
							]
						}
					}
				],
				"ConfigurationGet": [],
				"ConfigurationSet": [
					{
						"label": "Timeout, minutes",
						"type": {
							"range": {
								"min": 	1,
								"max": 254
							}
						}
					},
					{
						"label": "Timeout, seconds",
						"type": {
							"range": {
								"min": 	1,
								"max": 59
							}
						}
					}
				]
			};

		// Basic
		case 0x20:
			return {
				"Get": [],
				"Set": [
					{
						"label": "Level",
						"type": {
							"enumof": [
								{
									"label": "Off",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},
								{
									"label": "Dimmer level",
									"type": {
										"range": {
											"min": 0,
											"max": 255
										}
									}
								},
								{
									"label": "Max",
									"type": {
										"fix": 	{
											"value": 99
										}
									}
								},
								{
									"label": "On",
									"type": {
										"fix": 	{
											"value": 255
										}
									}
								}
							]
						}
					}
				]
			};
			
		// ClimateControlSchedule	(incomplete Implementation, only overwrite but no schedule handling)
		case 0x46:
			return {
				"OverrideGet": [],
				"OverrideSet": [
					{
						"label": "Type",
						"type": {
							"enumof": [
								{
									"label": "No override",
									"type": {
										"fix": 	{
											"value": 0
										}
									}
								},							
								{
									"label": "Permanently",
									"type": {
										"fix": 	{
											"value": 1
										}
									}
								},
								{
									"label": "Temporary",
									"type": {
										"fix": 	{
											"value": 2
										}
									}
								}
							]
						}
					},
					
					{
						"label": "State",
						"type": {
							"enumof": [
								{
									"label": "Unused",
									"type": {
										"fix": 	{
											"value": 127
										}
									}
								},
								{
									"label": "Energy Saving",
									"type": {
										"fix": 	{
											"value": 122
										}
									}
								},							
								{
									"label": "Frost Protection",
									"type": {
										"fix": 	{
											"value": 121
										}
									}
								},
								{
									"label": "Temperature Offset in 1/10K",
									"type": {
										"range": {
											"min": -128,
											"max": 120
										}
									}
								},
							]
						}
					},
					
					
					
					
										
				]								
			};   

		default: return {};
	}
}

/*
 Copyright 2011-2013 Abdulla Abdurakhmanov
 Original sources are available at https://code.google.com/p/x2js/

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

function X2JS(config) {
	'use strict';
		
	var VERSION = "1.1.5";
	
	config = config || {};
	initConfigDefaults();
	initRequiredPolyfills();
	
	function initConfigDefaults() {
		if(config.escapeMode === undefined) {
			config.escapeMode = true;
		}
		config.attributePrefix = config.attributePrefix || "_";
		config.arrayAccessForm = config.arrayAccessForm || "none";
		config.emptyNodeForm = config.emptyNodeForm || "text";
		if(config.enableToStringFunc === undefined) {
			config.enableToStringFunc = true; 
		}
		config.arrayAccessFormPaths = config.arrayAccessFormPaths || []; 
		if(config.skipEmptyTextNodesForObj === undefined) {
			config.skipEmptyTextNodesForObj = true;
		}
		if(config.stripWhitespaces === undefined) {
			config.stripWhitespaces = true;
		}
		config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];
	}

	var DOMNodeTypes = {
		ELEMENT_NODE 	   : 1,
		TEXT_NODE    	   : 3,
		CDATA_SECTION_NODE : 4,
		COMMENT_NODE	   : 8,
		DOCUMENT_NODE 	   : 9
	};
	
	function initRequiredPolyfills() {
		function pad(number) {
	      var r = String(number);
	      if ( r.length === 1 ) {
	        r = '0' + r;
	      }
	      return r;
	    }
		// Hello IE8-
		if(typeof String.prototype.trim !== 'function') {			
			String.prototype.trim = function() {
				return this.replace(/^\s+|^\n+|(\s|\n)+$/g, '');
			}
		}
		if(typeof Date.prototype.toISOString !== 'function') {
			// Implementation from http://stackoverflow.com/questions/2573521/how-do-i-output-an-iso-8601-formatted-string-in-javascript
			Date.prototype.toISOString = function() {
		      return this.getUTCFullYear()
		        + '-' + pad( this.getUTCMonth() + 1 )
		        + '-' + pad( this.getUTCDate() )
		        + 'T' + pad( this.getUTCHours() )
		        + ':' + pad( this.getUTCMinutes() )
		        + ':' + pad( this.getUTCSeconds() )
		        + '.' + String( (this.getUTCMilliseconds()/1000).toFixed(3) ).slice( 2, 5 )
		        + 'Z';
		    };
		}
	}
	
	function getNodeLocalName( node ) {
		var nodeLocalName = node.localName;			
		if(nodeLocalName == null) // Yeah, this is IE!! 
			nodeLocalName = node.baseName;
		if(nodeLocalName == null || nodeLocalName=="") // =="" is IE too
			nodeLocalName = node.nodeName;
		return nodeLocalName;
	}
	
	function getNodePrefix(node) {
		return node.prefix;
	}
		
	function escapeXmlChars(str) {
		if(typeof(str) == "string")
			return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
		else
			return str;
	}

	function unescapeXmlChars(str) {
		return str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&#x2F;/g, '\/');
	}
	
	function toArrayAccessForm(obj, childName, path) {
		switch(config.arrayAccessForm) {
		case "property":
			if(!(obj[childName] instanceof Array))
				obj[childName+"_asArray"] = [obj[childName]];
			else
				obj[childName+"_asArray"] = obj[childName];
			break;		
		/*case "none":
			break;*/
		}
		
		if(!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {
			var idx = 0;
			for(; idx < config.arrayAccessFormPaths.length; idx++) {
				var arrayPath = config.arrayAccessFormPaths[idx];
				if( typeof arrayPath === "string" ) {
					if(arrayPath == path)
						break;
				}
				else
				if( arrayPath instanceof RegExp) {
					if(arrayPath.test(path))
						break;
				}				
				else
				if( typeof arrayPath === "function") {
					if(arrayPath(obj, childName, path))
						break;
				}
			}
			if(idx!=config.arrayAccessFormPaths.length) {
				obj[childName] = [obj[childName]];
			}
		}
	}
	
	function fromXmlDateTime(prop) {
		// Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
		// Improved to support full spec and optional parts
		var bits = prop.split(/[-T:+Z]/g);
		
		var d = new Date(bits[0], bits[1]-1, bits[2]);			
		var secondBits = bits[5].split("\.");
		d.setHours(bits[3], bits[4], secondBits[0]);
		if(secondBits.length>1)
			d.setMilliseconds(secondBits[1]);

		// Get supplied time zone offset in minutes
		if(bits[6] && bits[7]) {
			var offsetMinutes = bits[6] * 60 + Number(bits[7]);
			var sign = /\d\d-\d\d:\d\d$/.test(prop)? '-' : '+';

			// Apply the sign
			offsetMinutes = 0 + (sign == '-'? -1 * offsetMinutes : offsetMinutes);

			// Apply offset and local timezone
			d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())
		}
		else
			if(prop.indexOf("Z", prop.length - 1) !== -1) {
				d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));					
			}

		// d is now a local time equivalent to the supplied time
		return d;
	}
	
	function checkFromXmlDateTimePaths(value, childName, fullPath) {
		if(config.datetimeAccessFormPaths.length > 0) {
			var path = fullPath.split("\.#")[0];
			var idx = 0;
			for(; idx < config.datetimeAccessFormPaths.length; idx++) {
				var dtPath = config.datetimeAccessFormPaths[idx];
				if( typeof dtPath === "string" ) {
					if(dtPath == path)
						break;
				}
				else
				if( dtPath instanceof RegExp) {
					if(dtPath.test(path))
						break;
				}				
				else
				if( typeof dtPath === "function") {
					if(dtPath(obj, childName, path))
						break;
				}
			}
			if(idx!=config.datetimeAccessFormPaths.length) {
				return fromXmlDateTime(value);
			}
			else
				return value;
		}
		else
			return value;
	}

	function parseDOMChildren( node, path ) {
		if(node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {
			var result = new Object;
			var nodeChildren = node.childNodes;
			// Alternative for firstElementChild which is not supported in some environments
			for(var cidx=0; cidx <nodeChildren.length; cidx++) {
				var child = nodeChildren.item(cidx);
				if(child.nodeType == DOMNodeTypes.ELEMENT_NODE) {
					var childName = getNodeLocalName(child);
					result[childName] = parseDOMChildren(child, childName);
				}
			}
			return result;
		}
		else
		if(node.nodeType == DOMNodeTypes.ELEMENT_NODE) {
			var result = new Object;
			result.__cnt=0;
			
			var nodeChildren = node.childNodes;
			
			// Children nodes
			for(var cidx=0; cidx <nodeChildren.length; cidx++) {
				var child = nodeChildren.item(cidx); // nodeChildren[cidx];
				var childName = getNodeLocalName(child);
				
				if(child.nodeType!= DOMNodeTypes.COMMENT_NODE) {
					result.__cnt++;
					if(result[childName] == null) {
						result[childName] = parseDOMChildren(child, path+"."+childName);
						toArrayAccessForm(result, childName, path+"."+childName);					
					}
					else {
						if(result[childName] != null) {
							if( !(result[childName] instanceof Array)) {
								result[childName] = [result[childName]];
								toArrayAccessForm(result, childName, path+"."+childName);
							}
						}
						(result[childName])[result[childName].length] = parseDOMChildren(child, path+"."+childName);
					}
				}								
			}
			
			// Attributes
			for(var aidx=0; aidx <node.attributes.length; aidx++) {
				var attr = node.attributes.item(aidx); // [aidx];
				result.__cnt++;
				result[config.attributePrefix+attr.name]=attr.value;
			}
			
			// Node namespace prefix
			var nodePrefix = getNodePrefix(node);
			if(nodePrefix!=null && nodePrefix!="") {
				result.__cnt++;
				result.__prefix=nodePrefix;
			}
			
			if(result["#text"]!=null) {				
				result.__text = result["#text"];
				if(result.__text instanceof Array) {
					result.__text = result.__text.join("\n");
				}
				if(config.escapeMode)
					result.__text = unescapeXmlChars(result.__text);
				if(config.stripWhitespaces)
					result.__text = result.__text.trim();
				delete result["#text"];
				if(config.arrayAccessForm=="property")
					delete result["#text_asArray"];
				result.__text = checkFromXmlDateTimePaths(result.__text, childName, path+"."+childName);
			}
			if(result["#cdata-section"]!=null) {
				result.__cdata = result["#cdata-section"];
				delete result["#cdata-section"];
				if(config.arrayAccessForm=="property")
					delete result["#cdata-section_asArray"];
			}
			
			if( result.__cnt == 1 && result.__text!=null  ) {
				result = result.__text;
			}
			else
			if( result.__cnt == 0 && config.emptyNodeForm=="text" ) {
				result = '';
			}
			else
			if ( result.__cnt > 1 && result.__text!=null && config.skipEmptyTextNodesForObj) {
				if( (config.stripWhitespaces && result.__text=="") || (result.__text.trim()=="")) {
					delete result.__text;
				}
			}
			delete result.__cnt;			
			
			if( config.enableToStringFunc && (result.__text!=null || result.__cdata!=null )) {
				result.toString = function() {
					return (this.__text!=null? this.__text:'')+( this.__cdata!=null ? this.__cdata:'');
				};
			}
			
			return result;
		}
		else
		if(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {
			return node.nodeValue;
		}	
	}
	
	function startTag(jsonObj, element, attrList, closed) {
		var resultStr = "<"+ ( (jsonObj!=null && jsonObj.__prefix!=null)? (jsonObj.__prefix+":"):"") + element;
		if(attrList!=null) {
			for(var aidx = 0; aidx < attrList.length; aidx++) {
				var attrName = attrList[aidx];
				var attrVal = jsonObj[attrName];
				if(config.escapeMode)
					attrVal=escapeXmlChars(attrVal);
				resultStr+=" "+attrName.substr(config.attributePrefix.length)+"='"+attrVal+"'";
			}
		}
		if(!closed)
			resultStr+=">";
		else
			resultStr+="/>";
		return resultStr;
	}
	
	function endTag(jsonObj,elementName) {
		return "</"+ (jsonObj.__prefix!=null? (jsonObj.__prefix+":"):"")+elementName+">";
	}
	
	function endsWith(str, suffix) {
	    return str.indexOf(suffix, str.length - suffix.length) !== -1;
	}
	
	function jsonXmlSpecialElem ( jsonObj, jsonObjField ) {
		if((config.arrayAccessForm=="property" && endsWith(jsonObjField.toString(),("_asArray"))) 
				|| jsonObjField.toString().indexOf(config.attributePrefix)==0 
				|| jsonObjField.toString().indexOf("__")==0
				|| (jsonObj[jsonObjField] instanceof Function) )
			return true;
		else
			return false;
	}
	
	function jsonXmlElemCount ( jsonObj ) {
		var elementsCnt = 0;
		if(jsonObj instanceof Object ) {
			for( var it in jsonObj  ) {
				if(jsonXmlSpecialElem ( jsonObj, it) )
					continue;			
				elementsCnt++;
			}
		}
		return elementsCnt;
	}
	
	function parseJSONAttributes ( jsonObj ) {
		var attrList = [];
		if(jsonObj instanceof Object ) {
			for( var ait in jsonObj  ) {
				if(ait.toString().indexOf("__")== -1 && ait.toString().indexOf(config.attributePrefix)==0) {
					attrList.push(ait);
				}
			}
		}
		return attrList;
	}
	
	function parseJSONTextAttrs ( jsonTxtObj ) {
		var result ="";
		
		if(jsonTxtObj.__cdata!=null) {										
			result+="<![CDATA["+jsonTxtObj.__cdata+"]]>";					
		}
		
		if(jsonTxtObj.__text!=null) {			
			if(config.escapeMode)
				result+=escapeXmlChars(jsonTxtObj.__text);
			else
				result+=jsonTxtObj.__text;
		}
		return result;
	}
	
	function parseJSONTextObject ( jsonTxtObj ) {
		var result ="";

		if( jsonTxtObj instanceof Object ) {
			result+=parseJSONTextAttrs ( jsonTxtObj );
		}
		else
			if(jsonTxtObj!=null) {
				if(config.escapeMode)
					result+=escapeXmlChars(jsonTxtObj);
				else
					result+=jsonTxtObj;
			}
		
		return result;
	}
	
	function parseJSONArray ( jsonArrRoot, jsonArrObj, attrList ) {
		var result = ""; 
		if(jsonArrRoot.length == 0) {
			result+=startTag(jsonArrRoot, jsonArrObj, attrList, true);
		}
		else {
			for(var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {
				result+=startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);
				result+=parseJSONObject(jsonArrRoot[arIdx]);
				result+=endTag(jsonArrRoot[arIdx],jsonArrObj);						
			}
		}
		return result;
	}
	
	function parseJSONObject ( jsonObj ) {
		var result = "";	

		var elementsCnt = jsonXmlElemCount ( jsonObj );
		
		if(elementsCnt > 0) {
			for( var it in jsonObj ) {
				
				if(jsonXmlSpecialElem ( jsonObj, it) )
					continue;			
				
				var subObj = jsonObj[it];						
				
				var attrList = parseJSONAttributes( subObj )
				
				if(subObj == null || subObj == undefined) {
					result+=startTag(subObj, it, attrList, true);
				}
				else
				if(subObj instanceof Object) {
					
					if(subObj instanceof Array) {					
						result+=parseJSONArray( subObj, it, attrList );					
					}
					else if(subObj instanceof Date) {
						result+=startTag(subObj, it, attrList, false);
						result+=subObj.toISOString();
						result+=endTag(subObj,it);
					}
					else {
						var subObjElementsCnt = jsonXmlElemCount ( subObj );
						if(subObjElementsCnt > 0 || subObj.__text!=null || subObj.__cdata!=null) {
							result+=startTag(subObj, it, attrList, false);
							result+=parseJSONObject(subObj);
							result+=endTag(subObj,it);
						}
						else {
							result+=startTag(subObj, it, attrList, true);
						}
					}
				}
				else {
					result+=startTag(subObj, it, attrList, false);
					result+=parseJSONTextObject(subObj);
					result+=endTag(subObj,it);
				}
			}
		}
		result+=parseJSONTextObject(jsonObj);
		
		return result;
	}
	
	this.parseXmlString = function(xmlDocStr) {
		var isIEParser = window.ActiveXObject || "ActiveXObject" in window;
		if (xmlDocStr === undefined) {
			return null;
		}
		var xmlDoc;
		if (window.DOMParser) {
			var parser=new window.DOMParser();			
			var parsererrorNS = null;
			// IE9+ now is here
			if(!isIEParser) {
				try {
					parsererrorNS = parser.parseFromString("INVALID", "text/xml").childNodes[0].namespaceURI;
				}
				catch(err) {					
					parsererrorNS = null;
				}
			}
			try {
				xmlDoc = parser.parseFromString( xmlDocStr, "text/xml" );
				if( parsererrorNS!= null && xmlDoc.getElementsByTagNameNS(parsererrorNS, "parsererror").length > 0) {
					//throw new Error('Error parsing XML: '+xmlDocStr);
					xmlDoc = null;
				}
			}
			catch(err) {
				xmlDoc = null;
			}
		}
		else {
			// IE :(
			if(xmlDocStr.indexOf("<?")==0) {
				xmlDocStr = xmlDocStr.substr( xmlDocStr.indexOf("?>") + 2 );
			}
			xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
			xmlDoc.async="false";
			xmlDoc.loadXML(xmlDocStr);
		}
		return xmlDoc;
	};
	
	this.asArray = function(prop) {
		if(prop instanceof Array)
			return prop;
		else
			return [prop];
	};
	
	this.toXmlDateTime = function(dt) {
		if(dt instanceof Date)
			return dt.toISOString();
		else
		if(typeof(dt) === 'number' )
			return new Date(dt).toISOString();
		else	
			return null;
	};
	
	this.asDateTime = function(prop) {
		if(typeof(prop) == "string") {
			return fromXmlDateTime(prop);
		}
		else
			return prop;
	};

	this.xml2json = function (xmlDoc) {
		return parseDOMChildren ( xmlDoc );
	};
	
	this.xml_str2json = function (xmlDocStr) {
		var xmlDoc = this.parseXmlString(xmlDocStr);
		if(xmlDoc!=null)
			return this.xml2json(xmlDoc);
		else
			return null;
	};

	this.json2xml_str = function (jsonObj) {
		return parseJSONObject ( jsonObj );
	};

	this.json2xml = function (jsonObj) {
		var xmlDocStr = this.json2xml_str (jsonObj);
		return this.parseXmlString(xmlDocStr);
	};
	
	this.getVersion = function () {
		return VERSION;
	};
	
}

/**
 * ExpertUI directives
 * @author Martin Vach
 */


myApp.directive('expertCommandInput', function($filter) {
    // Get text input
    function getText(label, value, min, max, name) {
        var input = '';
        var inName = $filter('stringToSlug')(name ? name : label);
        input += '<label>' + label + '</label> ';
        input += '<input class="form-control" name="' + inName + '" type="text" class="form-control" value="' + value + '" title=" min: ' + min + ', max: ' + max + '" />';
        return input;
    }
    // Get node
    function getNode(label, devices, currValue, name) {
        var input = '';
        var inName = $filter('stringToSlug')(name ? name : label);
        
        input += '<label>' + label + '</label> ';
        input += '<select name="select_' + inName + '" class="form-control">';
        input += '<option value="1">RaZberry</option>';
        angular.forEach(devices, function(v, k) {
            var selected = (v.id == currValue ? ' selected' : '');
            input += '<option value="' + v.id + '"' + selected + '>' + v.name + '</option>';
        });

        input += '</select>';

        return input;
    }

    // Get enumerators
    function getEnum(label, enums, defaultValue, name, hideRadio,currValue) {
        
        var input = '';
        if (!enums) {
            return;
        }
        var inName = $filter('stringToSlug')(name ? name : label);
        input += '<label>' + label + '</label><br />';
        var cnt = 1;
        var value = (currValue !== undefined ? currValue : defaultValue);
        angular.forEach(enums.enumof, function(v, k) {
            var title = v.label;
            var type = v.type;
            var enumVal =  $filter('hasNode')(v, 'type.fix.value');
            var checked = (cnt == 1 ? ' checked="checked"' : '');
            var isCurrent = (cnt == 1 ? ' commads-is-current' : '');

            if ('fix' in type) {
                if (defaultValue) {
                    if (isNaN(parseInt(defaultValue, 10))) {
                        isCurrent = (v.label == defaultValue ? ' commads-is-current' : '');
                    } else {
                         isCurrent = '';
                    }
                }
                
                if (!isNaN(parseInt(value, 10))) {
                    checked = (enumVal == value ? ' checked="checked"' : '');
                }
                input += '<input name="radio_' + inName + '" class="commands-data-chbx" type="radio" value="' + type.fix.value + '"' + checked + ' /> <span class="commands-label' + isCurrent + '">' + title + '</span><br />';
            } else if ('range' in type) {
                var min = type.range.min;
                var max = type.range.max;
                var disabled = ' disabled="true"';
                var setVal = (value ? value : min);
                if (defaultValue) {
                    if (defaultValue >= min && defaultValue <= max) {
                        disabled = '';
                        isCurrent = ' commads-is-current';
                    }

                } else {
                    isCurrent = '';
                }
                if (value) {
                    if (value >= min && value <= max) {
                        checked = ' checked="checked"';
                        disabled = '';
                    }

                } else {
                    checked = '';
                }
                
                if (hideRadio) {
                    disabled = '';
                }

//                input += '<input name="radio_' + inName + '" class="commands-data-chbx" type="radio" value=""' + checked + ' /> ' + title + ' <input type="text" name="radio_' + inName + '_txt" class="form-control commands-data-txt-chbx" value="' + min + '" title=" min: ' + min + ', max: ' + max + '"'+ disabled + ' /><br />'; 
                if (!hideRadio) {
                    input += '<div><input name="radio_' + inName + '" class="commands-data-chbx" type="radio" value=""' + checked + ' /> <span class="commands-label' + isCurrent + '">' + title + '</span> <input type="text" name="radio_txt_' + inName + '" class="form-control commands-data-txt-chbx" value="' + setVal + '" title=" min: ' + min + ', max: ' + max + '"' + disabled + ' /></div>';
                } else {
                    input += '<input type="text" name="radio_txt_' + inName + '" class="form-control" value="' + setVal + '" title=" min: ' + min + ', max: ' + max + '" /><br />';
                }


            } else {
                input = '';
            }
            cnt++;

        });
        return input;
    }

    // Get dropdown list
    function getDropdown(label, enums, defaultValue, name,currValue) {
        var input = '';
        var cValue = (currValue !== undefined ? currValue : defaultValue);
        var inName = $filter('stringToSlug')(name ? name : label);
        input += '<label>' + label + '</label><br />';
        input += '<select name="select_' + inName + '" class="form-control">';
        var cnt = 1;
        angular.forEach(enums.enumof, function(v, k) {
            var title = v.label;
            var type = v.type;
            var value;
            if ('fix' in type) {
                value = type.fix.value;
            } else if ('range' in type) {
                value = type.range.min;
            }

            if (value) {
                var selected = (type.fix.value == cValue ? ' selected' : '');
            }
            input += '<option value="' + value + '"' + selected + '> ' + title + '</option>';
            cnt++;

        });
        input += '</select">';
        return input;
    }

    // Get constant 
    function getConstant(label, type, defaultValue, name,currValue) {
        var input = '';
        var inName = $filter('stringToSlug')(name ? name : label);
        input += '<label>' + label + '</label><br />';
        if (type.constant.length > 0) {
            input += '<select name="select_' + inName + '" class="form-control">';
            angular.forEach(type.constant, function(v, k) {

                input += '<option value="' + v.type.constant.value + '"> ' + v.label + '</option>';
            });


            input += '</select">';
        }
        //console.log(type,defaultValue);
        input += '<em>Constant type</em>';
        return input;
    }
    // Get string
    function getString(label, value, name) {
        var input = '';
        var inName = $filter('stringToSlug')(name ? name : label);
        input += '<label>' + label + '</label> ';
        input += '<input class="form-control" name="' + inName + '" type="text" class="form-control" value="' + value + '" />';
        return input;
    }
    
    // Get bitset
    function getBitset(label, enums, defaultValue, name, hideRadio,currValue) {
        
        var input = 'Bitset';
        
        return input;
    }

    // Get default
    function getDefault(label) {

        var input = '';
        input += '<label>' + label + '</label><br />';
        return input;
    }

    return {
        restrict: "E",
        replace: true,
        template: '<div class="form-group" ng-bind-html="input | toTrusted"></div>',
        scope: {
            collection: '=',
            devices: '=',
            getNodeDevices: '=',
            values: '=',
            isDropdown: '=',
            defaultValue: '=',
            showDefaultValue: '=',
            currValue: '=',
            currNodeValue: '=',
            name: '=',
            divId: '='
        },
        link: function(scope, element, attrs) {

            var input = '';
            if (!scope.collection) {
                return;
            }
            var label = scope.collection.label;
            var type = scope.collection.type;
            var name = (scope.collection.name || scope.name);
            var hideRadio = scope.collection.hideRadio;
            if (scope.isDropdown) {
                input = getDropdown(label, type, scope.defaultValue, name,scope.currValue);
                scope.input = input;
                return;
            }
            //if (label && type) {
            if (type) {
                if ('range' in type) {
                    input = getText(label, scope.values, type.range.min, type.range.max, name);
                } else if ('node' in type) {
                    input = getNode(label, scope.getNodeDevices(), scope.currNodeValue, name);
                } else if ('enumof' in type) {
                    input = getEnum(label, type, scope.defaultValue, name, hideRadio,scope.currValue);
                } else if ('bitset' in type) {
                    input = getBitset(label, type, scope.defaultValue, name, hideRadio,scope.currValue);
                } else if ('constant' in type) {
                    input = getConstant(label, type, scope.defaultValue, name,scope.currValue);
                } else if ('string' in type) {
                    input = getString(label, scope.values, name,scope.currValue);
                } else {
                    input = getDefault(label);
                }
                scope.input = input;
                return;
            }

        }

    };
});

myApp.directive('configDefaultValue', function() {
    return {
        restrict: "E",
        replace: true,
        template: '<span class="default-value-format"> {{input}}</span>',
        scope: {
            collection: '=',
            defaultValue: '=',
            showDefaultValue: '='
        },
        link: function(scope, element, attrs) {
            scope.input = scope.showDefaultValue;
            var input = '';
            if (!scope.collection) {
                return;
            }
            var label = scope.collection.label;
            var type = scope.collection.type;
            var name = scope.collection.name;
            var hideRadio = scope.collection.hideRadio;
            
            if (type) {
                if ('range' in type) {
                    //input = getText(label, scope.values, type.range.min, type.range.max, name);
                } else if ('node' in type) {
                    //input = getNode(label, scope.getNodeDevices(), 'null', name);
                } else if ('enumof' in type) {
                    input = getEnum(type, scope.defaultValue,scope.showDefaultValue);
                   
                } else if ('constant' in type) {
                    //input = getConstant(label, type, scope.defaultValue, name);
                } else if ('string' in type) {
                    //input = getString(label, scope.values, name);
                } else {
                    input = scope.showDefaultValue;
                }
                scope.input = input;
                
                return;
            }


        }

    };

    // Get enumerators
    function getEnum(enums, defaultValue,showDefaultValue) {
        //console.log(enums)
        var input = showDefaultValue;
        if (!enums) {
            return;
        }
        angular.forEach(enums.enumof, function(v, k) {
          
            var title = v.label ? v.label : showDefaultValue;
            var type = v.type;
             // debugger; 
            if ('fix' in type) {
                if (type.fix.value == showDefaultValue) {
                    input = title;
                    return;
                }
 
            } else if ('range' in type) {
                var min = type.range.min;
                var max = type.range.max;
                var setVal = (defaultValue ? defaultValue : min);
                if (setVal == showDefaultValue) {
                    input = showDefaultValue;
                    return;
                }
            }

        });
        
        return input;
    }
});

myApp.directive('configValueTitle', function() {
    return {
        restrict: "A",
        //replace: true,
        template: '<span title="{{showValue}}">{{input}}</span>',
        scope: {
            collection: '=',
            showValue: '='
        },
        link: function(scope, element, attrs) {
            scope.input = scope.showValue;
            var input = '';
            if (!scope.collection) {
                return;
            }
            var type = scope.collection.type;
            
            if (type) {
                if ('range' in type) {
                    //input = getText(label, scope.values, type.range.min, type.range.max, name);
                } else if ('node' in type) {
                    //input = getNode(label, scope.getNodeDevices(), 'null', name);
                } else if ('enumof' in type) {
                    input = getEnum(type, scope.showValue);
                   
                } else if ('constant' in type) {
                    //input = getConstant(label, type, scope.defaultValue, name);
                } else if ('string' in type) {
                    //input = getString(label, scope.values, name);
                } else {
                    input = scope.showValue;
                }
                scope.input = input;
                
                return;
            }


        }

    };

    // Get enumerators
    function getEnum(enums, showValue) {
        //console.log(enums)
        var input = showValue;
        if (!enums) {
            return;
        }
        angular.forEach(enums.enumof, function(v, k) {
          
            var title = v.label ? v.label : showValue;
            var type = v.type;
             // debugger; 
            if ('fix' in type) {
                if (type.fix.value == showValue) {
                    input = title;
                    return;
                }
 
            } else if ('range' in type) {
                var min = type.range.min;
                var max = type.range.max;
                var setVal = (showValue ? showValue : min);
                if (setVal == showValue) {
                    input = showValue;
                    return;
                }
            }

        });
        
        return input;
    }
});


/**
 * ExpertUI services
 * @author Martin Vach
 */
myAppService.service('expertService', function($filter) {
    /// --- Public functions --- ///
    /**
     * Get language line by key
     */
    this.getLangLine = function(key, languages) {
        return getLangLine(key, languages);
    };
    /**
     * Get config navigation devices
     */
    this.configGetNav = function(ZWaveAPIData) {
        return configGetNav(ZWaveAPIData);
    };

    /**
     * Get language from zddx
     */
    this.configGetZddxLang = function(node, lang) {
        return configGetZddxLang(node, lang);
    };
    /**
     * Get xml config param
     */
    this.getCfgXmlParam = function(cfgXml, nodeId, instance, commandClass, command) {
        return getCfgXmlParam(cfgXml, nodeId, instance, commandClass, command);
    };
    /**
     * Config cont
     */
    this.configConfigCont = function(node, nodeId, zddXml, cfgXml, lang, languages) {
        return configConfigCont(node, nodeId, zddXml, cfgXml, lang, languages);
    };
    /**
     *  Switch all cont
     */
    this.configSwitchAllCont = function(node, nodeId, ZWaveAPIData, cfgXml) {
        return configSwitchAllCont(node, nodeId, ZWaveAPIData, cfgXml);
    };
    /**
     * Protection cont
     */
    this.configProtectionCont = function(node, nodeId, ZWaveAPIData, cfgXml) {
        return configProtectionCont(node, nodeId, ZWaveAPIData, cfgXml);
    };
    /**
     * Wakeup cont
     */
    this.configWakeupCont = function(node, nodeId, ZWaveAPIData, cfgXml) {
        return configWakeupCont(node, nodeId, ZWaveAPIData, cfgXml);
    };

    /**
     *Build config XML file
     */
    this.buildCfgXml = function(data, cfgXml, id, commandclass) {
        return buildCfgXml(data, cfgXml, id, commandclass);
    };

    /// --- Private functions --- ///
    /**
     * Get language line by key
     */
    function getLangLine(key, languages) {
        if (angular.isObject(languages)) {
            if (angular.isDefined(languages[key])) {
                return languages[key] !== '' ? languages[key] : key;
            }
        }
        return key;
    }
    ;

    /**
     *  Get config navigation devices
     */
    function configGetNav(ZWaveAPIData) {
        var devices = [];
        var controllerNodeId = ZWaveAPIData.controller.data.nodeId.value;
        // Loop throught devices
        angular.forEach(ZWaveAPIData.devices, function(node, nodeId) {
            if (nodeId == 255 || nodeId == controllerNodeId || node.data.isVirtual.value) {
                return;
            }
            var node = ZWaveAPIData.devices[nodeId];
            // Set object
            var obj = {};
            obj['id'] = nodeId;
            obj['name'] = $filter('deviceName')(nodeId, node);
            devices.push(obj);
        });
        return devices;
    }

    /**
     *  Get language from zddx
     */
    function configGetZddxLang(langs, currLang) {
        var label = null;
        if (!langs) {
            return label;
        }
        if (angular.isArray(langs)) {
            for (var i = 0, len = langs.length; i < len; i++) {
                if (("__text" in langs[i]) && (langs[i]["_xml:lang"] == currLang)) {
                   label = langs[i].__text;
                    return label;
                     
                    //continue;
                }else{
                     if (("__text" in langs[i]) && (langs[i]["_xml:lang"] == 'en')) {
                    label = langs[i].__text;
                    return label;
                     }
                }
            }
            // DEPRECATED
//            angular.forEach(langs, function(lang, index) {
//                if (("__text" in lang) && (lang["_xml:lang"] == currLang)) {
//                    label = lang.__text;
//                    return false;
//                }
//                if (("__text" in lang) && (lang["_xml:lang"] == "en")) {
//                    label = lang.__text;
//                }
//            });
        } else {
            if (("__text" in langs)) {
                label = langs.__text;
            }
        }
         //console.log(label)
        return label;
    }

    /**
     * Get xml config param
     */
    function getCfgXmlParam(cfgXml, nodeId, instance, commandClass, command) {
        var cfg = $filter('hasNode')(cfgXml, 'config.devices.deviceconfiguration');
        if (!cfg) {
            return [];
        }
        // Get data for given device by id
        var collection = [];
        angular.forEach(cfg, function(v, k) {
            //if (v['_id'] == nodeId && v['_instance'] == instance && v['_commandClass'] == commandClass && v['_command'] == command) {
            if (v['_id'] == nodeId && v['_instance'] == instance && v['_commandclass'] == commandClass && v['_command'] == command) {
//                if(!angular.isArray(v['_parameter'])){
//                    return;
//                }
                var array = JSON.parse(v['_parameter']);
                if (array.length > 2) {
                    collection[array[0]] = array[1];
                }
                else if (array.length == 2) {
                    collection = array;

                }
                else {
                    collection[0] = array[0];
                    return;
                }
            }

        });
        //console.log(collection)
        return collection;

    }

    /**
     * Config cont
     */
    function configConfigCont(node, nodeId, zddXml, cfgXml, lang, languages) {
        if (!0x70 in node.instances[0].commandClasses) {
            return null;
        }
        if (!zddXml) {
            return null;
        }

        if (!zddXml.ZWaveDevice.hasOwnProperty("configParams")) {
            return null;
        }
        var config_cont = [];
        var params = zddXml.ZWaveDevice.configParams['configParam'];
//        var lang = 'en';
//        var langs = {
//            "en": "1",
//            "de": "0"
//        };
//        if (angular.isDefined(langs[lang])) {
//            lang = lang;
//        }
//        var langId = langs[lang];
        // Loop throught params
        var parCnt = 0;
        var cfgFile = getCfgXmlParam(cfgXml, nodeId, '0', '70', 'Set');
        angular.forEach(params, function(conf_html, i) {
            //console.log(zddXml);
            if (!angular.isObject(conf_html)) {
                return;
            }

            have_conf_params = true;
            var conf = conf_html;
            var conf_num = conf['_number'];
            //console.log(cfgFile[conf_num])
            var conf_size = conf['_size'];
            var conf_name = configGetZddxLang($filter('hasNode')(conf, 'name.lang'), lang) || getLangLine('configuration_parameter', languages) + ' ' + conf_num;
            var conf_description = configGetZddxLang($filter('hasNode')(conf, 'description.lang'), lang);
            var conf_size = conf['_size'];
            var conf_default_value = null;
            var conf_type = conf['_type'];
            var showDefaultValue = null;
            var config_config_value;

            // get value from the Z-Wave data
            var config_zwave_value = null;

            if (angular.isDefined(node.instances[0].commandClasses[0x70])) {
                if (node.instances[0].commandClasses[0x70].data[conf_num] != null && node.instances[0].commandClasses[0x70].data[conf_num].val.value !== "") {
                    config_zwave_value = node.instances[0].commandClasses[0x70].data[conf_num].val.value;
                    conf_default = config_zwave_value;

                }

            }

            // get default value
            var conf_default = null;
            if (conf['_default'] !== undefined) {
                conf_default = parseInt(conf['_default'], 16);
                showDefaultValue = conf_default;
            }

            // get default value from the config XML
            if (cfgFile[conf_num] !== undefined) {
                config_config_value = cfgFile[conf_num];
            } else {
                if (config_zwave_value !== null) {
                    config_config_value = config_zwave_value;
                } else {
                    config_config_value = conf_default;
                }
            }

            var isUpdated = true;
            var updateTime = '';
            if (angular.isDefined(node.instances[0].commandClasses[0x70])
                    && angular.isDefined(node.instances[0].commandClasses[0x70].data[conf_num])) {
                var uTime = node.instances[0].commandClasses[0x70].data[conf_num].updateTime;
                var iTime = node.instances[0].commandClasses[0x70].data[conf_num].invalidateTime;
                var updateTime = $filter('isTodayFromUnix')(uTime);
                var isUpdated = (uTime > iTime ? true : false);
            }

            // Switch
            var conf_method_descr;
            //console.log(conf_name + ' --- ' + conf_type)
            switch (conf_type) {
                case 'constant':
                case 'rangemapped':
                    var param_struct_arr = [];
                    var conf_param_options = '';

                    angular.forEach(conf['value'], function(value_html, i) {
                        var value = value_html;
                        var value_from = parseInt(value['_from'], 16);
                        var value_to = parseInt(value['_to'], 16);
                        var value_description = null;
                        if (angular.isDefined(value.description)) {
                            value_description = configGetZddxLang($filter('hasNode')(value, 'description.lang'), lang);
                        }
                        if (angular.isDefined(value.lang)) {
                            value_description = configGetZddxLang($filter('hasNode')(value, 'lang'), lang);

                        }
                        var value_repr = value_from; // representative value for the range
                        if (conf_default !== null)
                            if (value_from <= conf_default && conf_default <= value_to) {
                                conf_default_value = value_description;
                                value_repr = conf_default;
                            }
                        param_struct_arr.push({
                            label: value_description,
                            type: {
                                fix: {
                                    value: value_repr
                                }
                            }
                        });
                    });
                    conf_method_descr = {
                        nodeId: nodeId,
                        label: 'Nº ' + conf_num + ' - ' + conf_name,
                        type: {
                            enumof: param_struct_arr
                        },
                        name: 'input_' + nodeId + '_' + conf_num,
                        description: conf_description,
                        updateTime: updateTime,
                        isUpdated: isUpdated,
                        defaultValue: conf_default_value,
                        showDefaultValue: showDefaultValue,
                        configCconfigValue: config_config_value,
                        configZwaveValue: config_zwave_value,
                        confNum: conf_num,
                        confSize: conf_size
                    };

                    break;
                case 'range':

                    var param_struct_arr = [];
                    var rangeParam = conf['value'];
                    //console.log(rangeParam, conf_num);

                    if (!rangeParam) {
                        conf_method_descr = {
                            nodeId: nodeId,
                            label: 'Nº ' + conf_num + ' - ' + conf_name,
                            type: {
                                noval: null
                            },
                            name: 'input_' + nodeId + '_' + conf_num,
                            description: conf_description,
                            updateTime: updateTime,
                            isUpdated: isUpdated,
                            defaultValue: null,
                            showDefaultValue: showDefaultValue,
                            configCconfigValue: config_config_value,
                            configZwaveValue: config_zwave_value,
                            confNum: conf_num,
                            confSize: conf_size
                        };
                        break;
                    }
                    angular.forEach(rangeParam, function(value_html, ri) {
                        //console.log(ri);
                        var value = value_html;

                        if (ri == 'description') {
                            //console.log(ri);
                            var value_from = parseInt(rangeParam['_from'], 16);
                            var value_to = parseInt(rangeParam['_to'], 16);

                        } else {
                            var value_from = parseInt(value['_from'], 16);
                            var value_to = parseInt(value['_to'], 16);
                        }
                        var value_description = '';
                        if (angular.isDefined(value.description)) {
                            value_description = configGetZddxLang($filter('hasNode')(value, 'description.lang'), lang);
                        }
                        if (angular.isDefined(value.lang)) {
                            value_description = configGetZddxLang($filter('hasNode')(value, 'lang'), lang);
                        }
                        //var value_description = deviceService.configGetZddxLang($filter('hasNode')(value, 'lang'), $scope.lang);

                        if (conf_default !== null)
                            conf_default_value = conf_default;


                        if (value_from != value_to) {
                            if (value_description != '') {
                                var rangeVal = {
                                    label: value_description,
                                    type: {
                                        range: {
                                            min: value_from,
                                            max: value_to
                                        }
                                    }
                                };
                                param_struct_arr.push(rangeVal);
                            }
                        }
                        else // this is a fix value
                        if (value_description != '') {
                            param_struct_arr.push({
                                label: value_description,
                                type: {
                                    fix: {
                                        value: value_from
                                    }
                                }
                            });
                        }
                    });

                    if (param_struct_arr.length > 1)
                        conf_method_descr = {
                            nodeId: nodeId,
                            label: 'Nº ' + conf_num + ' - ' + conf_name,
                            type: {
                                enumof: param_struct_arr
                            },
                            hideRadio: false,
                            name: 'input_' + nodeId + '_' + conf_num,
                            description: conf_description,
                            updateTime: updateTime,
                            isUpdated: isUpdated,
                            defaultValue: conf_default_value,
                            showDefaultValue: showDefaultValue,
                            configCconfigValue: config_config_value,
                            configZwaveValue: config_zwave_value,
                            confNum: conf_num,
                            confSize: conf_size
                        };
                    else if (param_struct_arr.length == 1) {

                        conf_method_descr = {
                            nodeId: nodeId,
                            label: 'Nº ' + conf_num + ' - ' + conf_name,
                            type: {
                                enumof: param_struct_arr
                            },
                            name: 'input_' + nodeId + '_' + conf_num,
                            hideRadio: true,
                            description: conf_description,
                            updateTime: updateTime,
                            isUpdated: isUpdated,
                            defaultValue: conf_default_value,
                            showDefaultValue: showDefaultValue,
                            configCconfigValue: config_config_value,
                            configZwaveValue: config_zwave_value,
                            confNum: conf_num,
                            confSize: conf_size
                        };
                    }

                    break;
                case 'bitset':
                    var param_struct_arr = [];
                    var conf_param_options = '';
                    var conf_default_value_arr = new Object;
                    if (conf_default !== null) {
                        var bit = 0;
                        do {
                            if ((1 << bit) & conf_default)
                                conf_default_value_arr[bit] = 'Bit ' + bit + ' set';
                        } while ((1 << (bit++)) < conf_default);
                    }
                    ;
                    angular.forEach(conf['value'], function(value_html, i) {
                        var value = value_html;
                        var value_from = parseInt(value['_from'], 16);
                        var value_to = parseInt(value['_to'], 16);
                        var value_description = 'fdf';
                        var value_description = '';
                        if (conf_default !== null) {
                            if (value_from == value_to) {
                                if ((1 << value_from) & conf_default)
                                    conf_default_value_arr[value_from] = value_description;
                            } else {
                                conf_default_value_arr[value_from] = (conf_default >> value_from) & ((1 << (value_to - value_from + 1)) - 1)
                                for (var bit = value_from + 1; bit <= value_to; bit++)
                                    delete conf_default_value_arr[bit];
                            }
                        }
                        ;
                        if (value_from == value_to)
                            param_struct_arr.push({
                                label: value_description,
                                name: 'input_' + nodeId + '_' + conf_num,
                                type: {
                                    bitcheck: {
                                        bit: value_from
                                    }
                                }
                            });
                        else
                            param_struct_arr.push({
                                label: value_description,
                                name: 'input_' + nodeId + '_' + conf_num,
                                type: {
                                    bitrange: {
                                        bit_from: value_from,
                                        bit_to: value_to
                                    }
                                }
                            });
                    });
                    if (conf_default !== null) {
                        conf_default_value = '';
                        for (var ii in conf_default_value_arr)
                            conf_default_value += conf_default_value_arr[ii] + ', ';
                        if (conf_default_value.length)
                            conf_default_value = conf_default_value.substr(0, conf_default_value.length - 2);
                    }
                    conf_method_descr = {
                        nodeId: nodeId,
                        label: 'Nº ' + conf_num + ' - ' + conf_name,
                        type: {
                            bitset: param_struct_arr
                        },
                        name: 'input_' + nodeId + '_' + conf_num,
                        description: conf_description,
                        updateTime: updateTime,
                        isUpdated: isUpdated,
                        defaultValue: conf_default_value,
                        showDefaultValue: showDefaultValue,
                        configCconfigValue: config_config_value,
                        configZwaveValue: config_zwave_value,
                        confNum: conf_num,
                        confSize: conf_size
                    };
                    break;
                default:
                    return;
                    //conf_cont.append('<span>' + $.translate('unhandled_type_parameter') + ': ' + conf_type + '</span>');
            }
            ;

            config_cont.push(conf_method_descr);
            parCnt++;
        });
        //console.log(config_cont);
        return config_cont;
    }

    /**
     * Switch all cont
     */
    function configSwitchAllCont(node, nodeId, ZWaveAPIData, cfgXml) {
        var switchall_cont = false;
        if (0x27 in node.instances[0].commandClasses) {
            var cfgFile = getCfgXmlParam(cfgXml, nodeId, '0', '27', 'Set');
            var uTime = node.instances[0].commandClasses[0x27].data.mode.updateTime;
            var iTime = node.instances[0].commandClasses[0x27].data.mode.invalidateTime;
            var updateTime = $filter('isTodayFromUnix')(uTime);
            var isUpdated = (uTime > iTime ? true : false);
            var gui_descr = getMethodSpec(ZWaveAPIData, nodeId, 0, 0x27, 'Set');
            var conf_default_value = 0;
            var switchall_conf_value;
            if (cfgFile !== undefined) {
                switchall_conf_value = cfgFile[0];
            } else {
                switchall_conf_value = 1;// by default switch all off group only
            }
            switchall_cont = {
                'params': gui_descr,
                'values': {0: switchall_conf_value},
                name: 'switchall_' + nodeId + '_' + 0,
                updateTime: updateTime,
                isUpdated: isUpdated,
                defaultValue: conf_default_value,
                showDefaultValue: conf_default_value,
                configCconfigValue: switchall_conf_value,
                confNum: 0,
                confSize: 0,
                cmd: 'devices[' + nodeId + '].instances[0].commandClasses[0x27]'
            };

        }
        ;
        return switchall_cont;
    }

    /**
     * Protection cont
     */
    function configProtectionCont(node, nodeId, ZWaveAPIData, cfgXml) {
        var protection_cont = false;
        if (0x75 in node.instances[0].commandClasses) {
            var cfgFile = getCfgXmlParam(cfgXml, nodeId, '0', '75', 'Set');
            var uTime = node.instances[0].commandClasses[0x75].data.state.updateTime;
            var iTime = node.instances[0].commandClasses[0x75].data.state.invalidateTime;
            var updateTime = $filter('isTodayFromUnix')(uTime);
            var isUpdated = (uTime > iTime ? true : false);
            var gui_descr = getMethodSpec(ZWaveAPIData, nodeId, 0, 0x75, 'Set');
            var conf_default_value = 0;
            var protection_conf_value;
            //var protection_conf_rf_value;
            // get default value from the config XML
            if (cfgFile !== undefined) {
                protection_conf_value = cfgFile[0];
            } else {
                protection_conf_value = 0;// by default switch all off group only
            }

            protection_cont = {
                'params': gui_descr,
                'values': {0: protection_conf_value},
                name: 'protection_' + nodeId + '_' + 0,
                updateTime: updateTime,
                isUpdated: isUpdated,
                defaultValue: conf_default_value,
                showDefaultValue: conf_default_value,
                configCconfigValue: protection_conf_value,
                confNum: 0,
                confSize: 0,
                cmd: 'devices[' + nodeId + '].instances[0].commandClasses[0x75]'
            };
        }
        ;
        return protection_cont;
    }

    /**
     * Wakeup cont
     */
    function configWakeupCont(node, nodeId, ZWaveAPIData, cfgXml) {
        var wakeup_cont = false;
        if (0x84 in node.instances[0].commandClasses) {
            var cfgFile = getCfgXmlParam(cfgXml, nodeId, '0', '84', 'Set');
            var wakeup_zwave_min = (node.instances[0].commandClasses[0x84].data.version.value == 1) ? 0 : node.instances[0].commandClasses[0x84].data.min.value;
            var wakeup_zwave_max = (node.instances[0].commandClasses[0x84].data.version.value == 1) ? 0xFFFFFF : node.instances[0].commandClasses[0x84].data.max.value;
            var wakeup_zwave_value = node.instances[0].commandClasses[0x84].data.interval.value;
            var wakeup_zwave_default_value = (node.instances[0].commandClasses[0x84].data.version.value == 1) ? 86400 : node.instances[0].commandClasses[0x84].data['default'].value; // default is a special keyword in JavaScript
            var wakeup_zwave_nodeId = node.instances[0].commandClasses[0x84].data.nodeId.value;
            var uTime = node.instances[0].commandClasses[0x84].data.updateTime;
            var iTime = node.instances[0].commandClasses[0x84].data.invalidateTime;
            var updateTime = $filter('isTodayFromUnix')(uTime);
            var isUpdated = (uTime > iTime ? true : false);
            if (wakeup_zwave_min !== '' && wakeup_zwave_max !== '') {
                var gui_descr = getMethodSpec(ZWaveAPIData, nodeId, 0, 0x84, 'Set');
                gui_descr[0].type.range.min = parseInt(wakeup_zwave_min, 10);
                gui_descr[0].type.range.max = parseInt(wakeup_zwave_max, 10);
                var wakeup_conf_value;
                var wakeup_conf_node_value = 0;
                if (angular.isArray(cfgFile) && cfgFile.length > 0) {
                    wakeup_conf_value = cfgFile[0] || 0;
                    wakeup_conf_node_value = cfgFile[1] || 0;
                } else {
                    if (wakeup_zwave_value != "" && wakeup_zwave_value != 0 && wakeup_zwave_nodeId != "") {
                        // not defined in config: adopt devices values
                        wakeup_conf_value = parseInt(wakeup_zwave_value, 10);
                    } else {
                        // values in device are missing. Use defaults
                        wakeup_conf_value = parseInt(wakeup_zwave_default_value, 10);
                    }
                    ;
                }
                ;
                wakeup_cont = {
                    'params': gui_descr,
                    'values': {"0": wakeup_conf_value},
                    name: 'wakeup_' + nodeId + '_' + 0,
                    updateTime: updateTime,
                    isUpdated: isUpdated,
                    defaultValue: wakeup_zwave_default_value,
                    showDefaultValue: wakeup_zwave_default_value,
                    configCconfigValue: wakeup_conf_value,
                    configCconfigNodeValue: wakeup_conf_node_value,
                    confNum: 0,
                    confSize: 0,
                    cmd: 'devices[' + nodeId + '].instances[0].commandClasses[0x84]'
                };
            } else {
                //$('#wakeup_cont .cfg-block-content').append('<span>' + $scope._t('config_ui_wakeup_no_min_max') + '</span>');
            }
        }
        ;
        return wakeup_cont;
    }

    /**
     *Build config XML file
     */
    function buildCfgXml(data, cfgXml, id, commandclass) {
        var hasCfgXml = false;
        var assocCc = [133, 142];
        var formData = [];
        if (commandclass == '84') {
            var par1 = JSON.parse(data[0]['parameter']);
            var par2 = JSON.parse(data[1]['parameter']);
            var wakeData = {
                'id': id,
                'instance': data[0]['instance'],
                'commandclass': commandclass,
                'command': data[0]['command'],
                'parameter': '[' + par1 + ',' + par2 + ']'
            };
            formData.push(wakeData);
        } else {
            formData = data;
        }
        var xmlData = formData;
        if (angular.isObject(cfgXml) && $filter('hasNode')(cfgXml, 'config.devices.deviceconfiguration')) {
            hasCfgXml = cfgXml.config.devices.deviceconfiguration;
            angular.forEach(hasCfgXml, function(v, k) {
                var obj = {};
                if (v['_id'] == id && v['_commandclass'] == commandclass) {
                    return;
                }
                obj['id'] = v['_id'];
                obj['instance'] = v['_instance'];
                obj['commandclass'] = v['_commandclass'];
                obj['command'] = v['_command'];
                obj['parameter'] = v['_parameter'];
                obj['group'] = v['_group'];
                xmlData.push(obj);

            });
        }
        var ret = buildCfgXmlFile(xmlData);
        return ret;

    }

    /**
     * Build cfg XML file
     */
    function buildCfgXmlFile(xmlData) {
        var assocCc = [133, 142];
        var xml = '<config><devices>' + "\n";

        angular.forEach(xmlData, function(v, k) {
            if (assocCc.indexOf(parseInt(v.commandclass, 10)) > -1) {
                xml += '<deviceconfiguration id="' + v.id + '" instance="' + v.instance + '" commandclass="' + v.commandclass + '" command="' + v.command + '" group="' + v.group + '" parameter="' + v.parameter + '"/>' + "\n";

            } else {
                xml += '<deviceconfiguration id="' + v.id + '" instance="' + v.instance + '" commandclass="' + v.commandclass + '" command="' + v.command + '" parameter="' + v.parameter + '"/>' + "\n";
            }

        });
        xml += '</devices></config>' + "\n";
        return xml;

    }
});

/**
 * Device configuration controller from ExpertUI
 * @author Martin Vach
 */
myAppController.controller('ConfigConfigurationController', function($scope, $routeParams, $location, $interval, $filter, $timeout, dataFactory, dataService, expertService) {
    
    $scope.devices = [];
    $scope.deviceId = 0;
    $scope.reset = function() {
        $scope.devices = angular.copy([]);
    };
    $scope.apiDataInterval = null;
    // Config vars
    $scope.deviceZddx = [];
    $scope.configCont;
    $scope.switchAllCont;
    $scope.protectionCont;
    $scope.wakeupCont;
    
    // Cancel interval on page destroy
    $scope.$on('$destroy', function() {
        $interval.cancel($scope.apiDataInterval);
    });

    // Load data
    $scope.load = function(nodeId) {
        dataFactory.loadZwaveApiData().then(function(ZWaveAPIData) {
            var node = ZWaveAPIData.devices[nodeId];
            if (!node) {
                return;
            }
            $scope.ZWaveAPIData = ZWaveAPIData;
            $scope.deviceId = nodeId;
            $scope.deviceName = $filter('deviceName')(nodeId, node);
            $scope.devices = expertService.configGetNav(ZWaveAPIData);
            $scope.getNodeDevices = function() {
                var devices = [];
                angular.forEach($scope.devices, function(v, k) {
                    if (devices_htmlSelect_filter($scope.ZWaveAPIData, 'span', v.id, 'node')) {
                        return;
                    }
                    ;
                    var obj = {};
                    obj['id'] = v.id;
                    obj['name'] = v.name;
                    devices.push(obj);
                });

                return devices;
            };
            //$scope.getNodeDevices();
            setData(ZWaveAPIData, nodeId);
        }, function(error) {
            dataService.showConnectionError(error);
        });
    };
    $scope.load($routeParams.nodeId);
    
    /**
     * Refresh data
     */
    $scope.refresh = function(nodeId) {
        var refresh = function() {
            dataFactory.joinedZwaveData().then(function(response) {
                dataService.updateTimeTick(response.data.update.updateTime);
                 setData(response.data.joined, nodeId,true);
            }, function(error) {
                dataService.showConnectionError(error);
            });
        };
        $scope.apiDataInterval = $interval(refresh, $scope.cfg.interval);
    };

    //$scope.refresh($routeParams.nodeId);

    /**
     * Update from device action
     *
     * @param {string} cmd
     * @returns {undefined}
     */
    $scope.updateFromDevice = function(cmd,hasBattery) {
         $scope.loading = {status:'loading-spin',icon:'fa-spinner fa-spin', message:$scope._t('updating')};
         if (hasBattery) {
            alert($scope._t('conf_apply_battery'));
        }
        dataFactory.runExpertCmd(cmd, true).then(function(response) {
            
            //dataService.logInfo(response, 'Update from device');
        }, function(error) {
            dataService.logError(error, 'Update from device');
            alert($scope._t('error_update_data'));
        });
        $scope.refresh($routeParams.nodeId);
        $timeout(function() {
             $scope.loading = {status:'loading-fade',icon:'fa-check text-success', message:$scope._t('success_updated')};
            $interval.cancel($scope.apiDataInterval);
        }, 7000);
        return;
    };

    /**
     * Update from device - configuration section
     */
    $scope.updateFromDeviceCfg = function(cmd, cfg, deviceId) {
         $scope.loading = {status:'loading-spin',icon:'fa-spinner fa-spin', message:$scope._t('updating')};
        angular.forEach(cfg, function(v, k) {
            if (v.confNum) {
                var request = cmd + '(' + v.confNum + ')';
                dataFactory.runExpertCmd(request, true).then(function(response) {
                }, function(error) {
                    dataService.logError(error);
                    return;
                });
            }

        });
        $scope.refresh(deviceId);
        $timeout(function() {
            $scope.loading = {status:'loading-fade',icon:'fa-check text-success', message:$scope._t('success_updated')};
            $interval.cancel($scope.apiDataInterval);
        }, 7000);
        return;
    };

    /**
     * Apply Config action
     */
    $scope.submitApplyConfigCfg = function(form, cmd, cfgValues, hasBattery, confNum) {
         $scope.loading = {status:'loading-spin',icon:'fa-spinner fa-spin', message:$scope._t('updating')};
        var xmlData = [];
        var configValues = [];
        if (hasBattery) {
            alert($scope._t('conf_apply_battery'));
        }
        var data = $('#' + form).serializeArray();
        var dataValues = [];
        angular.forEach(data, function(v, k) {
            if (v.value !== '') {
                dataValues.push({"value": v.value, "name": v.name});
            }

        });

        angular.forEach(dataValues, function(n, nk) {
            var obj = {};
            var parameter;
            var lastNum = n.name.match(/\d+$/);
            if (!lastNum) {
                return;
            }
            var num = lastNum[0];
            var confSize = 0;
            //var lastNum = n.name.match(/\d+$/);
            var value = n.value;
            configValues.push(value)
            angular.forEach(cfgValues, function(cv, ck) {
                if (!cv) {
                    return;
                }
                if (cv.confNum == num) {
                    confSize = cv.confSize;
                }


            });
            if (num > 0) {
                parameter = num + ',' + value + ',' + confSize;
            } else {
                parameter = value;
            }

            obj['id'] = cmd['id'];
            obj['instance'] = cmd['instance'];
            obj['commandclass'] = cmd['commandclass'];
            obj['command'] = cmd['command'];
            obj['parameter'] = '[' + parameter + ']';
            obj['parameterValues'] = parameter;
            obj['confNum'] = num;

            xmlData.push(obj);


        });
        
        // Send command
        var request = 'devices[' + cmd.id + '].instances[' + cmd.instance + '].commandClasses[0x' + cmd.commandclass + '].';
        switch (cmd['commandclass']) {
            case '70':// Config
                angular.forEach(xmlData, function(v, k) {

                    var configRequest = request;
                    configRequest += cmd.command + '(' + v.parameterValues + ')';
                    if (confNum) {
                        if (confNum == v.confNum) {
                            dataFactory.runExpertCmd(configRequest, true).then(function(response){}, function(error) {
                                dataService.logError(error);
                            });
                        }
                    } else {
                        dataFactory.runExpertCmd(configRequest, true).then(function(response){},function(error) {
                            dataService.logError(error);
                        });
                    }

                });
                break;
            case '75':// Protection
                request += cmd.command + '(' + configValues.join(",") + ')';
                dataFactory.runExpertCmd(request, true).then(function(response){},function(error) {
                    dataService.logError(error);
                });
                break;
            case '84':// Wakeup
                request += cmd.command + '(' + configValues.join(",") + ')';
                dataFactory.runExpertCmd(request, true).then(function(response){},function(error) {
                    dataService.logError(error);
                });
                break;
            case '27':// Switch all
                request += cmd.command + '(' + configValues.join(",") + ')';
                dataFactory.runExpertCmd(request, true).then(function(response){},function(error) {
                    dataService.logError(error);
                });
                break;
            default:
                break;
        }
        dataFactory.xmlToJson($scope.cfg.server_url + $scope.cfg.cfg_xml_url, true).then(function(cfgXml) {
           var xmlFile = expertService.buildCfgXml(xmlData, cfgXml, cmd['id'], cmd['commandclass']);
           dataFactory. putCfgXml(xmlFile).then(function(response){},function(error) {
                    dataService.logError(error);
                    alert($scope._t('error_update_data'));
                });
        }, function(error) {
            dataService.logError(error);
            alert($scope._t('error_update_data'));
        });

        $scope.refresh(cmd['id']);
        $timeout(function() {
            $scope.loading = {status:'loading-fade',icon:'fa-check text-success', message:$scope._t('success_updated')};
            $interval.cancel($scope.apiDataInterval);
        }, 7000);
        return;
    };


    /// --- Private functions --- ///
    /**
     * Set zwave data
     */
    function setData(ZWaveAPIData, nodeId, refresh) {
        var node = ZWaveAPIData.devices[nodeId];
        $scope.showDevices = true;
        //$scope.deviceNameId = $filter('deviceName')(nodeId, node) + ' (#' + nodeId + ')';
        $scope.hasBattery = 0x80 in node.instances[0].commandClasses;
        var zddXmlFile = null;
        if (angular.isDefined(node.data.ZDDXMLFile)) {
            zddXmlFile = node.data.ZDDXMLFile.value;
            $scope.deviceZddxFile = node.data.ZDDXMLFile.value;
        }

        //$scope.interviewCommands = deviceService.configGetInterviewCommands(node, ZWaveAPIData.updateTime);
        //$scope.interviewCommandsDevice = node.data;
        if (zddXmlFile && zddXmlFile !== 'undefined') {
            dataFactory.xmlToJson($scope.cfg.server_url + $scope.cfg.zddx_url + zddXmlFile).then(function(zddXml) {
                setCont(node, nodeId, zddXml, ZWaveAPIData, refresh);
            }, function(error) {
                dataService.logError(error);
            });

        } else {
            setCont(node, nodeId, null, ZWaveAPIData, refresh);
        }
    }

    /**
     * Set all conts
     */
    function setCont(node, nodeId, zddXml, ZWaveAPIData, refresh) {
        if (!zddXml) {
            $scope.noZddx = true;
        }
        dataFactory.xmlToJson($scope.cfg.server_url + $scope.cfg.cfg_xml_url, true).then(function(cfgXml) {
            $scope.configCont = expertService.configConfigCont(node, nodeId, zddXml, cfgXml, $scope.lang, $scope.languages);
            $scope.wakeupCont = expertService.configWakeupCont(node, nodeId, ZWaveAPIData, cfgXml);
            $scope.protectionCont = expertService.configProtectionCont(node, nodeId, ZWaveAPIData, cfgXml);
            $scope.switchAllCont = expertService.configSwitchAllCont(node, nodeId, ZWaveAPIData, cfgXml);
        }, function(error) {
            dataService.logError(error);
        });
    }
});

